
RGBLED_ENCODER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08007d20  08007d20  00017d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ff0  08007ff0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08007ff0  08007ff0  00017ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ff8  08007ff8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ff8  08007ff8  00017ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ffc  08007ffc  00017ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08008000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000068  08008068  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08008068  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fe70  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020d2  00000000  00000000  0002ff4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  00032020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd4  00000000  00000000  00032f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d33  00000000  00000000  00033b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001196a  00000000  00000000  0005b84f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f64ca  00000000  00000000  0006d1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d6c  00000000  00000000  00163684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001683f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d08 	.word	0x08007d08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08007d08 	.word	0x08007d08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b970 	b.w	8000f04 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9e08      	ldr	r6, [sp, #32]
 8000c42:	460d      	mov	r5, r1
 8000c44:	4604      	mov	r4, r0
 8000c46:	460f      	mov	r7, r1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d14a      	bne.n	8000ce2 <__udivmoddi4+0xa6>
 8000c4c:	428a      	cmp	r2, r1
 8000c4e:	4694      	mov	ip, r2
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0xe2>
 8000c52:	fab2 f382 	clz	r3, r2
 8000c56:	b143      	cbz	r3, 8000c6a <__udivmoddi4+0x2e>
 8000c58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c5c:	f1c3 0220 	rsb	r2, r3, #32
 8000c60:	409f      	lsls	r7, r3
 8000c62:	fa20 f202 	lsr.w	r2, r0, r2
 8000c66:	4317      	orrs	r7, r2
 8000c68:	409c      	lsls	r4, r3
 8000c6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c6e:	fa1f f58c 	uxth.w	r5, ip
 8000c72:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c76:	0c22      	lsrs	r2, r4, #16
 8000c78:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c80:	fb01 f005 	mul.w	r0, r1, r5
 8000c84:	4290      	cmp	r0, r2
 8000c86:	d90a      	bls.n	8000c9e <__udivmoddi4+0x62>
 8000c88:	eb1c 0202 	adds.w	r2, ip, r2
 8000c8c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c90:	f080 811c 	bcs.w	8000ecc <__udivmoddi4+0x290>
 8000c94:	4290      	cmp	r0, r2
 8000c96:	f240 8119 	bls.w	8000ecc <__udivmoddi4+0x290>
 8000c9a:	3902      	subs	r1, #2
 8000c9c:	4462      	add	r2, ip
 8000c9e:	1a12      	subs	r2, r2, r0
 8000ca0:	b2a4      	uxth	r4, r4
 8000ca2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000caa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cae:	fb00 f505 	mul.w	r5, r0, r5
 8000cb2:	42a5      	cmp	r5, r4
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x90>
 8000cb6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cba:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cbe:	f080 8107 	bcs.w	8000ed0 <__udivmoddi4+0x294>
 8000cc2:	42a5      	cmp	r5, r4
 8000cc4:	f240 8104 	bls.w	8000ed0 <__udivmoddi4+0x294>
 8000cc8:	4464      	add	r4, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cd0:	1b64      	subs	r4, r4, r5
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11e      	cbz	r6, 8000cde <__udivmoddi4+0xa2>
 8000cd6:	40dc      	lsrs	r4, r3
 8000cd8:	2300      	movs	r3, #0
 8000cda:	e9c6 4300 	strd	r4, r3, [r6]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0xbc>
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	f000 80ed 	beq.w	8000ec6 <__udivmoddi4+0x28a>
 8000cec:	2100      	movs	r1, #0
 8000cee:	e9c6 0500 	strd	r0, r5, [r6]
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf8:	fab3 f183 	clz	r1, r3
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	d149      	bne.n	8000d94 <__udivmoddi4+0x158>
 8000d00:	42ab      	cmp	r3, r5
 8000d02:	d302      	bcc.n	8000d0a <__udivmoddi4+0xce>
 8000d04:	4282      	cmp	r2, r0
 8000d06:	f200 80f8 	bhi.w	8000efa <__udivmoddi4+0x2be>
 8000d0a:	1a84      	subs	r4, r0, r2
 8000d0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d10:	2001      	movs	r0, #1
 8000d12:	4617      	mov	r7, r2
 8000d14:	2e00      	cmp	r6, #0
 8000d16:	d0e2      	beq.n	8000cde <__udivmoddi4+0xa2>
 8000d18:	e9c6 4700 	strd	r4, r7, [r6]
 8000d1c:	e7df      	b.n	8000cde <__udivmoddi4+0xa2>
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xe6>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f382 	clz	r3, r2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f040 8090 	bne.w	8000e4c <__udivmoddi4+0x210>
 8000d2c:	1a8a      	subs	r2, r1, r2
 8000d2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d32:	fa1f fe8c 	uxth.w	lr, ip
 8000d36:	2101      	movs	r1, #1
 8000d38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d40:	0c22      	lsrs	r2, r4, #16
 8000d42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d46:	fb0e f005 	mul.w	r0, lr, r5
 8000d4a:	4290      	cmp	r0, r2
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x124>
 8000d4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x122>
 8000d58:	4290      	cmp	r0, r2
 8000d5a:	f200 80cb 	bhi.w	8000ef4 <__udivmoddi4+0x2b8>
 8000d5e:	4645      	mov	r5, r8
 8000d60:	1a12      	subs	r2, r2, r0
 8000d62:	b2a4      	uxth	r4, r4
 8000d64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d68:	fb07 2210 	mls	r2, r7, r0, r2
 8000d6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d70:	fb0e fe00 	mul.w	lr, lr, r0
 8000d74:	45a6      	cmp	lr, r4
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x14e>
 8000d78:	eb1c 0404 	adds.w	r4, ip, r4
 8000d7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d80:	d202      	bcs.n	8000d88 <__udivmoddi4+0x14c>
 8000d82:	45a6      	cmp	lr, r4
 8000d84:	f200 80bb 	bhi.w	8000efe <__udivmoddi4+0x2c2>
 8000d88:	4610      	mov	r0, r2
 8000d8a:	eba4 040e 	sub.w	r4, r4, lr
 8000d8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d92:	e79f      	b.n	8000cd4 <__udivmoddi4+0x98>
 8000d94:	f1c1 0720 	rsb	r7, r1, #32
 8000d98:	408b      	lsls	r3, r1
 8000d9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da2:	fa05 f401 	lsl.w	r4, r5, r1
 8000da6:	fa20 f307 	lsr.w	r3, r0, r7
 8000daa:	40fd      	lsrs	r5, r7
 8000dac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db0:	4323      	orrs	r3, r4
 8000db2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	fb09 5518 	mls	r5, r9, r8, r5
 8000dbe:	0c1c      	lsrs	r4, r3, #16
 8000dc0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dc4:	fb08 f50e 	mul.w	r5, r8, lr
 8000dc8:	42a5      	cmp	r5, r4
 8000dca:	fa02 f201 	lsl.w	r2, r2, r1
 8000dce:	fa00 f001 	lsl.w	r0, r0, r1
 8000dd2:	d90b      	bls.n	8000dec <__udivmoddi4+0x1b0>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ddc:	f080 8088 	bcs.w	8000ef0 <__udivmoddi4+0x2b4>
 8000de0:	42a5      	cmp	r5, r4
 8000de2:	f240 8085 	bls.w	8000ef0 <__udivmoddi4+0x2b4>
 8000de6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dea:	4464      	add	r4, ip
 8000dec:	1b64      	subs	r4, r4, r5
 8000dee:	b29d      	uxth	r5, r3
 8000df0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df4:	fb09 4413 	mls	r4, r9, r3, r4
 8000df8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dfc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x1da>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e0c:	d26c      	bcs.n	8000ee8 <__udivmoddi4+0x2ac>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	d96a      	bls.n	8000ee8 <__udivmoddi4+0x2ac>
 8000e12:	3b02      	subs	r3, #2
 8000e14:	4464      	add	r4, ip
 8000e16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	42ac      	cmp	r4, r5
 8000e24:	46c8      	mov	r8, r9
 8000e26:	46ae      	mov	lr, r5
 8000e28:	d356      	bcc.n	8000ed8 <__udivmoddi4+0x29c>
 8000e2a:	d053      	beq.n	8000ed4 <__udivmoddi4+0x298>
 8000e2c:	b156      	cbz	r6, 8000e44 <__udivmoddi4+0x208>
 8000e2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e32:	eb64 040e 	sbc.w	r4, r4, lr
 8000e36:	fa04 f707 	lsl.w	r7, r4, r7
 8000e3a:	40ca      	lsrs	r2, r1
 8000e3c:	40cc      	lsrs	r4, r1
 8000e3e:	4317      	orrs	r7, r2
 8000e40:	e9c6 7400 	strd	r7, r4, [r6]
 8000e44:	4618      	mov	r0, r3
 8000e46:	2100      	movs	r1, #0
 8000e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4c:	f1c3 0120 	rsb	r1, r3, #32
 8000e50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e54:	fa20 f201 	lsr.w	r2, r0, r1
 8000e58:	fa25 f101 	lsr.w	r1, r5, r1
 8000e5c:	409d      	lsls	r5, r3
 8000e5e:	432a      	orrs	r2, r5
 8000e60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e64:	fa1f fe8c 	uxth.w	lr, ip
 8000e68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e70:	0c11      	lsrs	r1, r2, #16
 8000e72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e76:	fb00 f50e 	mul.w	r5, r0, lr
 8000e7a:	428d      	cmp	r5, r1
 8000e7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x258>
 8000e82:	eb1c 0101 	adds.w	r1, ip, r1
 8000e86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8a:	d22f      	bcs.n	8000eec <__udivmoddi4+0x2b0>
 8000e8c:	428d      	cmp	r5, r1
 8000e8e:	d92d      	bls.n	8000eec <__udivmoddi4+0x2b0>
 8000e90:	3802      	subs	r0, #2
 8000e92:	4461      	add	r1, ip
 8000e94:	1b49      	subs	r1, r1, r5
 8000e96:	b292      	uxth	r2, r2
 8000e98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea8:	4291      	cmp	r1, r2
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x282>
 8000eac:	eb1c 0202 	adds.w	r2, ip, r2
 8000eb0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb4:	d216      	bcs.n	8000ee4 <__udivmoddi4+0x2a8>
 8000eb6:	4291      	cmp	r1, r2
 8000eb8:	d914      	bls.n	8000ee4 <__udivmoddi4+0x2a8>
 8000eba:	3d02      	subs	r5, #2
 8000ebc:	4462      	add	r2, ip
 8000ebe:	1a52      	subs	r2, r2, r1
 8000ec0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ec4:	e738      	b.n	8000d38 <__udivmoddi4+0xfc>
 8000ec6:	4631      	mov	r1, r6
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e708      	b.n	8000cde <__udivmoddi4+0xa2>
 8000ecc:	4639      	mov	r1, r7
 8000ece:	e6e6      	b.n	8000c9e <__udivmoddi4+0x62>
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	e6fb      	b.n	8000ccc <__udivmoddi4+0x90>
 8000ed4:	4548      	cmp	r0, r9
 8000ed6:	d2a9      	bcs.n	8000e2c <__udivmoddi4+0x1f0>
 8000ed8:	ebb9 0802 	subs.w	r8, r9, r2
 8000edc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	e7a3      	b.n	8000e2c <__udivmoddi4+0x1f0>
 8000ee4:	4645      	mov	r5, r8
 8000ee6:	e7ea      	b.n	8000ebe <__udivmoddi4+0x282>
 8000ee8:	462b      	mov	r3, r5
 8000eea:	e794      	b.n	8000e16 <__udivmoddi4+0x1da>
 8000eec:	4640      	mov	r0, r8
 8000eee:	e7d1      	b.n	8000e94 <__udivmoddi4+0x258>
 8000ef0:	46d0      	mov	r8, sl
 8000ef2:	e77b      	b.n	8000dec <__udivmoddi4+0x1b0>
 8000ef4:	3d02      	subs	r5, #2
 8000ef6:	4462      	add	r2, ip
 8000ef8:	e732      	b.n	8000d60 <__udivmoddi4+0x124>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e70a      	b.n	8000d14 <__udivmoddi4+0xd8>
 8000efe:	4464      	add	r4, ip
 8000f00:	3802      	subs	r0, #2
 8000f02:	e742      	b.n	8000d8a <__udivmoddi4+0x14e>

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b0a      	cmp	r3, #10
 8000f14:	d102      	bne.n	8000f1c <__io_putchar+0x14>
    __io_putchar('\r');
 8000f16:	200d      	movs	r0, #13
 8000f18:	f7ff fff6 	bl	8000f08 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000f1c:	1d39      	adds	r1, r7, #4
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	2201      	movs	r2, #1
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <__io_putchar+0x2c>)
 8000f26:	f004 f817 	bl	8004f58 <HAL_UART_Transmit>

  return 1;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	2000011c 	.word	0x2000011c

08000f38 <calc_pwm>:

float calc_pwm(float val)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	ed87 0a01 	vstr	s0, [r7, #4]
    const float k = 0.13f;
 8000f42:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <calc_pwm+0x80>)
 8000f44:	60fb      	str	r3, [r7, #12]
    const float x0 = 70.0f;
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <calc_pwm+0x84>)
 8000f48:	60bb      	str	r3, [r7, #8]
    return 10000.0f / (1.0f + exp(-k * (val - x0)));
 8000f4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f4e:	eeb1 7a67 	vneg.f32	s14, s15
 8000f52:	edd7 6a01 	vldr	s13, [r7, #4]
 8000f56:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f5a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f62:	ee17 0a90 	vmov	r0, s15
 8000f66:	f7ff fae7 	bl	8000538 <__aeabi_f2d>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	ec43 2b10 	vmov	d0, r2, r3
 8000f72:	f005 fc81 	bl	8006878 <exp>
 8000f76:	ec51 0b10 	vmov	r0, r1, d0
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <calc_pwm+0x88>)
 8000f80:	f7ff f97c 	bl	800027c <__adddf3>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	a109      	add	r1, pc, #36	; (adr r1, 8000fb0 <calc_pwm+0x78>)
 8000f8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f8e:	f7ff fc55 	bl	800083c <__aeabi_ddiv>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f7ff fde7 	bl	8000b6c <__aeabi_d2f>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	ee07 3a90 	vmov	s15, r3
}
 8000fa4:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	00000000 	.word	0x00000000
 8000fb4:	40c38800 	.word	0x40c38800
 8000fb8:	3e051eb8 	.word	0x3e051eb8
 8000fbc:	428c0000 	.word	0x428c0000
 8000fc0:	3ff00000 	.word	0x3ff00000

08000fc4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	if (htim == &htim4) {
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d104      	bne.n	8000fde <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fda:	f001 f88f 	bl	80020fc <HAL_GPIO_TogglePin>
	}
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200000d0 	.word	0x200000d0

08000fec <HAL_TIM_IC_CaptureCallback>:

volatile uint32_t captured_value;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if (htim == &htim3) {
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x38>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d10e      	bne.n	800101a <HAL_TIM_IC_CaptureCallback+0x2e>
    switch (HAL_TIM_GetActiveChannel(&htim3)) {
 8000ffc:	4809      	ldr	r0, [pc, #36]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x38>)
 8000ffe:	f003 fa7b 	bl	80044f8 <HAL_TIM_GetActiveChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b01      	cmp	r3, #1
 8001006:	d107      	bne.n	8001018 <HAL_TIM_IC_CaptureCallback+0x2c>
      case HAL_TIM_ACTIVE_CHANNEL_1:
        captured_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001008:	2100      	movs	r1, #0
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f003 fa12 	bl	8004434 <HAL_TIM_ReadCapturedValue>
 8001010:	4603      	mov	r3, r0
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001014:	6013      	str	r3, [r2, #0]
        break;
 8001016:	e000      	b.n	800101a <HAL_TIM_IC_CaptureCallback+0x2e>
      default:
        break;
 8001018:	bf00      	nop
    }
  }
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000084 	.word	0x20000084
 8001028:	200001a0 	.word	0x200001a0

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001032:	f000 fcde 	bl	80019f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001036:	f000 f8df 	bl	80011f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103a:	f000 fa37 	bl	80014ac <MX_GPIO_Init>
  MX_TIM3_Init();
 800103e:	f000 f92d 	bl	800129c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001042:	f000 fa03 	bl	800144c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001046:	f000 f97d 	bl	8001344 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800104a:	213c      	movs	r1, #60	; 0x3c
 800104c:	4861      	ldr	r0, [pc, #388]	; (80011d4 <main+0x1a8>)
 800104e:	f002 fe65 	bl	8003d1c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8001052:	4861      	ldr	r0, [pc, #388]	; (80011d8 <main+0x1ac>)
 8001054:	f002 fbe4 	bl	8003820 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001058:	2100      	movs	r1, #0
 800105a:	485f      	ldr	r0, [pc, #380]	; (80011d8 <main+0x1ac>)
 800105c:	f002 fcb2 	bl	80039c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001060:	2104      	movs	r1, #4
 8001062:	485d      	ldr	r0, [pc, #372]	; (80011d8 <main+0x1ac>)
 8001064:	f002 fcae 	bl	80039c4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int counter = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  int old_value = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	61bb      	str	r3, [r7, #24]
  int scaler_helper = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  int scaler = 1;
 8001074:	2301      	movs	r3, #1
 8001076:	613b      	str	r3, [r7, #16]

  printf("Do not forget to select scaler by pressing button\n");
 8001078:	4858      	ldr	r0, [pc, #352]	; (80011dc <main+0x1b0>)
 800107a:	f004 fd91 	bl	8005ba0 <puts>
  while (1)
  {
	  int value = __HAL_TIM_GET_COUNTER(&htim3);
 800107e:	4b55      	ldr	r3, [pc, #340]	; (80011d4 <main+0x1a8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	60fb      	str	r3, [r7, #12]

	  if (value >= 35) scaler_helper = 70 - value;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2b22      	cmp	r3, #34	; 0x22
 800108a:	dd04      	ble.n	8001096 <main+0x6a>
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f1c3 0346 	rsb	r3, r3, #70	; 0x46
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	e001      	b.n	800109a <main+0x6e>
	  else scaler_helper = value;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	617b      	str	r3, [r7, #20]

	  if (value != old_value) {
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d006      	beq.n	80010b0 <main+0x84>
	  	      printf("value = %d\nscaler = %d\n", value, scaler_helper);
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	68f9      	ldr	r1, [r7, #12]
 80010a6:	484e      	ldr	r0, [pc, #312]	; (80011e0 <main+0x1b4>)
 80010a8:	f004 fd14 	bl	8005ad4 <iprintf>
	  	      old_value = value;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	61bb      	str	r3, [r7, #24]
	  }

	  if (HAL_GPIO_ReadPin(ENCODER_BUTTON_GPIO_Port, ENCODER_BUTTON_Pin) == GPIO_PIN_RESET) {
 80010b0:	2110      	movs	r1, #16
 80010b2:	484c      	ldr	r0, [pc, #304]	; (80011e4 <main+0x1b8>)
 80010b4:	f000 fff2 	bl	800209c <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <main+0x96>
		  scaler = scaler_helper;
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	613b      	str	r3, [r7, #16]
	  }

//	  float r = 50 * (1.0f + sin(counter / 100.0f));
//	  float g = 50 * (1.0f + sin(1.5f * counter / 100.0f));
//	  float b = 50 * (1.0f + sin(2.0f * counter / 100.0f));
	  float r = 50 * (1.0f + sin(counter * scaler / 100.0f));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	fb02 f303 	mul.w	r3, r2, r3
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d2:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80011e8 <main+0x1bc>
 80010d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010da:	ee16 0a90 	vmov	r0, s13
 80010de:	f7ff fa2b 	bl	8000538 <__aeabi_f2d>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	ec43 2b10 	vmov	d0, r2, r3
 80010ea:	f005 fc0d 	bl	8006908 <sin>
 80010ee:	ec51 0b10 	vmov	r0, r1, d0
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <main+0x1c0>)
 80010f8:	f7ff f8c0 	bl	800027c <__adddf3>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	4b39      	ldr	r3, [pc, #228]	; (80011f0 <main+0x1c4>)
 800110a:	f7ff fa6d 	bl	80005e8 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4610      	mov	r0, r2
 8001114:	4619      	mov	r1, r3
 8001116:	f7ff fd29 	bl	8000b6c <__aeabi_d2f>
 800111a:	4603      	mov	r3, r0
 800111c:	60bb      	str	r3, [r7, #8]
	  float b = 50 * (1.0f + sin((counter * scaler / 100.0f) - PI_));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	fb02 f303 	mul.w	r3, r2, r3
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800112e:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80011e8 <main+0x1bc>
 8001132:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001136:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80011f4 <main+0x1c8>
 800113a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800113e:	ee17 0a90 	vmov	r0, s15
 8001142:	f7ff f9f9 	bl	8000538 <__aeabi_f2d>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	ec43 2b10 	vmov	d0, r2, r3
 800114e:	f005 fbdb 	bl	8006908 <sin>
 8001152:	ec51 0b10 	vmov	r0, r1, d0
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	4b24      	ldr	r3, [pc, #144]	; (80011ec <main+0x1c0>)
 800115c:	f7ff f88e 	bl	800027c <__adddf3>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <main+0x1c4>)
 800116e:	f7ff fa3b 	bl	80005e8 <__aeabi_dmul>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4610      	mov	r0, r2
 8001178:	4619      	mov	r1, r3
 800117a:	f7ff fcf7 	bl	8000b6c <__aeabi_d2f>
 800117e:	4603      	mov	r3, r0
 8001180:	607b      	str	r3, [r7, #4]
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, calc_pwm(b));
 8001182:	ed97 0a01 	vldr	s0, [r7, #4]
 8001186:	f7ff fed7 	bl	8000f38 <calc_pwm>
 800118a:	eef0 7a40 	vmov.f32	s15, s0
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <main+0x1ac>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001196:	ee17 2a90 	vmov	r2, s15
 800119a:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, calc_pwm(r));
 800119c:	ed97 0a02 	vldr	s0, [r7, #8]
 80011a0:	f7ff feca 	bl	8000f38 <calc_pwm>
 80011a4:	eef0 7a40 	vmov.f32	s15, s0
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <main+0x1ac>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011b0:	ee17 2a90 	vmov	r2, s15
 80011b4:	639a      	str	r2, [r3, #56]	; 0x38

	  HAL_Delay(10);
 80011b6:	200a      	movs	r0, #10
 80011b8:	f000 fc90 	bl	8001adc <HAL_Delay>
	  counter++;
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	3301      	adds	r3, #1
 80011c0:	61fb      	str	r3, [r7, #28]
	  if (counter == 32000) counter = 0;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80011c8:	f47f af59 	bne.w	800107e <main+0x52>
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
  {
 80011d0:	e755      	b.n	800107e <main+0x52>
 80011d2:	bf00      	nop
 80011d4:	20000084 	.word	0x20000084
 80011d8:	200000d0 	.word	0x200000d0
 80011dc:	08007d20 	.word	0x08007d20
 80011e0:	08007d54 	.word	0x08007d54
 80011e4:	48000800 	.word	0x48000800
 80011e8:	42c80000 	.word	0x42c80000
 80011ec:	3ff00000 	.word	0x3ff00000
 80011f0:	40490000 	.word	0x40490000
 80011f4:	40490fdb 	.word	0x40490fdb

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b096      	sub	sp, #88	; 0x58
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	2244      	movs	r2, #68	; 0x44
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f004 fdaa 	bl	8005d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	463b      	mov	r3, r7
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800121a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800121e:	f000 ff95 	bl	800214c <HAL_PWREx_ControlVoltageScaling>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001228:	f000 f998 	bl	800155c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800122c:	2310      	movs	r3, #16
 800122e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001230:	2301      	movs	r3, #1
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001238:	2360      	movs	r3, #96	; 0x60
 800123a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123c:	2302      	movs	r3, #2
 800123e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001240:	2301      	movs	r3, #1
 8001242:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001244:	2301      	movs	r3, #1
 8001246:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001248:	2328      	movs	r3, #40	; 0x28
 800124a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800124c:	2307      	movs	r3, #7
 800124e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001250:	2302      	movs	r3, #2
 8001252:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001254:	2302      	movs	r3, #2
 8001256:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4618      	mov	r0, r3
 800125e:	f000 ffcb 	bl	80021f8 <HAL_RCC_OscConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001268:	f000 f978 	bl	800155c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126c:	230f      	movs	r3, #15
 800126e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001270:	2303      	movs	r3, #3
 8001272:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001280:	463b      	mov	r3, r7
 8001282:	2104      	movs	r1, #4
 8001284:	4618      	mov	r0, r3
 8001286:	f001 fb93 	bl	80029b0 <HAL_RCC_ClockConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001290:	f000 f964 	bl	800155c <Error_Handler>
  }
}
 8001294:	bf00      	nop
 8001296:	3758      	adds	r7, #88	; 0x58
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08c      	sub	sp, #48	; 0x30
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	2224      	movs	r2, #36	; 0x24
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f004 fd58 	bl	8005d60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b0:	463b      	mov	r3, r7
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <MX_TIM3_Init+0xa0>)
 80012bc:	4a20      	ldr	r2, [pc, #128]	; (8001340 <MX_TIM3_Init+0xa4>)
 80012be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80012c0:	4b1e      	ldr	r3, [pc, #120]	; (800133c <MX_TIM3_Init+0xa0>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <MX_TIM3_Init+0xa0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 69;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_TIM3_Init+0xa0>)
 80012ce:	2245      	movs	r2, #69	; 0x45
 80012d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d2:	4b1a      	ldr	r3, [pc, #104]	; (800133c <MX_TIM3_Init+0xa0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	4b18      	ldr	r3, [pc, #96]	; (800133c <MX_TIM3_Init+0xa0>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012de:	2301      	movs	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012e6:	2301      	movs	r3, #1
 80012e8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 80012ee:	2303      	movs	r3, #3
 80012f0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012f6:	2301      	movs	r3, #1
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 3;
 80012fe:	2303      	movs	r3, #3
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	4619      	mov	r1, r3
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <MX_TIM3_Init+0xa0>)
 800130a:	f002 fc61 	bl	8003bd0 <HAL_TIM_Encoder_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001314:	f000 f922 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001318:	2300      	movs	r3, #0
 800131a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_TIM3_Init+0xa0>)
 8001326:	f003 fd23 	bl	8004d70 <HAL_TIMEx_MasterConfigSynchronization>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001330:	f000 f914 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	3730      	adds	r7, #48	; 0x30
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000084 	.word	0x20000084
 8001340:	40000400 	.word	0x40000400

08001344 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08e      	sub	sp, #56	; 0x38
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	615a      	str	r2, [r3, #20]
 8001374:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001376:	4b33      	ldr	r3, [pc, #204]	; (8001444 <MX_TIM4_Init+0x100>)
 8001378:	4a33      	ldr	r2, [pc, #204]	; (8001448 <MX_TIM4_Init+0x104>)
 800137a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 800137c:	4b31      	ldr	r3, [pc, #196]	; (8001444 <MX_TIM4_Init+0x100>)
 800137e:	224f      	movs	r2, #79	; 0x4f
 8001380:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b30      	ldr	r3, [pc, #192]	; (8001444 <MX_TIM4_Init+0x100>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001388:	4b2e      	ldr	r3, [pc, #184]	; (8001444 <MX_TIM4_Init+0x100>)
 800138a:	f242 720f 	movw	r2, #9999	; 0x270f
 800138e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001390:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <MX_TIM4_Init+0x100>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001396:	4b2b      	ldr	r3, [pc, #172]	; (8001444 <MX_TIM4_Init+0x100>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800139c:	4829      	ldr	r0, [pc, #164]	; (8001444 <MX_TIM4_Init+0x100>)
 800139e:	f002 f9e7 	bl	8003770 <HAL_TIM_Base_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80013a8:	f000 f8d8 	bl	800155c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013b6:	4619      	mov	r1, r3
 80013b8:	4822      	ldr	r0, [pc, #136]	; (8001444 <MX_TIM4_Init+0x100>)
 80013ba:	f002 ff71 	bl	80042a0 <HAL_TIM_ConfigClockSource>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80013c4:	f000 f8ca 	bl	800155c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013c8:	481e      	ldr	r0, [pc, #120]	; (8001444 <MX_TIM4_Init+0x100>)
 80013ca:	f002 fa99 	bl	8003900 <HAL_TIM_PWM_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80013d4:	f000 f8c2 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	4817      	ldr	r0, [pc, #92]	; (8001444 <MX_TIM4_Init+0x100>)
 80013e8:	f003 fcc2 	bl	8004d70 <HAL_TIMEx_MasterConfigSynchronization>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80013f2:	f000 f8b3 	bl	800155c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f6:	2360      	movs	r3, #96	; 0x60
 80013f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80013fa:	2332      	movs	r3, #50	; 0x32
 80013fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80013fe:	2302      	movs	r3, #2
 8001400:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001406:	463b      	mov	r3, r7
 8001408:	2200      	movs	r2, #0
 800140a:	4619      	mov	r1, r3
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <MX_TIM4_Init+0x100>)
 800140e:	f002 fe33 	bl	8004078 <HAL_TIM_PWM_ConfigChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001418:	f000 f8a0 	bl	800155c <Error_Handler>
  }
  sConfigOC.Pulse = 200;
 800141c:	23c8      	movs	r3, #200	; 0xc8
 800141e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001420:	463b      	mov	r3, r7
 8001422:	2204      	movs	r2, #4
 8001424:	4619      	mov	r1, r3
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <MX_TIM4_Init+0x100>)
 8001428:	f002 fe26 	bl	8004078 <HAL_TIM_PWM_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8001432:	f000 f893 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001436:	4803      	ldr	r0, [pc, #12]	; (8001444 <MX_TIM4_Init+0x100>)
 8001438:	f000 f92a 	bl	8001690 <HAL_TIM_MspPostInit>

}
 800143c:	bf00      	nop
 800143e:	3738      	adds	r7, #56	; 0x38
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200000d0 	.word	0x200000d0
 8001448:	40000800 	.word	0x40000800

0800144c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001452:	4a15      	ldr	r2, [pc, #84]	; (80014a8 <MX_USART2_UART_Init+0x5c>)
 8001454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001456:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800145c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 800148a:	2200      	movs	r2, #0
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001490:	f003 fd14 	bl	8004ebc <HAL_UART_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800149a:	f000 f85f 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000011c 	.word	0x2000011c
 80014a8:	40004400 	.word	0x40004400

080014ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	4b24      	ldr	r3, [pc, #144]	; (8001554 <MX_GPIO_Init+0xa8>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	4a23      	ldr	r2, [pc, #140]	; (8001554 <MX_GPIO_Init+0xa8>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ce:	4b21      	ldr	r3, [pc, #132]	; (8001554 <MX_GPIO_Init+0xa8>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014da:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <MX_GPIO_Init+0xa8>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <MX_GPIO_Init+0xa8>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e6:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <MX_GPIO_Init+0xa8>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <MX_GPIO_Init+0xa8>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	4a17      	ldr	r2, [pc, #92]	; (8001554 <MX_GPIO_Init+0xa8>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <MX_GPIO_Init+0xa8>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	2120      	movs	r1, #32
 800150e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001512:	f000 fddb 	bl	80020cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001516:	2320      	movs	r3, #32
 8001518:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 030c 	add.w	r3, r7, #12
 800152a:	4619      	mov	r1, r3
 800152c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001530:	f000 fc0a 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_BUTTON_Pin */
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin;
 8001534:	2310      	movs	r3, #16
 8001536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800153c:	2301      	movs	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENCODER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	4619      	mov	r1, r3
 8001546:	4804      	ldr	r0, [pc, #16]	; (8001558 <MX_GPIO_Init+0xac>)
 8001548:	f000 fbfe 	bl	8001d48 <HAL_GPIO_Init>

}
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40021000 	.word	0x40021000
 8001558:	48000800 	.word	0x48000800

0800155c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
}
 8001562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001564:	e7fe      	b.n	8001564 <Error_Handler+0x8>
	...

08001568 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_MspInit+0x44>)
 8001570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <HAL_MspInit+0x44>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6613      	str	r3, [r2, #96]	; 0x60
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_MspInit+0x44>)
 800157c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_MspInit+0x44>)
 8001588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158a:	4a08      	ldr	r2, [pc, #32]	; (80015ac <HAL_MspInit+0x44>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001590:	6593      	str	r3, [r2, #88]	; 0x58
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_MspInit+0x44>)
 8001594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000

080015b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a1b      	ldr	r2, [pc, #108]	; (800163c <HAL_TIM_Encoder_MspInit+0x8c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d130      	bne.n	8001634 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015d2:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <HAL_TIM_Encoder_MspInit+0x90>)
 80015d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d6:	4a1a      	ldr	r2, [pc, #104]	; (8001640 <HAL_TIM_Encoder_MspInit+0x90>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	6593      	str	r3, [r2, #88]	; 0x58
 80015de:	4b18      	ldr	r3, [pc, #96]	; (8001640 <HAL_TIM_Encoder_MspInit+0x90>)
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_TIM_Encoder_MspInit+0x90>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	4a14      	ldr	r2, [pc, #80]	; (8001640 <HAL_TIM_Encoder_MspInit+0x90>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_TIM_Encoder_MspInit+0x90>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001602:	23c0      	movs	r3, #192	; 0xc0
 8001604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001612:	2302      	movs	r3, #2
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001620:	f000 fb92 	bl	8001d48 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	210a      	movs	r1, #10
 8001628:	201d      	movs	r0, #29
 800162a:	f000 fb56 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800162e:	201d      	movs	r0, #29
 8001630:	f000 fb6f 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001634:	bf00      	nop
 8001636:	3728      	adds	r7, #40	; 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40000400 	.word	0x40000400
 8001640:	40021000 	.word	0x40021000

08001644 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <HAL_TIM_Base_MspInit+0x44>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d113      	bne.n	800167e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001656:	4b0d      	ldr	r3, [pc, #52]	; (800168c <HAL_TIM_Base_MspInit+0x48>)
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	4a0c      	ldr	r2, [pc, #48]	; (800168c <HAL_TIM_Base_MspInit+0x48>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	6593      	str	r3, [r2, #88]	; 0x58
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <HAL_TIM_Base_MspInit+0x48>)
 8001664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 10, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	210a      	movs	r1, #10
 8001672:	201e      	movs	r0, #30
 8001674:	f000 fb31 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001678:	201e      	movs	r0, #30
 800167a:	f000 fb4a 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40000800 	.word	0x40000800
 800168c:	40021000 	.word	0x40021000

08001690 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a11      	ldr	r2, [pc, #68]	; (80016f4 <HAL_TIM_MspPostInit+0x64>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d11b      	bne.n	80016ea <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_TIM_MspPostInit+0x68>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <HAL_TIM_MspPostInit+0x68>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <HAL_TIM_MspPostInit+0x68>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ca:	23c0      	movs	r3, #192	; 0xc0
 80016cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016da:	2302      	movs	r3, #2
 80016dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <HAL_TIM_MspPostInit+0x6c>)
 80016e6:	f000 fb2f 	bl	8001d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80016ea:	bf00      	nop
 80016ec:	3720      	adds	r7, #32
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40000800 	.word	0x40000800
 80016f8:	40021000 	.word	0x40021000
 80016fc:	48000400 	.word	0x48000400

08001700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b0ac      	sub	sp, #176	; 0xb0
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2288      	movs	r2, #136	; 0x88
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f004 fb1d 	bl	8005d60 <memset>
  if(huart->Instance==USART2)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a21      	ldr	r2, [pc, #132]	; (80017b0 <HAL_UART_MspInit+0xb0>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d13b      	bne.n	80017a8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001730:	2302      	movs	r3, #2
 8001732:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001734:	2300      	movs	r3, #0
 8001736:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4618      	mov	r0, r3
 800173e:	f001 fb5b 	bl	8002df8 <HAL_RCCEx_PeriphCLKConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001748:	f7ff ff08 	bl	800155c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <HAL_UART_MspInit+0xb4>)
 800174e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001750:	4a18      	ldr	r2, [pc, #96]	; (80017b4 <HAL_UART_MspInit+0xb4>)
 8001752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001756:	6593      	str	r3, [r2, #88]	; 0x58
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <HAL_UART_MspInit+0xb4>)
 800175a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <HAL_UART_MspInit+0xb4>)
 8001766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001768:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <HAL_UART_MspInit+0xb4>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001770:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_UART_MspInit+0xb4>)
 8001772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800177c:	230c      	movs	r3, #12
 800177e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001794:	2307      	movs	r3, #7
 8001796:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800179e:	4619      	mov	r1, r3
 80017a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a4:	f000 fad0 	bl	8001d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017a8:	bf00      	nop
 80017aa:	37b0      	adds	r7, #176	; 0xb0
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40004400 	.word	0x40004400
 80017b4:	40021000 	.word	0x40021000

080017b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <NMI_Handler+0x4>

080017be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <HardFault_Handler+0x4>

080017c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <MemManage_Handler+0x4>

080017ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <BusFault_Handler+0x4>

080017d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <UsageFault_Handler+0x4>

080017d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001804:	f000 f94a 	bl	8001a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}

0800180c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <TIM3_IRQHandler+0x10>)
 8001812:	f002 fb11 	bl	8003e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000084 	.word	0x20000084

08001820 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <TIM4_IRQHandler+0x10>)
 8001826:	f002 fb07 	bl	8003e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200000d0 	.word	0x200000d0

08001834 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e00a      	b.n	800185c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001846:	f3af 8000 	nop.w
 800184a:	4601      	mov	r1, r0
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	60ba      	str	r2, [r7, #8]
 8001852:	b2ca      	uxtb	r2, r1
 8001854:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	dbf0      	blt.n	8001846 <_read+0x12>
	}

return len;
 8001864:	687b      	ldr	r3, [r7, #4]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e009      	b.n	8001894 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	60ba      	str	r2, [r7, #8]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fb3d 	bl	8000f08 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbf1      	blt.n	8001880 <_write+0x12>
	}
	return len;
 800189c:	687b      	ldr	r3, [r7, #4]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_close>:

int _close(int file)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
	return -1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ce:	605a      	str	r2, [r3, #4]
	return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <_isatty>:

int _isatty(int file)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
	return 1;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001918:	4a14      	ldr	r2, [pc, #80]	; (800196c <_sbrk+0x5c>)
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <_sbrk+0x60>)
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <_sbrk+0x64>)
 800192e:	4a12      	ldr	r2, [pc, #72]	; (8001978 <_sbrk+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	429a      	cmp	r2, r3
 800193e:	d207      	bcs.n	8001950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001940:	f004 fa5c 	bl	8005dfc <__errno>
 8001944:	4603      	mov	r3, r0
 8001946:	220c      	movs	r2, #12
 8001948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e009      	b.n	8001964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <_sbrk+0x64>)
 8001960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20018000 	.word	0x20018000
 8001970:	00000400 	.word	0x00000400
 8001974:	200001a4 	.word	0x200001a4
 8001978:	200002f8 	.word	0x200002f8

0800197c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <SystemInit+0x20>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <SystemInit+0x20>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019a4:	f7ff ffea 	bl	800197c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a8:	480c      	ldr	r0, [pc, #48]	; (80019dc <LoopForever+0x6>)
  ldr r1, =_edata
 80019aa:	490d      	ldr	r1, [pc, #52]	; (80019e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <LoopForever+0xe>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019c0:	4c0a      	ldr	r4, [pc, #40]	; (80019ec <LoopForever+0x16>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ce:	f004 fa1b 	bl	8005e08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019d2:	f7ff fb2b 	bl	800102c <main>

080019d6 <LoopForever>:

LoopForever:
    b LoopForever
 80019d6:	e7fe      	b.n	80019d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80019e4:	08008000 	.word	0x08008000
  ldr r2, =_sbss
 80019e8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80019ec:	200002f8 	.word	0x200002f8

080019f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC1_2_IRQHandler>

080019f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fc:	2003      	movs	r0, #3
 80019fe:	f000 f961 	bl	8001cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a02:	200f      	movs	r0, #15
 8001a04:	f000 f80e 	bl	8001a24 <HAL_InitTick>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	71fb      	strb	r3, [r7, #7]
 8001a12:	e001      	b.n	8001a18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a14:	f7ff fda8 	bl	8001568 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a18:	79fb      	ldrb	r3, [r7, #7]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a30:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <HAL_InitTick+0x6c>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d023      	beq.n	8001a80 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <HAL_InitTick+0x70>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <HAL_InitTick+0x6c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 f96d 	bl	8001d2e <HAL_SYSTICK_Config>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10f      	bne.n	8001a7a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b0f      	cmp	r3, #15
 8001a5e:	d809      	bhi.n	8001a74 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a60:	2200      	movs	r2, #0
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	f000 f937 	bl	8001cda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a6c:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <HAL_InitTick+0x74>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	e007      	b.n	8001a84 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
 8001a78:	e004      	b.n	8001a84 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	73fb      	strb	r3, [r7, #15]
 8001a7e:	e001      	b.n	8001a84 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000008 	.word	0x20000008
 8001a94:	20000000 	.word	0x20000000
 8001a98:	20000004 	.word	0x20000004

08001a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_IncTick+0x20>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_IncTick+0x24>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <HAL_IncTick+0x24>)
 8001aae:	6013      	str	r3, [r2, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000008 	.word	0x20000008
 8001ac0:	200001a8 	.word	0x200001a8

08001ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <HAL_GetTick+0x14>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	200001a8 	.word	0x200001a8

08001adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae4:	f7ff ffee 	bl	8001ac4 <HAL_GetTick>
 8001ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af4:	d005      	beq.n	8001b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <HAL_Delay+0x44>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b02:	bf00      	nop
 8001b04:	f7ff ffde 	bl	8001ac4 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d8f7      	bhi.n	8001b04 <HAL_Delay+0x28>
  {
  }
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000008 	.word	0x20000008

08001b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b40:	4013      	ands	r3, r2
 8001b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b56:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	60d3      	str	r3, [r2, #12]
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <__NVIC_GetPriorityGrouping+0x18>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	f003 0307 	and.w	r3, r3, #7
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	db0b      	blt.n	8001bb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	4907      	ldr	r1, [pc, #28]	; (8001bc0 <__NVIC_EnableIRQ+0x38>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	2001      	movs	r0, #1
 8001baa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000e100 	.word	0xe000e100

08001bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	; (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4908      	ldr	r1, [pc, #32]	; (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	4313      	orrs	r3, r2
         );
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	; 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c90:	d301      	bcc.n	8001c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00f      	b.n	8001cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <SysTick_Config+0x40>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9e:	210f      	movs	r1, #15
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f7ff ff8e 	bl	8001bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <SysTick_Config+0x40>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cae:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <SysTick_Config+0x40>)
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	e000e010 	.word	0xe000e010

08001cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ff29 	bl	8001b24 <__NVIC_SetPriorityGrouping>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cec:	f7ff ff3e 	bl	8001b6c <__NVIC_GetPriorityGrouping>
 8001cf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	6978      	ldr	r0, [r7, #20]
 8001cf8:	f7ff ff8e 	bl	8001c18 <NVIC_EncodePriority>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff5d 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff31 	bl	8001b88 <__NVIC_EnableIRQ>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ffa2 	bl	8001c80 <SysTick_Config>
 8001d3c:	4603      	mov	r3, r0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b087      	sub	sp, #28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d56:	e17f      	b.n	8002058 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	fa01 f303 	lsl.w	r3, r1, r3
 8001d64:	4013      	ands	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 8171 	beq.w	8002052 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d005      	beq.n	8001d88 <HAL_GPIO_Init+0x40>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d130      	bne.n	8001dea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	091b      	lsrs	r3, r3, #4
 8001dd4:	f003 0201 	and.w	r2, r3, #1
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d118      	bne.n	8001e28 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	08db      	lsrs	r3, r3, #3
 8001e12:	f003 0201 	and.w	r2, r3, #1
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d017      	beq.n	8001e64 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d123      	bne.n	8001eb8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	08da      	lsrs	r2, r3, #3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3208      	adds	r2, #8
 8001e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	220f      	movs	r2, #15
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	08da      	lsrs	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3208      	adds	r2, #8
 8001eb2:	6939      	ldr	r1, [r7, #16]
 8001eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0203 	and.w	r2, r3, #3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80ac 	beq.w	8002052 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efa:	4b5f      	ldr	r3, [pc, #380]	; (8002078 <HAL_GPIO_Init+0x330>)
 8001efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001efe:	4a5e      	ldr	r2, [pc, #376]	; (8002078 <HAL_GPIO_Init+0x330>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6613      	str	r3, [r2, #96]	; 0x60
 8001f06:	4b5c      	ldr	r3, [pc, #368]	; (8002078 <HAL_GPIO_Init+0x330>)
 8001f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f12:	4a5a      	ldr	r2, [pc, #360]	; (800207c <HAL_GPIO_Init+0x334>)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	089b      	lsrs	r3, r3, #2
 8001f18:	3302      	adds	r3, #2
 8001f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	220f      	movs	r2, #15
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f3c:	d025      	beq.n	8001f8a <HAL_GPIO_Init+0x242>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4f      	ldr	r2, [pc, #316]	; (8002080 <HAL_GPIO_Init+0x338>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d01f      	beq.n	8001f86 <HAL_GPIO_Init+0x23e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4e      	ldr	r2, [pc, #312]	; (8002084 <HAL_GPIO_Init+0x33c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d019      	beq.n	8001f82 <HAL_GPIO_Init+0x23a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4d      	ldr	r2, [pc, #308]	; (8002088 <HAL_GPIO_Init+0x340>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d013      	beq.n	8001f7e <HAL_GPIO_Init+0x236>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a4c      	ldr	r2, [pc, #304]	; (800208c <HAL_GPIO_Init+0x344>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d00d      	beq.n	8001f7a <HAL_GPIO_Init+0x232>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a4b      	ldr	r2, [pc, #300]	; (8002090 <HAL_GPIO_Init+0x348>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d007      	beq.n	8001f76 <HAL_GPIO_Init+0x22e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a4a      	ldr	r2, [pc, #296]	; (8002094 <HAL_GPIO_Init+0x34c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d101      	bne.n	8001f72 <HAL_GPIO_Init+0x22a>
 8001f6e:	2306      	movs	r3, #6
 8001f70:	e00c      	b.n	8001f8c <HAL_GPIO_Init+0x244>
 8001f72:	2307      	movs	r3, #7
 8001f74:	e00a      	b.n	8001f8c <HAL_GPIO_Init+0x244>
 8001f76:	2305      	movs	r3, #5
 8001f78:	e008      	b.n	8001f8c <HAL_GPIO_Init+0x244>
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	e006      	b.n	8001f8c <HAL_GPIO_Init+0x244>
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e004      	b.n	8001f8c <HAL_GPIO_Init+0x244>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e002      	b.n	8001f8c <HAL_GPIO_Init+0x244>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <HAL_GPIO_Init+0x244>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	f002 0203 	and.w	r2, r2, #3
 8001f92:	0092      	lsls	r2, r2, #2
 8001f94:	4093      	lsls	r3, r2
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f9c:	4937      	ldr	r1, [pc, #220]	; (800207c <HAL_GPIO_Init+0x334>)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	089b      	lsrs	r3, r3, #2
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001faa:	4b3b      	ldr	r3, [pc, #236]	; (8002098 <HAL_GPIO_Init+0x350>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fce:	4a32      	ldr	r2, [pc, #200]	; (8002098 <HAL_GPIO_Init+0x350>)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fd4:	4b30      	ldr	r3, [pc, #192]	; (8002098 <HAL_GPIO_Init+0x350>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ff8:	4a27      	ldr	r2, [pc, #156]	; (8002098 <HAL_GPIO_Init+0x350>)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ffe:	4b26      	ldr	r3, [pc, #152]	; (8002098 <HAL_GPIO_Init+0x350>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	43db      	mvns	r3, r3
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4013      	ands	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002022:	4a1d      	ldr	r2, [pc, #116]	; (8002098 <HAL_GPIO_Init+0x350>)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002028:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <HAL_GPIO_Init+0x350>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	43db      	mvns	r3, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800204c:	4a12      	ldr	r2, [pc, #72]	; (8002098 <HAL_GPIO_Init+0x350>)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3301      	adds	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa22 f303 	lsr.w	r3, r2, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	f47f ae78 	bne.w	8001d58 <HAL_GPIO_Init+0x10>
  }
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	371c      	adds	r7, #28
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000
 800207c:	40010000 	.word	0x40010000
 8002080:	48000400 	.word	0x48000400
 8002084:	48000800 	.word	0x48000800
 8002088:	48000c00 	.word	0x48000c00
 800208c:	48001000 	.word	0x48001000
 8002090:	48001400 	.word	0x48001400
 8002094:	48001800 	.word	0x48001800
 8002098:	40010400 	.word	0x40010400

0800209c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	887b      	ldrh	r3, [r7, #2]
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	e001      	b.n	80020be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020be:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	807b      	strh	r3, [r7, #2]
 80020d8:	4613      	mov	r3, r2
 80020da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020dc:	787b      	ldrb	r3, [r7, #1]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020e8:	e002      	b.n	80020f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020ea:	887a      	ldrh	r2, [r7, #2]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4013      	ands	r3, r2
 8002114:	041a      	lsls	r2, r3, #16
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	43d9      	mvns	r1, r3
 800211a:	887b      	ldrh	r3, [r7, #2]
 800211c:	400b      	ands	r3, r1
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	619a      	str	r2, [r3, #24]
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <HAL_PWREx_GetVoltageRange+0x18>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40007000 	.word	0x40007000

0800214c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800215a:	d130      	bne.n	80021be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800215c:	4b23      	ldr	r3, [pc, #140]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002168:	d038      	beq.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002172:	4a1e      	ldr	r2, [pc, #120]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002174:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002178:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800217a:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2232      	movs	r2, #50	; 0x32
 8002180:	fb02 f303 	mul.w	r3, r2, r3
 8002184:	4a1b      	ldr	r2, [pc, #108]	; (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	0c9b      	lsrs	r3, r3, #18
 800218c:	3301      	adds	r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002190:	e002      	b.n	8002198 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3b01      	subs	r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002198:	4b14      	ldr	r3, [pc, #80]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021a4:	d102      	bne.n	80021ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f2      	bne.n	8002192 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b8:	d110      	bne.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e00f      	b.n	80021de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ca:	d007      	beq.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021cc:	4b07      	ldr	r3, [pc, #28]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021d4:	4a05      	ldr	r2, [pc, #20]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40007000 	.word	0x40007000
 80021f0:	20000000 	.word	0x20000000
 80021f4:	431bde83 	.word	0x431bde83

080021f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e3ca      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800220a:	4b97      	ldr	r3, [pc, #604]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002214:	4b94      	ldr	r3, [pc, #592]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 80e4 	beq.w	80023f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <HAL_RCC_OscConfig+0x4a>
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	2b0c      	cmp	r3, #12
 8002236:	f040 808b 	bne.w	8002350 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2b01      	cmp	r3, #1
 800223e:	f040 8087 	bne.w	8002350 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002242:	4b89      	ldr	r3, [pc, #548]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_RCC_OscConfig+0x62>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e3a2      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1a      	ldr	r2, [r3, #32]
 800225e:	4b82      	ldr	r3, [pc, #520]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d004      	beq.n	8002274 <HAL_RCC_OscConfig+0x7c>
 800226a:	4b7f      	ldr	r3, [pc, #508]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002272:	e005      	b.n	8002280 <HAL_RCC_OscConfig+0x88>
 8002274:	4b7c      	ldr	r3, [pc, #496]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002280:	4293      	cmp	r3, r2
 8002282:	d223      	bcs.n	80022cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4618      	mov	r0, r3
 800228a:	f000 fd55 	bl	8002d38 <RCC_SetFlashLatencyFromMSIRange>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e383      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002298:	4b73      	ldr	r3, [pc, #460]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a72      	ldr	r2, [pc, #456]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800229e:	f043 0308 	orr.w	r3, r3, #8
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	4b70      	ldr	r3, [pc, #448]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	496d      	ldr	r1, [pc, #436]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022b6:	4b6c      	ldr	r3, [pc, #432]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	4968      	ldr	r1, [pc, #416]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	604b      	str	r3, [r1, #4]
 80022ca:	e025      	b.n	8002318 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022cc:	4b66      	ldr	r3, [pc, #408]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a65      	ldr	r2, [pc, #404]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80022d2:	f043 0308 	orr.w	r3, r3, #8
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	4b63      	ldr	r3, [pc, #396]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	4960      	ldr	r1, [pc, #384]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ea:	4b5f      	ldr	r3, [pc, #380]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	495b      	ldr	r1, [pc, #364]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d109      	bne.n	8002318 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fd15 	bl	8002d38 <RCC_SetFlashLatencyFromMSIRange>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e343      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002318:	f000 fc4a 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b52      	ldr	r3, [pc, #328]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	4950      	ldr	r1, [pc, #320]	; (800246c <HAL_RCC_OscConfig+0x274>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
 8002334:	4a4e      	ldr	r2, [pc, #312]	; (8002470 <HAL_RCC_OscConfig+0x278>)
 8002336:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002338:	4b4e      	ldr	r3, [pc, #312]	; (8002474 <HAL_RCC_OscConfig+0x27c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fb71 	bl	8001a24 <HAL_InitTick>
 8002342:	4603      	mov	r3, r0
 8002344:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d052      	beq.n	80023f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	e327      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d032      	beq.n	80023be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002358:	4b43      	ldr	r3, [pc, #268]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a42      	ldr	r2, [pc, #264]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002364:	f7ff fbae 	bl	8001ac4 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800236c:	f7ff fbaa 	bl	8001ac4 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e310      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800237e:	4b3a      	ldr	r3, [pc, #232]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800238a:	4b37      	ldr	r3, [pc, #220]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a36      	ldr	r2, [pc, #216]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002390:	f043 0308 	orr.w	r3, r3, #8
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	4b34      	ldr	r3, [pc, #208]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	4931      	ldr	r1, [pc, #196]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023a8:	4b2f      	ldr	r3, [pc, #188]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	021b      	lsls	r3, r3, #8
 80023b6:	492c      	ldr	r1, [pc, #176]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
 80023bc:	e01a      	b.n	80023f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023be:	4b2a      	ldr	r3, [pc, #168]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a29      	ldr	r2, [pc, #164]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023ca:	f7ff fb7b 	bl	8001ac4 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023d2:	f7ff fb77 	bl	8001ac4 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e2dd      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023e4:	4b20      	ldr	r3, [pc, #128]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f0      	bne.n	80023d2 <HAL_RCC_OscConfig+0x1da>
 80023f0:	e000      	b.n	80023f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d074      	beq.n	80024ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2b08      	cmp	r3, #8
 8002404:	d005      	beq.n	8002412 <HAL_RCC_OscConfig+0x21a>
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2b0c      	cmp	r3, #12
 800240a:	d10e      	bne.n	800242a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d10b      	bne.n	800242a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d064      	beq.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d160      	bne.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e2ba      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x24a>
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0b      	ldr	r2, [pc, #44]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800243a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	e026      	b.n	8002490 <HAL_RCC_OscConfig+0x298>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800244a:	d115      	bne.n	8002478 <HAL_RCC_OscConfig+0x280>
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a05      	ldr	r2, [pc, #20]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 8002452:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	4b03      	ldr	r3, [pc, #12]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a02      	ldr	r2, [pc, #8]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800245e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	e014      	b.n	8002490 <HAL_RCC_OscConfig+0x298>
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000
 800246c:	08007d6c 	.word	0x08007d6c
 8002470:	20000000 	.word	0x20000000
 8002474:	20000004 	.word	0x20000004
 8002478:	4ba0      	ldr	r3, [pc, #640]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a9f      	ldr	r2, [pc, #636]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 800247e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	4b9d      	ldr	r3, [pc, #628]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a9c      	ldr	r2, [pc, #624]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 800248a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d013      	beq.n	80024c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7ff fb14 	bl	8001ac4 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a0:	f7ff fb10 	bl	8001ac4 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	; 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e276      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024b2:	4b92      	ldr	r3, [pc, #584]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x2a8>
 80024be:	e014      	b.n	80024ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7ff fb00 	bl	8001ac4 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c8:	f7ff fafc 	bl	8001ac4 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e262      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024da:	4b88      	ldr	r3, [pc, #544]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x2d0>
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d060      	beq.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_OscConfig+0x310>
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2b0c      	cmp	r3, #12
 8002500:	d119      	bne.n	8002536 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d116      	bne.n	8002536 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002508:	4b7c      	ldr	r3, [pc, #496]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_OscConfig+0x328>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e23f      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002520:	4b76      	ldr	r3, [pc, #472]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	061b      	lsls	r3, r3, #24
 800252e:	4973      	ldr	r1, [pc, #460]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002534:	e040      	b.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d023      	beq.n	8002586 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800253e:	4b6f      	ldr	r3, [pc, #444]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a6e      	ldr	r2, [pc, #440]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254a:	f7ff fabb 	bl	8001ac4 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002552:	f7ff fab7 	bl	8001ac4 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e21d      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002564:	4b65      	ldr	r3, [pc, #404]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002570:	4b62      	ldr	r3, [pc, #392]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	495f      	ldr	r1, [pc, #380]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
 8002584:	e018      	b.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002586:	4b5d      	ldr	r3, [pc, #372]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a5c      	ldr	r2, [pc, #368]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 800258c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7ff fa97 	bl	8001ac4 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259a:	f7ff fa93 	bl	8001ac4 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e1f9      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ac:	4b53      	ldr	r3, [pc, #332]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d03c      	beq.n	800263e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01c      	beq.n	8002606 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025cc:	4b4b      	ldr	r3, [pc, #300]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80025ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d2:	4a4a      	ldr	r2, [pc, #296]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7ff fa72 	bl	8001ac4 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e4:	f7ff fa6e 	bl	8001ac4 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e1d4      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f6:	4b41      	ldr	r3, [pc, #260]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80025f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0ef      	beq.n	80025e4 <HAL_RCC_OscConfig+0x3ec>
 8002604:	e01b      	b.n	800263e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002606:	4b3d      	ldr	r3, [pc, #244]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800260c:	4a3b      	ldr	r2, [pc, #236]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002616:	f7ff fa55 	bl	8001ac4 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261e:	f7ff fa51 	bl	8001ac4 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e1b7      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002630:	4b32      	ldr	r3, [pc, #200]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1ef      	bne.n	800261e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 80a6 	beq.w	8002798 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264c:	2300      	movs	r3, #0
 800264e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002650:	4b2a      	ldr	r3, [pc, #168]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10d      	bne.n	8002678 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265c:	4b27      	ldr	r3, [pc, #156]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002660:	4a26      	ldr	r2, [pc, #152]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 8002662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002666:	6593      	str	r3, [r2, #88]	; 0x58
 8002668:	4b24      	ldr	r3, [pc, #144]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 800266a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002674:	2301      	movs	r3, #1
 8002676:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002678:	4b21      	ldr	r3, [pc, #132]	; (8002700 <HAL_RCC_OscConfig+0x508>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d118      	bne.n	80026b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002684:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <HAL_RCC_OscConfig+0x508>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1d      	ldr	r2, [pc, #116]	; (8002700 <HAL_RCC_OscConfig+0x508>)
 800268a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002690:	f7ff fa18 	bl	8001ac4 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002698:	f7ff fa14 	bl	8001ac4 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e17a      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026aa:	4b15      	ldr	r3, [pc, #84]	; (8002700 <HAL_RCC_OscConfig+0x508>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d108      	bne.n	80026d0 <HAL_RCC_OscConfig+0x4d8>
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80026c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c4:	4a0d      	ldr	r2, [pc, #52]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ce:	e029      	b.n	8002724 <HAL_RCC_OscConfig+0x52c>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b05      	cmp	r3, #5
 80026d6:	d115      	bne.n	8002704 <HAL_RCC_OscConfig+0x50c>
 80026d8:	4b08      	ldr	r3, [pc, #32]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80026da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026de:	4a07      	ldr	r2, [pc, #28]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80026e0:	f043 0304 	orr.w	r3, r3, #4
 80026e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026e8:	4b04      	ldr	r3, [pc, #16]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ee:	4a03      	ldr	r2, [pc, #12]	; (80026fc <HAL_RCC_OscConfig+0x504>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026f8:	e014      	b.n	8002724 <HAL_RCC_OscConfig+0x52c>
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
 8002700:	40007000 	.word	0x40007000
 8002704:	4b9c      	ldr	r3, [pc, #624]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270a:	4a9b      	ldr	r2, [pc, #620]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002714:	4b98      	ldr	r3, [pc, #608]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	4a97      	ldr	r2, [pc, #604]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 800271c:	f023 0304 	bic.w	r3, r3, #4
 8002720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d016      	beq.n	800275a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272c:	f7ff f9ca 	bl	8001ac4 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002732:	e00a      	b.n	800274a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002734:	f7ff f9c6 	bl	8001ac4 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e12a      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274a:	4b8b      	ldr	r3, [pc, #556]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 800274c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0ed      	beq.n	8002734 <HAL_RCC_OscConfig+0x53c>
 8002758:	e015      	b.n	8002786 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275a:	f7ff f9b3 	bl	8001ac4 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002760:	e00a      	b.n	8002778 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002762:	f7ff f9af 	bl	8001ac4 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e113      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002778:	4b7f      	ldr	r3, [pc, #508]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1ed      	bne.n	8002762 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002786:	7ffb      	ldrb	r3, [r7, #31]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278c:	4b7a      	ldr	r3, [pc, #488]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 800278e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002790:	4a79      	ldr	r2, [pc, #484]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 8002792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002796:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80fe 	beq.w	800299e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	f040 80d0 	bne.w	800294c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027ac:	4b72      	ldr	r3, [pc, #456]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f003 0203 	and.w	r2, r3, #3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	429a      	cmp	r2, r3
 80027be:	d130      	bne.n	8002822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	3b01      	subs	r3, #1
 80027cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d127      	bne.n	8002822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027de:	429a      	cmp	r2, r3
 80027e0:	d11f      	bne.n	8002822 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027ec:	2a07      	cmp	r2, #7
 80027ee:	bf14      	ite	ne
 80027f0:	2201      	movne	r2, #1
 80027f2:	2200      	moveq	r2, #0
 80027f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d113      	bne.n	8002822 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002804:	085b      	lsrs	r3, r3, #1
 8002806:	3b01      	subs	r3, #1
 8002808:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d109      	bne.n	8002822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	085b      	lsrs	r3, r3, #1
 800281a:	3b01      	subs	r3, #1
 800281c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d06e      	beq.n	8002900 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	2b0c      	cmp	r3, #12
 8002826:	d069      	beq.n	80028fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002828:	4b53      	ldr	r3, [pc, #332]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d105      	bne.n	8002840 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002834:	4b50      	ldr	r3, [pc, #320]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0ad      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002844:	4b4c      	ldr	r3, [pc, #304]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a4b      	ldr	r2, [pc, #300]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 800284a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800284e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002850:	f7ff f938 	bl	8001ac4 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002858:	f7ff f934 	bl	8001ac4 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e09a      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800286a:	4b43      	ldr	r3, [pc, #268]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002876:	4b40      	ldr	r3, [pc, #256]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	4b40      	ldr	r3, [pc, #256]	; (800297c <HAL_RCC_OscConfig+0x784>)
 800287c:	4013      	ands	r3, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002886:	3a01      	subs	r2, #1
 8002888:	0112      	lsls	r2, r2, #4
 800288a:	4311      	orrs	r1, r2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002890:	0212      	lsls	r2, r2, #8
 8002892:	4311      	orrs	r1, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002898:	0852      	lsrs	r2, r2, #1
 800289a:	3a01      	subs	r2, #1
 800289c:	0552      	lsls	r2, r2, #21
 800289e:	4311      	orrs	r1, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028a4:	0852      	lsrs	r2, r2, #1
 80028a6:	3a01      	subs	r2, #1
 80028a8:	0652      	lsls	r2, r2, #25
 80028aa:	4311      	orrs	r1, r2
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028b0:	0912      	lsrs	r2, r2, #4
 80028b2:	0452      	lsls	r2, r2, #17
 80028b4:	430a      	orrs	r2, r1
 80028b6:	4930      	ldr	r1, [pc, #192]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028bc:	4b2e      	ldr	r3, [pc, #184]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a2d      	ldr	r2, [pc, #180]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 80028c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028c8:	4b2b      	ldr	r3, [pc, #172]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4a2a      	ldr	r2, [pc, #168]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 80028ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028d4:	f7ff f8f6 	bl	8001ac4 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028dc:	f7ff f8f2 	bl	8001ac4 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e058      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ee:	4b22      	ldr	r3, [pc, #136]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028fa:	e050      	b.n	800299e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e04f      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002900:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d148      	bne.n	800299e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800290c:	4b1a      	ldr	r3, [pc, #104]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a19      	ldr	r2, [pc, #100]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 8002912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002916:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002918:	4b17      	ldr	r3, [pc, #92]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a16      	ldr	r2, [pc, #88]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 800291e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002922:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002924:	f7ff f8ce 	bl	8001ac4 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292c:	f7ff f8ca 	bl	8001ac4 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e030      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293e:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x734>
 800294a:	e028      	b.n	800299e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	2b0c      	cmp	r3, #12
 8002950:	d023      	beq.n	800299a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a08      	ldr	r2, [pc, #32]	; (8002978 <HAL_RCC_OscConfig+0x780>)
 8002958:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800295c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295e:	f7ff f8b1 	bl	8001ac4 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002964:	e00c      	b.n	8002980 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002966:	f7ff f8ad 	bl	8001ac4 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d905      	bls.n	8002980 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e013      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
 8002978:	40021000 	.word	0x40021000
 800297c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002980:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_RCC_OscConfig+0x7b0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ec      	bne.n	8002966 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_RCC_OscConfig+0x7b0>)
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	4905      	ldr	r1, [pc, #20]	; (80029a8 <HAL_RCC_OscConfig+0x7b0>)
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_RCC_OscConfig+0x7b4>)
 8002994:	4013      	ands	r3, r2
 8002996:	60cb      	str	r3, [r1, #12]
 8002998:	e001      	b.n	800299e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3720      	adds	r7, #32
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40021000 	.word	0x40021000
 80029ac:	feeefffc 	.word	0xfeeefffc

080029b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0e7      	b.n	8002b94 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029c4:	4b75      	ldr	r3, [pc, #468]	; (8002b9c <HAL_RCC_ClockConfig+0x1ec>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d910      	bls.n	80029f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d2:	4b72      	ldr	r3, [pc, #456]	; (8002b9c <HAL_RCC_ClockConfig+0x1ec>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 0207 	bic.w	r2, r3, #7
 80029da:	4970      	ldr	r1, [pc, #448]	; (8002b9c <HAL_RCC_ClockConfig+0x1ec>)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	4313      	orrs	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e2:	4b6e      	ldr	r3, [pc, #440]	; (8002b9c <HAL_RCC_ClockConfig+0x1ec>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0cf      	b.n	8002b94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d010      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	4b66      	ldr	r3, [pc, #408]	; (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d908      	bls.n	8002a22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a10:	4b63      	ldr	r3, [pc, #396]	; (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	4960      	ldr	r1, [pc, #384]	; (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d04c      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d107      	bne.n	8002a46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a36:	4b5a      	ldr	r3, [pc, #360]	; (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d121      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e0a6      	b.n	8002b94 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d107      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a4e:	4b54      	ldr	r3, [pc, #336]	; (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d115      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e09a      	b.n	8002b94 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d107      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a66:	4b4e      	ldr	r3, [pc, #312]	; (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e08e      	b.n	8002b94 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a76:	4b4a      	ldr	r3, [pc, #296]	; (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e086      	b.n	8002b94 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a86:	4b46      	ldr	r3, [pc, #280]	; (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f023 0203 	bic.w	r2, r3, #3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4943      	ldr	r1, [pc, #268]	; (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a98:	f7ff f814 	bl	8001ac4 <HAL_GetTick>
 8002a9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa0:	f7ff f810 	bl	8001ac4 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e06e      	b.n	8002b94 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	4b3a      	ldr	r3, [pc, #232]	; (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 020c 	and.w	r2, r3, #12
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d1eb      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d010      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	4b31      	ldr	r3, [pc, #196]	; (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d208      	bcs.n	8002af6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae4:	4b2e      	ldr	r3, [pc, #184]	; (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	492b      	ldr	r1, [pc, #172]	; (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002af6:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <HAL_RCC_ClockConfig+0x1ec>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d210      	bcs.n	8002b26 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b04:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <HAL_RCC_ClockConfig+0x1ec>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f023 0207 	bic.w	r2, r3, #7
 8002b0c:	4923      	ldr	r1, [pc, #140]	; (8002b9c <HAL_RCC_ClockConfig+0x1ec>)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b14:	4b21      	ldr	r3, [pc, #132]	; (8002b9c <HAL_RCC_ClockConfig+0x1ec>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d001      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e036      	b.n	8002b94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b32:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	4918      	ldr	r1, [pc, #96]	; (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d009      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b50:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4910      	ldr	r1, [pc, #64]	; (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b64:	f000 f824 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	091b      	lsrs	r3, r3, #4
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	490b      	ldr	r1, [pc, #44]	; (8002ba4 <HAL_RCC_ClockConfig+0x1f4>)
 8002b76:	5ccb      	ldrb	r3, [r1, r3]
 8002b78:	f003 031f 	and.w	r3, r3, #31
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b80:	4a09      	ldr	r2, [pc, #36]	; (8002ba8 <HAL_RCC_ClockConfig+0x1f8>)
 8002b82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b84:	4b09      	ldr	r3, [pc, #36]	; (8002bac <HAL_RCC_ClockConfig+0x1fc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe ff4b 	bl	8001a24 <HAL_InitTick>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b92:	7afb      	ldrb	r3, [r7, #11]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40022000 	.word	0x40022000
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	08007d6c 	.word	0x08007d6c
 8002ba8:	20000000 	.word	0x20000000
 8002bac:	20000004 	.word	0x20000004

08002bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b089      	sub	sp, #36	; 0x24
 8002bb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bbe:	4b3e      	ldr	r3, [pc, #248]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bc8:	4b3b      	ldr	r3, [pc, #236]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x34>
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	2b0c      	cmp	r3, #12
 8002bdc:	d121      	bne.n	8002c22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d11e      	bne.n	8002c22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002be4:	4b34      	ldr	r3, [pc, #208]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d107      	bne.n	8002c00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bf0:	4b31      	ldr	r3, [pc, #196]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf6:	0a1b      	lsrs	r3, r3, #8
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	e005      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c00:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c0c:	4a2b      	ldr	r2, [pc, #172]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10d      	bne.n	8002c38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c20:	e00a      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d102      	bne.n	8002c2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c28:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	e004      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d101      	bne.n	8002c38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c34:	4b23      	ldr	r3, [pc, #140]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	2b0c      	cmp	r3, #12
 8002c3c:	d134      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c3e:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d003      	beq.n	8002c56 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d003      	beq.n	8002c5c <HAL_RCC_GetSysClockFreq+0xac>
 8002c54:	e005      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c56:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c58:	617b      	str	r3, [r7, #20]
      break;
 8002c5a:	e005      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c5e:	617b      	str	r3, [r7, #20]
      break;
 8002c60:	e002      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	617b      	str	r3, [r7, #20]
      break;
 8002c66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c68:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	091b      	lsrs	r3, r3, #4
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	3301      	adds	r3, #1
 8002c74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c76:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	0a1b      	lsrs	r3, r3, #8
 8002c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	fb03 f202 	mul.w	r2, r3, r2
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	0e5b      	lsrs	r3, r3, #25
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	3301      	adds	r3, #1
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ca8:	69bb      	ldr	r3, [r7, #24]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3724      	adds	r7, #36	; 0x24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	08007d84 	.word	0x08007d84
 8002cc0:	00f42400 	.word	0x00f42400
 8002cc4:	007a1200 	.word	0x007a1200

08002cc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20000000 	.word	0x20000000

08002ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ce4:	f7ff fff0 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	0a1b      	lsrs	r3, r3, #8
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4904      	ldr	r1, [pc, #16]	; (8002d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cf6:	5ccb      	ldrb	r3, [r1, r3]
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000
 8002d08:	08007d7c 	.word	0x08007d7c

08002d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d10:	f7ff ffda 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002d14:	4602      	mov	r2, r0
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	0adb      	lsrs	r3, r3, #11
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	4904      	ldr	r1, [pc, #16]	; (8002d34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d22:	5ccb      	ldrb	r3, [r1, r3]
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021000 	.word	0x40021000
 8002d34:	08007d7c 	.word	0x08007d7c

08002d38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d40:	2300      	movs	r3, #0
 8002d42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d44:	4b2a      	ldr	r3, [pc, #168]	; (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d50:	f7ff f9ee 	bl	8002130 <HAL_PWREx_GetVoltageRange>
 8002d54:	6178      	str	r0, [r7, #20]
 8002d56:	e014      	b.n	8002d82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d58:	4b25      	ldr	r3, [pc, #148]	; (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5c:	4a24      	ldr	r2, [pc, #144]	; (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d62:	6593      	str	r3, [r2, #88]	; 0x58
 8002d64:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d70:	f7ff f9de 	bl	8002130 <HAL_PWREx_GetVoltageRange>
 8002d74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d76:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	4a1d      	ldr	r2, [pc, #116]	; (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d88:	d10b      	bne.n	8002da2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b80      	cmp	r3, #128	; 0x80
 8002d8e:	d919      	bls.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2ba0      	cmp	r3, #160	; 0xa0
 8002d94:	d902      	bls.n	8002d9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d96:	2302      	movs	r3, #2
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	e013      	b.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	e010      	b.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b80      	cmp	r3, #128	; 0x80
 8002da6:	d902      	bls.n	8002dae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002da8:	2303      	movs	r3, #3
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	e00a      	b.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b80      	cmp	r3, #128	; 0x80
 8002db2:	d102      	bne.n	8002dba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002db4:	2302      	movs	r3, #2
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	e004      	b.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b70      	cmp	r3, #112	; 0x70
 8002dbe:	d101      	bne.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f023 0207 	bic.w	r2, r3, #7
 8002dcc:	4909      	ldr	r1, [pc, #36]	; (8002df4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002dd4:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d001      	beq.n	8002de6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40022000 	.word	0x40022000

08002df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e00:	2300      	movs	r3, #0
 8002e02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e04:	2300      	movs	r3, #0
 8002e06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d041      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e1c:	d02a      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e22:	d824      	bhi.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e28:	d008      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e2e:	d81e      	bhi.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e38:	d010      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e3a:	e018      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e3c:	4b86      	ldr	r3, [pc, #536]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4a85      	ldr	r2, [pc, #532]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e46:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e48:	e015      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 fabb 	bl	80033cc <RCCEx_PLLSAI1_Config>
 8002e56:	4603      	mov	r3, r0
 8002e58:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e5a:	e00c      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3320      	adds	r3, #32
 8002e60:	2100      	movs	r1, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fba6 	bl	80035b4 <RCCEx_PLLSAI2_Config>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e6c:	e003      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	74fb      	strb	r3, [r7, #19]
      break;
 8002e72:	e000      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e76:	7cfb      	ldrb	r3, [r7, #19]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10b      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e7c:	4b76      	ldr	r3, [pc, #472]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e8a:	4973      	ldr	r1, [pc, #460]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e92:	e001      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e94:	7cfb      	ldrb	r3, [r7, #19]
 8002e96:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d041      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ea8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002eac:	d02a      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002eae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002eb2:	d824      	bhi.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002eb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eb8:	d008      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002eba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ebe:	d81e      	bhi.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00a      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ec8:	d010      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002eca:	e018      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ecc:	4b62      	ldr	r3, [pc, #392]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4a61      	ldr	r2, [pc, #388]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ed8:	e015      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3304      	adds	r3, #4
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fa73 	bl	80033cc <RCCEx_PLLSAI1_Config>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002eea:	e00c      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3320      	adds	r3, #32
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fb5e 	bl	80035b4 <RCCEx_PLLSAI2_Config>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002efc:	e003      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	74fb      	strb	r3, [r7, #19]
      break;
 8002f02:	e000      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f06:	7cfb      	ldrb	r3, [r7, #19]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10b      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f0c:	4b52      	ldr	r3, [pc, #328]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f12:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f1a:	494f      	ldr	r1, [pc, #316]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f22:	e001      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f24:	7cfb      	ldrb	r3, [r7, #19]
 8002f26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80a0 	beq.w	8003076 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f36:	2300      	movs	r3, #0
 8002f38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f3a:	4b47      	ldr	r3, [pc, #284]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00d      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f50:	4b41      	ldr	r3, [pc, #260]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f54:	4a40      	ldr	r2, [pc, #256]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f5c:	4b3e      	ldr	r3, [pc, #248]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f6c:	4b3b      	ldr	r3, [pc, #236]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a3a      	ldr	r2, [pc, #232]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f78:	f7fe fda4 	bl	8001ac4 <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f7e:	e009      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f80:	f7fe fda0 	bl	8001ac4 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d902      	bls.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	74fb      	strb	r3, [r7, #19]
        break;
 8002f92:	e005      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f94:	4b31      	ldr	r3, [pc, #196]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0ef      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002fa0:	7cfb      	ldrb	r3, [r7, #19]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d15c      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fa6:	4b2c      	ldr	r3, [pc, #176]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01f      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d019      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fc4:	4b24      	ldr	r3, [pc, #144]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fd0:	4b21      	ldr	r3, [pc, #132]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd6:	4a20      	ldr	r2, [pc, #128]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe6:	4a1c      	ldr	r2, [pc, #112]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ff0:	4a19      	ldr	r2, [pc, #100]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d016      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003002:	f7fe fd5f 	bl	8001ac4 <HAL_GetTick>
 8003006:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003008:	e00b      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300a:	f7fe fd5b 	bl	8001ac4 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f241 3288 	movw	r2, #5000	; 0x1388
 8003018:	4293      	cmp	r3, r2
 800301a:	d902      	bls.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	74fb      	strb	r3, [r7, #19]
            break;
 8003020:	e006      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003022:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0ec      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003030:	7cfb      	ldrb	r3, [r7, #19]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10c      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003046:	4904      	ldr	r1, [pc, #16]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800304e:	e009      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003050:	7cfb      	ldrb	r3, [r7, #19]
 8003052:	74bb      	strb	r3, [r7, #18]
 8003054:	e006      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000
 800305c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003060:	7cfb      	ldrb	r3, [r7, #19]
 8003062:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003064:	7c7b      	ldrb	r3, [r7, #17]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d105      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800306a:	4b9e      	ldr	r3, [pc, #632]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306e:	4a9d      	ldr	r2, [pc, #628]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003074:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003082:	4b98      	ldr	r3, [pc, #608]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003088:	f023 0203 	bic.w	r2, r3, #3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003090:	4994      	ldr	r1, [pc, #592]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00a      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030a4:	4b8f      	ldr	r3, [pc, #572]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030aa:	f023 020c 	bic.w	r2, r3, #12
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b2:	498c      	ldr	r1, [pc, #560]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030c6:	4b87      	ldr	r3, [pc, #540]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	4983      	ldr	r1, [pc, #524]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00a      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030e8:	4b7e      	ldr	r3, [pc, #504]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	497b      	ldr	r1, [pc, #492]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800310a:	4b76      	ldr	r3, [pc, #472]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003118:	4972      	ldr	r1, [pc, #456]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800312c:	4b6d      	ldr	r3, [pc, #436]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003132:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313a:	496a      	ldr	r1, [pc, #424]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800314e:	4b65      	ldr	r3, [pc, #404]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003154:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315c:	4961      	ldr	r1, [pc, #388]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00a      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003170:	4b5c      	ldr	r3, [pc, #368]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003176:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800317e:	4959      	ldr	r1, [pc, #356]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003192:	4b54      	ldr	r3, [pc, #336]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003198:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a0:	4950      	ldr	r1, [pc, #320]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00a      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031b4:	4b4b      	ldr	r3, [pc, #300]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c2:	4948      	ldr	r1, [pc, #288]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031d6:	4b43      	ldr	r3, [pc, #268]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e4:	493f      	ldr	r1, [pc, #252]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d028      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031f8:	4b3a      	ldr	r3, [pc, #232]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003206:	4937      	ldr	r1, [pc, #220]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003216:	d106      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003218:	4b32      	ldr	r3, [pc, #200]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	4a31      	ldr	r2, [pc, #196]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003222:	60d3      	str	r3, [r2, #12]
 8003224:	e011      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800322a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800322e:	d10c      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3304      	adds	r3, #4
 8003234:	2101      	movs	r1, #1
 8003236:	4618      	mov	r0, r3
 8003238:	f000 f8c8 	bl	80033cc <RCCEx_PLLSAI1_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003246:	7cfb      	ldrb	r3, [r7, #19]
 8003248:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d028      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003256:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003264:	491f      	ldr	r1, [pc, #124]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003274:	d106      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003276:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	4a1a      	ldr	r2, [pc, #104]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003280:	60d3      	str	r3, [r2, #12]
 8003282:	e011      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003288:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800328c:	d10c      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3304      	adds	r3, #4
 8003292:	2101      	movs	r1, #1
 8003294:	4618      	mov	r0, r3
 8003296:	f000 f899 	bl	80033cc <RCCEx_PLLSAI1_Config>
 800329a:	4603      	mov	r3, r0
 800329c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800329e:	7cfb      	ldrb	r3, [r7, #19]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80032a4:	7cfb      	ldrb	r3, [r7, #19]
 80032a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d02b      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c2:	4908      	ldr	r1, [pc, #32]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032d2:	d109      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032d4:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4a02      	ldr	r2, [pc, #8]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032de:	60d3      	str	r3, [r2, #12]
 80032e0:	e014      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80032e2:	bf00      	nop
 80032e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032f0:	d10c      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3304      	adds	r3, #4
 80032f6:	2101      	movs	r1, #1
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 f867 	bl	80033cc <RCCEx_PLLSAI1_Config>
 80032fe:	4603      	mov	r3, r0
 8003300:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003302:	7cfb      	ldrb	r3, [r7, #19]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d02f      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003318:	4b2b      	ldr	r3, [pc, #172]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003326:	4928      	ldr	r1, [pc, #160]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003332:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003336:	d10d      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3304      	adds	r3, #4
 800333c:	2102      	movs	r1, #2
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f844 	bl	80033cc <RCCEx_PLLSAI1_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003348:	7cfb      	ldrb	r3, [r7, #19]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d014      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800334e:	7cfb      	ldrb	r3, [r7, #19]
 8003350:	74bb      	strb	r3, [r7, #18]
 8003352:	e011      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800335c:	d10c      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3320      	adds	r3, #32
 8003362:	2102      	movs	r1, #2
 8003364:	4618      	mov	r0, r3
 8003366:	f000 f925 	bl	80035b4 <RCCEx_PLLSAI2_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800336e:	7cfb      	ldrb	r3, [r7, #19]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003384:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003392:	490d      	ldr	r1, [pc, #52]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00b      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033a6:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033b6:	4904      	ldr	r1, [pc, #16]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033be:	7cbb      	ldrb	r3, [r7, #18]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40021000 	.word	0x40021000

080033cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033da:	4b75      	ldr	r3, [pc, #468]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d018      	beq.n	8003418 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033e6:	4b72      	ldr	r3, [pc, #456]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f003 0203 	and.w	r2, r3, #3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d10d      	bne.n	8003412 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
       ||
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d009      	beq.n	8003412 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033fe:	4b6c      	ldr	r3, [pc, #432]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	091b      	lsrs	r3, r3, #4
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
       ||
 800340e:	429a      	cmp	r2, r3
 8003410:	d047      	beq.n	80034a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
 8003416:	e044      	b.n	80034a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b03      	cmp	r3, #3
 800341e:	d018      	beq.n	8003452 <RCCEx_PLLSAI1_Config+0x86>
 8003420:	2b03      	cmp	r3, #3
 8003422:	d825      	bhi.n	8003470 <RCCEx_PLLSAI1_Config+0xa4>
 8003424:	2b01      	cmp	r3, #1
 8003426:	d002      	beq.n	800342e <RCCEx_PLLSAI1_Config+0x62>
 8003428:	2b02      	cmp	r3, #2
 800342a:	d009      	beq.n	8003440 <RCCEx_PLLSAI1_Config+0x74>
 800342c:	e020      	b.n	8003470 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800342e:	4b60      	ldr	r3, [pc, #384]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d11d      	bne.n	8003476 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800343e:	e01a      	b.n	8003476 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003440:	4b5b      	ldr	r3, [pc, #364]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003448:	2b00      	cmp	r3, #0
 800344a:	d116      	bne.n	800347a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003450:	e013      	b.n	800347a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003452:	4b57      	ldr	r3, [pc, #348]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10f      	bne.n	800347e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800345e:	4b54      	ldr	r3, [pc, #336]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d109      	bne.n	800347e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800346e:	e006      	b.n	800347e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
      break;
 8003474:	e004      	b.n	8003480 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003476:	bf00      	nop
 8003478:	e002      	b.n	8003480 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800347a:	bf00      	nop
 800347c:	e000      	b.n	8003480 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800347e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10d      	bne.n	80034a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003486:	4b4a      	ldr	r3, [pc, #296]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6819      	ldr	r1, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	3b01      	subs	r3, #1
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	430b      	orrs	r3, r1
 800349c:	4944      	ldr	r1, [pc, #272]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d17d      	bne.n	80035a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034a8:	4b41      	ldr	r3, [pc, #260]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a40      	ldr	r2, [pc, #256]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b4:	f7fe fb06 	bl	8001ac4 <HAL_GetTick>
 80034b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034ba:	e009      	b.n	80034d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034bc:	f7fe fb02 	bl	8001ac4 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d902      	bls.n	80034d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	73fb      	strb	r3, [r7, #15]
        break;
 80034ce:	e005      	b.n	80034dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034d0:	4b37      	ldr	r3, [pc, #220]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1ef      	bne.n	80034bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d160      	bne.n	80035a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d111      	bne.n	800350c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034e8:	4b31      	ldr	r3, [pc, #196]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80034f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6892      	ldr	r2, [r2, #8]
 80034f8:	0211      	lsls	r1, r2, #8
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68d2      	ldr	r2, [r2, #12]
 80034fe:	0912      	lsrs	r2, r2, #4
 8003500:	0452      	lsls	r2, r2, #17
 8003502:	430a      	orrs	r2, r1
 8003504:	492a      	ldr	r1, [pc, #168]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003506:	4313      	orrs	r3, r2
 8003508:	610b      	str	r3, [r1, #16]
 800350a:	e027      	b.n	800355c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d112      	bne.n	8003538 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003512:	4b27      	ldr	r3, [pc, #156]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800351a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6892      	ldr	r2, [r2, #8]
 8003522:	0211      	lsls	r1, r2, #8
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6912      	ldr	r2, [r2, #16]
 8003528:	0852      	lsrs	r2, r2, #1
 800352a:	3a01      	subs	r2, #1
 800352c:	0552      	lsls	r2, r2, #21
 800352e:	430a      	orrs	r2, r1
 8003530:	491f      	ldr	r1, [pc, #124]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003532:	4313      	orrs	r3, r2
 8003534:	610b      	str	r3, [r1, #16]
 8003536:	e011      	b.n	800355c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003538:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003540:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6892      	ldr	r2, [r2, #8]
 8003548:	0211      	lsls	r1, r2, #8
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6952      	ldr	r2, [r2, #20]
 800354e:	0852      	lsrs	r2, r2, #1
 8003550:	3a01      	subs	r2, #1
 8003552:	0652      	lsls	r2, r2, #25
 8003554:	430a      	orrs	r2, r1
 8003556:	4916      	ldr	r1, [pc, #88]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003558:	4313      	orrs	r3, r2
 800355a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800355c:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a13      	ldr	r2, [pc, #76]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003562:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003566:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003568:	f7fe faac 	bl	8001ac4 <HAL_GetTick>
 800356c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800356e:	e009      	b.n	8003584 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003570:	f7fe faa8 	bl	8001ac4 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d902      	bls.n	8003584 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	73fb      	strb	r3, [r7, #15]
          break;
 8003582:	e005      	b.n	8003590 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003584:	4b0a      	ldr	r3, [pc, #40]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0ef      	beq.n	8003570 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003596:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	4904      	ldr	r1, [pc, #16]	; (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40021000 	.word	0x40021000

080035b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035c2:	4b6a      	ldr	r3, [pc, #424]	; (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d018      	beq.n	8003600 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035ce:	4b67      	ldr	r3, [pc, #412]	; (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f003 0203 	and.w	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d10d      	bne.n	80035fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
       ||
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80035e6:	4b61      	ldr	r3, [pc, #388]	; (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
       ||
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d047      	beq.n	800368a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
 80035fe:	e044      	b.n	800368a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d018      	beq.n	800363a <RCCEx_PLLSAI2_Config+0x86>
 8003608:	2b03      	cmp	r3, #3
 800360a:	d825      	bhi.n	8003658 <RCCEx_PLLSAI2_Config+0xa4>
 800360c:	2b01      	cmp	r3, #1
 800360e:	d002      	beq.n	8003616 <RCCEx_PLLSAI2_Config+0x62>
 8003610:	2b02      	cmp	r3, #2
 8003612:	d009      	beq.n	8003628 <RCCEx_PLLSAI2_Config+0x74>
 8003614:	e020      	b.n	8003658 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003616:	4b55      	ldr	r3, [pc, #340]	; (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d11d      	bne.n	800365e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003626:	e01a      	b.n	800365e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003628:	4b50      	ldr	r3, [pc, #320]	; (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003630:	2b00      	cmp	r3, #0
 8003632:	d116      	bne.n	8003662 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003638:	e013      	b.n	8003662 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800363a:	4b4c      	ldr	r3, [pc, #304]	; (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003646:	4b49      	ldr	r3, [pc, #292]	; (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003656:	e006      	b.n	8003666 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
      break;
 800365c:	e004      	b.n	8003668 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800365e:	bf00      	nop
 8003660:	e002      	b.n	8003668 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003662:	bf00      	nop
 8003664:	e000      	b.n	8003668 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003666:	bf00      	nop
    }

    if(status == HAL_OK)
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10d      	bne.n	800368a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800366e:	4b3f      	ldr	r3, [pc, #252]	; (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6819      	ldr	r1, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	3b01      	subs	r3, #1
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	430b      	orrs	r3, r1
 8003684:	4939      	ldr	r1, [pc, #228]	; (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003686:	4313      	orrs	r3, r2
 8003688:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d167      	bne.n	8003760 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003690:	4b36      	ldr	r3, [pc, #216]	; (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a35      	ldr	r2, [pc, #212]	; (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800369a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800369c:	f7fe fa12 	bl	8001ac4 <HAL_GetTick>
 80036a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036a2:	e009      	b.n	80036b8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036a4:	f7fe fa0e 	bl	8001ac4 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d902      	bls.n	80036b8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	73fb      	strb	r3, [r7, #15]
        break;
 80036b6:	e005      	b.n	80036c4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036b8:	4b2c      	ldr	r3, [pc, #176]	; (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1ef      	bne.n	80036a4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d14a      	bne.n	8003760 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d111      	bne.n	80036f4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036d0:	4b26      	ldr	r3, [pc, #152]	; (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6892      	ldr	r2, [r2, #8]
 80036e0:	0211      	lsls	r1, r2, #8
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68d2      	ldr	r2, [r2, #12]
 80036e6:	0912      	lsrs	r2, r2, #4
 80036e8:	0452      	lsls	r2, r2, #17
 80036ea:	430a      	orrs	r2, r1
 80036ec:	491f      	ldr	r1, [pc, #124]	; (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	614b      	str	r3, [r1, #20]
 80036f2:	e011      	b.n	8003718 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036f4:	4b1d      	ldr	r3, [pc, #116]	; (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6892      	ldr	r2, [r2, #8]
 8003704:	0211      	lsls	r1, r2, #8
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6912      	ldr	r2, [r2, #16]
 800370a:	0852      	lsrs	r2, r2, #1
 800370c:	3a01      	subs	r2, #1
 800370e:	0652      	lsls	r2, r2, #25
 8003710:	430a      	orrs	r2, r1
 8003712:	4916      	ldr	r1, [pc, #88]	; (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003714:	4313      	orrs	r3, r2
 8003716:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003718:	4b14      	ldr	r3, [pc, #80]	; (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a13      	ldr	r2, [pc, #76]	; (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 800371e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003722:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003724:	f7fe f9ce 	bl	8001ac4 <HAL_GetTick>
 8003728:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800372a:	e009      	b.n	8003740 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800372c:	f7fe f9ca 	bl	8001ac4 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d902      	bls.n	8003740 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	73fb      	strb	r3, [r7, #15]
          break;
 800373e:	e005      	b.n	800374c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003740:	4b0a      	ldr	r3, [pc, #40]	; (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0ef      	beq.n	800372c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003752:	4b06      	ldr	r3, [pc, #24]	; (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003754:	695a      	ldr	r2, [r3, #20]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	4904      	ldr	r1, [pc, #16]	; (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 800375c:	4313      	orrs	r3, r2
 800375e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003760:	7bfb      	ldrb	r3, [r7, #15]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40021000 	.word	0x40021000

08003770 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e049      	b.n	8003816 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fd ff54 	bl	8001644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3304      	adds	r3, #4
 80037ac:	4619      	mov	r1, r3
 80037ae:	4610      	mov	r0, r2
 80037b0:	f000 feae 	bl	8004510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b01      	cmp	r3, #1
 8003832:	d001      	beq.n	8003838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e04f      	b.n	80038d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a23      	ldr	r2, [pc, #140]	; (80038e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01d      	beq.n	8003896 <HAL_TIM_Base_Start_IT+0x76>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003862:	d018      	beq.n	8003896 <HAL_TIM_Base_Start_IT+0x76>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1f      	ldr	r2, [pc, #124]	; (80038e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d013      	beq.n	8003896 <HAL_TIM_Base_Start_IT+0x76>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1e      	ldr	r2, [pc, #120]	; (80038ec <HAL_TIM_Base_Start_IT+0xcc>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00e      	beq.n	8003896 <HAL_TIM_Base_Start_IT+0x76>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a1c      	ldr	r2, [pc, #112]	; (80038f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d009      	beq.n	8003896 <HAL_TIM_Base_Start_IT+0x76>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1b      	ldr	r2, [pc, #108]	; (80038f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d004      	beq.n	8003896 <HAL_TIM_Base_Start_IT+0x76>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a19      	ldr	r2, [pc, #100]	; (80038f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d115      	bne.n	80038c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	4b17      	ldr	r3, [pc, #92]	; (80038fc <HAL_TIM_Base_Start_IT+0xdc>)
 800389e:	4013      	ands	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b06      	cmp	r3, #6
 80038a6:	d015      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0xb4>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ae:	d011      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c0:	e008      	b.n	80038d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0201 	orr.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	e000      	b.n	80038d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	40012c00 	.word	0x40012c00
 80038e8:	40000400 	.word	0x40000400
 80038ec:	40000800 	.word	0x40000800
 80038f0:	40000c00 	.word	0x40000c00
 80038f4:	40013400 	.word	0x40013400
 80038f8:	40014000 	.word	0x40014000
 80038fc:	00010007 	.word	0x00010007

08003900 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e049      	b.n	80039a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f841 	bl	80039ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3304      	adds	r3, #4
 800393c:	4619      	mov	r1, r3
 800393e:	4610      	mov	r0, r2
 8003940:	f000 fde6 	bl	8004510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
	...

080039c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <HAL_TIM_PWM_Start+0x24>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b01      	cmp	r3, #1
 80039de:	bf14      	ite	ne
 80039e0:	2301      	movne	r3, #1
 80039e2:	2300      	moveq	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	e03c      	b.n	8003a62 <HAL_TIM_PWM_Start+0x9e>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d109      	bne.n	8003a02 <HAL_TIM_PWM_Start+0x3e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	bf14      	ite	ne
 80039fa:	2301      	movne	r3, #1
 80039fc:	2300      	moveq	r3, #0
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	e02f      	b.n	8003a62 <HAL_TIM_PWM_Start+0x9e>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d109      	bne.n	8003a1c <HAL_TIM_PWM_Start+0x58>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	bf14      	ite	ne
 8003a14:	2301      	movne	r3, #1
 8003a16:	2300      	moveq	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	e022      	b.n	8003a62 <HAL_TIM_PWM_Start+0x9e>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b0c      	cmp	r3, #12
 8003a20:	d109      	bne.n	8003a36 <HAL_TIM_PWM_Start+0x72>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	bf14      	ite	ne
 8003a2e:	2301      	movne	r3, #1
 8003a30:	2300      	moveq	r3, #0
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	e015      	b.n	8003a62 <HAL_TIM_PWM_Start+0x9e>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b10      	cmp	r3, #16
 8003a3a:	d109      	bne.n	8003a50 <HAL_TIM_PWM_Start+0x8c>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	bf14      	ite	ne
 8003a48:	2301      	movne	r3, #1
 8003a4a:	2300      	moveq	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e008      	b.n	8003a62 <HAL_TIM_PWM_Start+0x9e>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	bf14      	ite	ne
 8003a5c:	2301      	movne	r3, #1
 8003a5e:	2300      	moveq	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e09c      	b.n	8003ba4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d104      	bne.n	8003a7a <HAL_TIM_PWM_Start+0xb6>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a78:	e023      	b.n	8003ac2 <HAL_TIM_PWM_Start+0xfe>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d104      	bne.n	8003a8a <HAL_TIM_PWM_Start+0xc6>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a88:	e01b      	b.n	8003ac2 <HAL_TIM_PWM_Start+0xfe>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d104      	bne.n	8003a9a <HAL_TIM_PWM_Start+0xd6>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a98:	e013      	b.n	8003ac2 <HAL_TIM_PWM_Start+0xfe>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b0c      	cmp	r3, #12
 8003a9e:	d104      	bne.n	8003aaa <HAL_TIM_PWM_Start+0xe6>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003aa8:	e00b      	b.n	8003ac2 <HAL_TIM_PWM_Start+0xfe>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b10      	cmp	r3, #16
 8003aae:	d104      	bne.n	8003aba <HAL_TIM_PWM_Start+0xf6>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ab8:	e003      	b.n	8003ac2 <HAL_TIM_PWM_Start+0xfe>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2202      	movs	r2, #2
 8003abe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	6839      	ldr	r1, [r7, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f001 f92a 	bl	8004d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a35      	ldr	r2, [pc, #212]	; (8003bac <HAL_TIM_PWM_Start+0x1e8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d013      	beq.n	8003b02 <HAL_TIM_PWM_Start+0x13e>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a34      	ldr	r2, [pc, #208]	; (8003bb0 <HAL_TIM_PWM_Start+0x1ec>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d00e      	beq.n	8003b02 <HAL_TIM_PWM_Start+0x13e>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a32      	ldr	r2, [pc, #200]	; (8003bb4 <HAL_TIM_PWM_Start+0x1f0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d009      	beq.n	8003b02 <HAL_TIM_PWM_Start+0x13e>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a31      	ldr	r2, [pc, #196]	; (8003bb8 <HAL_TIM_PWM_Start+0x1f4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d004      	beq.n	8003b02 <HAL_TIM_PWM_Start+0x13e>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a2f      	ldr	r2, [pc, #188]	; (8003bbc <HAL_TIM_PWM_Start+0x1f8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d101      	bne.n	8003b06 <HAL_TIM_PWM_Start+0x142>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <HAL_TIM_PWM_Start+0x144>
 8003b06:	2300      	movs	r3, #0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d007      	beq.n	8003b1c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a22      	ldr	r2, [pc, #136]	; (8003bac <HAL_TIM_PWM_Start+0x1e8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01d      	beq.n	8003b62 <HAL_TIM_PWM_Start+0x19e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2e:	d018      	beq.n	8003b62 <HAL_TIM_PWM_Start+0x19e>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a22      	ldr	r2, [pc, #136]	; (8003bc0 <HAL_TIM_PWM_Start+0x1fc>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d013      	beq.n	8003b62 <HAL_TIM_PWM_Start+0x19e>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a21      	ldr	r2, [pc, #132]	; (8003bc4 <HAL_TIM_PWM_Start+0x200>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00e      	beq.n	8003b62 <HAL_TIM_PWM_Start+0x19e>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1f      	ldr	r2, [pc, #124]	; (8003bc8 <HAL_TIM_PWM_Start+0x204>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d009      	beq.n	8003b62 <HAL_TIM_PWM_Start+0x19e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a17      	ldr	r2, [pc, #92]	; (8003bb0 <HAL_TIM_PWM_Start+0x1ec>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d004      	beq.n	8003b62 <HAL_TIM_PWM_Start+0x19e>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a15      	ldr	r2, [pc, #84]	; (8003bb4 <HAL_TIM_PWM_Start+0x1f0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d115      	bne.n	8003b8e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	4b18      	ldr	r3, [pc, #96]	; (8003bcc <HAL_TIM_PWM_Start+0x208>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2b06      	cmp	r3, #6
 8003b72:	d015      	beq.n	8003ba0 <HAL_TIM_PWM_Start+0x1dc>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b7a:	d011      	beq.n	8003ba0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b8c:	e008      	b.n	8003ba0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 0201 	orr.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	e000      	b.n	8003ba2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40012c00 	.word	0x40012c00
 8003bb0:	40013400 	.word	0x40013400
 8003bb4:	40014000 	.word	0x40014000
 8003bb8:	40014400 	.word	0x40014400
 8003bbc:	40014800 	.word	0x40014800
 8003bc0:	40000400 	.word	0x40000400
 8003bc4:	40000800 	.word	0x40000800
 8003bc8:	40000c00 	.word	0x40000c00
 8003bcc:	00010007 	.word	0x00010007

08003bd0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e097      	b.n	8003d14 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d106      	bne.n	8003bfe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7fd fcd9 	bl	80015b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2202      	movs	r2, #2
 8003c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003c14:	f023 0307 	bic.w	r3, r3, #7
 8003c18:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3304      	adds	r3, #4
 8003c22:	4619      	mov	r1, r3
 8003c24:	4610      	mov	r0, r2
 8003c26:	f000 fc73 	bl	8004510 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c52:	f023 0303 	bic.w	r3, r3, #3
 8003c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	021b      	lsls	r3, r3, #8
 8003c62:	4313      	orrs	r3, r2
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003c70:	f023 030c 	bic.w	r3, r3, #12
 8003c74:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	021b      	lsls	r3, r3, #8
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	011a      	lsls	r2, r3, #4
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	031b      	lsls	r3, r3, #12
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003cae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003cb6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d2c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d34:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d3c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d44:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d110      	bne.n	8003d6e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d102      	bne.n	8003d58 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d52:	7b7b      	ldrb	r3, [r7, #13]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d001      	beq.n	8003d5c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e069      	b.n	8003e30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d6c:	e031      	b.n	8003dd2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d110      	bne.n	8003d96 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d74:	7bbb      	ldrb	r3, [r7, #14]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d102      	bne.n	8003d80 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d7a:	7b3b      	ldrb	r3, [r7, #12]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d001      	beq.n	8003d84 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e055      	b.n	8003e30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d94:	e01d      	b.n	8003dd2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d108      	bne.n	8003dae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d9c:	7bbb      	ldrb	r3, [r7, #14]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d105      	bne.n	8003dae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003da2:	7b7b      	ldrb	r3, [r7, #13]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d102      	bne.n	8003dae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003da8:	7b3b      	ldrb	r3, [r7, #12]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d001      	beq.n	8003db2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e03e      	b.n	8003e30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2202      	movs	r2, #2
 8003db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_TIM_Encoder_Start+0xc4>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d008      	beq.n	8003df0 <HAL_TIM_Encoder_Start+0xd4>
 8003dde:	e00f      	b.n	8003e00 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2201      	movs	r2, #1
 8003de6:	2100      	movs	r1, #0
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 ff9b 	bl	8004d24 <TIM_CCxChannelCmd>
      break;
 8003dee:	e016      	b.n	8003e1e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2201      	movs	r2, #1
 8003df6:	2104      	movs	r1, #4
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 ff93 	bl	8004d24 <TIM_CCxChannelCmd>
      break;
 8003dfe:	e00e      	b.n	8003e1e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2201      	movs	r2, #1
 8003e06:	2100      	movs	r1, #0
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 ff8b 	bl	8004d24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2201      	movs	r2, #1
 8003e14:	2104      	movs	r1, #4
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 ff84 	bl	8004d24 <TIM_CCxChannelCmd>
      break;
 8003e1c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0201 	orr.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d122      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d11b      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0202 	mvn.w	r2, #2
 8003e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7fd f8b6 	bl	8000fec <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fb1a 	bl	80044bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 fb21 	bl	80044d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0304 	and.w	r3, r3, #4
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d122      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d11b      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0204 	mvn.w	r2, #4
 8003eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fd f88c 	bl	8000fec <HAL_TIM_IC_CaptureCallback>
 8003ed4:	e005      	b.n	8003ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 faf0 	bl	80044bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 faf7 	bl	80044d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d122      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d11b      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0208 	mvn.w	r2, #8
 8003f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2204      	movs	r2, #4
 8003f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fd f862 	bl	8000fec <HAL_TIM_IC_CaptureCallback>
 8003f28:	e005      	b.n	8003f36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 fac6 	bl	80044bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 facd 	bl	80044d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	2b10      	cmp	r3, #16
 8003f48:	d122      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d11b      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0210 	mvn.w	r2, #16
 8003f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2208      	movs	r2, #8
 8003f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fd f838 	bl	8000fec <HAL_TIM_IC_CaptureCallback>
 8003f7c:	e005      	b.n	8003f8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fa9c 	bl	80044bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 faa3 	bl	80044d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d10e      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d107      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0201 	mvn.w	r2, #1
 8003fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fd f804 	bl	8000fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc6:	2b80      	cmp	r3, #128	; 0x80
 8003fc8:	d10e      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd4:	2b80      	cmp	r3, #128	; 0x80
 8003fd6:	d107      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 ff56 	bl	8004e94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff6:	d10e      	bne.n	8004016 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004002:	2b80      	cmp	r3, #128	; 0x80
 8004004:	d107      	bne.n	8004016 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800400e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 ff49 	bl	8004ea8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004020:	2b40      	cmp	r3, #64	; 0x40
 8004022:	d10e      	bne.n	8004042 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402e:	2b40      	cmp	r3, #64	; 0x40
 8004030:	d107      	bne.n	8004042 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800403a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 fa51 	bl	80044e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b20      	cmp	r3, #32
 800404e:	d10e      	bne.n	800406e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b20      	cmp	r3, #32
 800405c:	d107      	bne.n	800406e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f06f 0220 	mvn.w	r2, #32
 8004066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 ff09 	bl	8004e80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004084:	2300      	movs	r3, #0
 8004086:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800408e:	2b01      	cmp	r3, #1
 8004090:	d101      	bne.n	8004096 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004092:	2302      	movs	r3, #2
 8004094:	e0ff      	b.n	8004296 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b14      	cmp	r3, #20
 80040a2:	f200 80f0 	bhi.w	8004286 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80040a6:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ac:	08004101 	.word	0x08004101
 80040b0:	08004287 	.word	0x08004287
 80040b4:	08004287 	.word	0x08004287
 80040b8:	08004287 	.word	0x08004287
 80040bc:	08004141 	.word	0x08004141
 80040c0:	08004287 	.word	0x08004287
 80040c4:	08004287 	.word	0x08004287
 80040c8:	08004287 	.word	0x08004287
 80040cc:	08004183 	.word	0x08004183
 80040d0:	08004287 	.word	0x08004287
 80040d4:	08004287 	.word	0x08004287
 80040d8:	08004287 	.word	0x08004287
 80040dc:	080041c3 	.word	0x080041c3
 80040e0:	08004287 	.word	0x08004287
 80040e4:	08004287 	.word	0x08004287
 80040e8:	08004287 	.word	0x08004287
 80040ec:	08004205 	.word	0x08004205
 80040f0:	08004287 	.word	0x08004287
 80040f4:	08004287 	.word	0x08004287
 80040f8:	08004287 	.word	0x08004287
 80040fc:	08004245 	.word	0x08004245
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68b9      	ldr	r1, [r7, #8]
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fa9c 	bl	8004644 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0208 	orr.w	r2, r2, #8
 800411a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699a      	ldr	r2, [r3, #24]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0204 	bic.w	r2, r2, #4
 800412a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6999      	ldr	r1, [r3, #24]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	619a      	str	r2, [r3, #24]
      break;
 800413e:	e0a5      	b.n	800428c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fb0c 	bl	8004764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800415a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800416a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6999      	ldr	r1, [r3, #24]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	021a      	lsls	r2, r3, #8
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	619a      	str	r2, [r3, #24]
      break;
 8004180:	e084      	b.n	800428c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fb75 	bl	8004878 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69da      	ldr	r2, [r3, #28]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 0208 	orr.w	r2, r2, #8
 800419c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69da      	ldr	r2, [r3, #28]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0204 	bic.w	r2, r2, #4
 80041ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69d9      	ldr	r1, [r3, #28]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	61da      	str	r2, [r3, #28]
      break;
 80041c0:	e064      	b.n	800428c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68b9      	ldr	r1, [r7, #8]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 fbdd 	bl	8004988 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69da      	ldr	r2, [r3, #28]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69d9      	ldr	r1, [r3, #28]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	021a      	lsls	r2, r3, #8
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	61da      	str	r2, [r3, #28]
      break;
 8004202:	e043      	b.n	800428c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68b9      	ldr	r1, [r7, #8]
 800420a:	4618      	mov	r0, r3
 800420c:	f000 fc26 	bl	8004a5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0208 	orr.w	r2, r2, #8
 800421e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0204 	bic.w	r2, r2, #4
 800422e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	691a      	ldr	r2, [r3, #16]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004242:	e023      	b.n	800428c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68b9      	ldr	r1, [r7, #8]
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fc6a 	bl	8004b24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800425e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800426e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	021a      	lsls	r2, r3, #8
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004284:	e002      	b.n	800428c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	75fb      	strb	r3, [r7, #23]
      break;
 800428a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004294:	7dfb      	ldrb	r3, [r7, #23]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop

080042a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_TIM_ConfigClockSource+0x1c>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e0b6      	b.n	800442a <HAL_TIM_ConfigClockSource+0x18a>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f8:	d03e      	beq.n	8004378 <HAL_TIM_ConfigClockSource+0xd8>
 80042fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042fe:	f200 8087 	bhi.w	8004410 <HAL_TIM_ConfigClockSource+0x170>
 8004302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004306:	f000 8086 	beq.w	8004416 <HAL_TIM_ConfigClockSource+0x176>
 800430a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430e:	d87f      	bhi.n	8004410 <HAL_TIM_ConfigClockSource+0x170>
 8004310:	2b70      	cmp	r3, #112	; 0x70
 8004312:	d01a      	beq.n	800434a <HAL_TIM_ConfigClockSource+0xaa>
 8004314:	2b70      	cmp	r3, #112	; 0x70
 8004316:	d87b      	bhi.n	8004410 <HAL_TIM_ConfigClockSource+0x170>
 8004318:	2b60      	cmp	r3, #96	; 0x60
 800431a:	d050      	beq.n	80043be <HAL_TIM_ConfigClockSource+0x11e>
 800431c:	2b60      	cmp	r3, #96	; 0x60
 800431e:	d877      	bhi.n	8004410 <HAL_TIM_ConfigClockSource+0x170>
 8004320:	2b50      	cmp	r3, #80	; 0x50
 8004322:	d03c      	beq.n	800439e <HAL_TIM_ConfigClockSource+0xfe>
 8004324:	2b50      	cmp	r3, #80	; 0x50
 8004326:	d873      	bhi.n	8004410 <HAL_TIM_ConfigClockSource+0x170>
 8004328:	2b40      	cmp	r3, #64	; 0x40
 800432a:	d058      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x13e>
 800432c:	2b40      	cmp	r3, #64	; 0x40
 800432e:	d86f      	bhi.n	8004410 <HAL_TIM_ConfigClockSource+0x170>
 8004330:	2b30      	cmp	r3, #48	; 0x30
 8004332:	d064      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0x15e>
 8004334:	2b30      	cmp	r3, #48	; 0x30
 8004336:	d86b      	bhi.n	8004410 <HAL_TIM_ConfigClockSource+0x170>
 8004338:	2b20      	cmp	r3, #32
 800433a:	d060      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0x15e>
 800433c:	2b20      	cmp	r3, #32
 800433e:	d867      	bhi.n	8004410 <HAL_TIM_ConfigClockSource+0x170>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d05c      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0x15e>
 8004344:	2b10      	cmp	r3, #16
 8004346:	d05a      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0x15e>
 8004348:	e062      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800435a:	f000 fcc3 	bl	8004ce4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800436c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	609a      	str	r2, [r3, #8]
      break;
 8004376:	e04f      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004388:	f000 fcac 	bl	8004ce4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800439a:	609a      	str	r2, [r3, #8]
      break;
 800439c:	e03c      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043aa:	461a      	mov	r2, r3
 80043ac:	f000 fc20 	bl	8004bf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2150      	movs	r1, #80	; 0x50
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fc79 	bl	8004cae <TIM_ITRx_SetConfig>
      break;
 80043bc:	e02c      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ca:	461a      	mov	r2, r3
 80043cc:	f000 fc3f 	bl	8004c4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2160      	movs	r1, #96	; 0x60
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fc69 	bl	8004cae <TIM_ITRx_SetConfig>
      break;
 80043dc:	e01c      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ea:	461a      	mov	r2, r3
 80043ec:	f000 fc00 	bl	8004bf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2140      	movs	r1, #64	; 0x40
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fc59 	bl	8004cae <TIM_ITRx_SetConfig>
      break;
 80043fc:	e00c      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4619      	mov	r1, r3
 8004408:	4610      	mov	r0, r2
 800440a:	f000 fc50 	bl	8004cae <TIM_ITRx_SetConfig>
      break;
 800440e:	e003      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	73fb      	strb	r3, [r7, #15]
      break;
 8004414:	e000      	b.n	8004418 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004416:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004428:	7bfb      	ldrb	r3, [r7, #15]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b0c      	cmp	r3, #12
 8004446:	d831      	bhi.n	80044ac <HAL_TIM_ReadCapturedValue+0x78>
 8004448:	a201      	add	r2, pc, #4	; (adr r2, 8004450 <HAL_TIM_ReadCapturedValue+0x1c>)
 800444a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444e:	bf00      	nop
 8004450:	08004485 	.word	0x08004485
 8004454:	080044ad 	.word	0x080044ad
 8004458:	080044ad 	.word	0x080044ad
 800445c:	080044ad 	.word	0x080044ad
 8004460:	0800448f 	.word	0x0800448f
 8004464:	080044ad 	.word	0x080044ad
 8004468:	080044ad 	.word	0x080044ad
 800446c:	080044ad 	.word	0x080044ad
 8004470:	08004499 	.word	0x08004499
 8004474:	080044ad 	.word	0x080044ad
 8004478:	080044ad 	.word	0x080044ad
 800447c:	080044ad 	.word	0x080044ad
 8004480:	080044a3 	.word	0x080044a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448a:	60fb      	str	r3, [r7, #12]

      break;
 800448c:	e00f      	b.n	80044ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	60fb      	str	r3, [r7, #12]

      break;
 8004496:	e00a      	b.n	80044ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449e:	60fb      	str	r3, [r7, #12]

      break;
 80044a0:	e005      	b.n	80044ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	60fb      	str	r3, [r7, #12]

      break;
 80044aa:	e000      	b.n	80044ae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80044ac:	bf00      	nop
  }

  return tmpreg;
 80044ae:	68fb      	ldr	r3, [r7, #12]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	7f1b      	ldrb	r3, [r3, #28]
}
 8004504:	4618      	mov	r0, r3
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a40      	ldr	r2, [pc, #256]	; (8004624 <TIM_Base_SetConfig+0x114>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d013      	beq.n	8004550 <TIM_Base_SetConfig+0x40>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452e:	d00f      	beq.n	8004550 <TIM_Base_SetConfig+0x40>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a3d      	ldr	r2, [pc, #244]	; (8004628 <TIM_Base_SetConfig+0x118>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d00b      	beq.n	8004550 <TIM_Base_SetConfig+0x40>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a3c      	ldr	r2, [pc, #240]	; (800462c <TIM_Base_SetConfig+0x11c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d007      	beq.n	8004550 <TIM_Base_SetConfig+0x40>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a3b      	ldr	r2, [pc, #236]	; (8004630 <TIM_Base_SetConfig+0x120>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d003      	beq.n	8004550 <TIM_Base_SetConfig+0x40>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a3a      	ldr	r2, [pc, #232]	; (8004634 <TIM_Base_SetConfig+0x124>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d108      	bne.n	8004562 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a2f      	ldr	r2, [pc, #188]	; (8004624 <TIM_Base_SetConfig+0x114>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d01f      	beq.n	80045aa <TIM_Base_SetConfig+0x9a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004570:	d01b      	beq.n	80045aa <TIM_Base_SetConfig+0x9a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a2c      	ldr	r2, [pc, #176]	; (8004628 <TIM_Base_SetConfig+0x118>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d017      	beq.n	80045aa <TIM_Base_SetConfig+0x9a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a2b      	ldr	r2, [pc, #172]	; (800462c <TIM_Base_SetConfig+0x11c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d013      	beq.n	80045aa <TIM_Base_SetConfig+0x9a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a2a      	ldr	r2, [pc, #168]	; (8004630 <TIM_Base_SetConfig+0x120>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00f      	beq.n	80045aa <TIM_Base_SetConfig+0x9a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a29      	ldr	r2, [pc, #164]	; (8004634 <TIM_Base_SetConfig+0x124>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d00b      	beq.n	80045aa <TIM_Base_SetConfig+0x9a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a28      	ldr	r2, [pc, #160]	; (8004638 <TIM_Base_SetConfig+0x128>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d007      	beq.n	80045aa <TIM_Base_SetConfig+0x9a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a27      	ldr	r2, [pc, #156]	; (800463c <TIM_Base_SetConfig+0x12c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d003      	beq.n	80045aa <TIM_Base_SetConfig+0x9a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a26      	ldr	r2, [pc, #152]	; (8004640 <TIM_Base_SetConfig+0x130>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d108      	bne.n	80045bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a10      	ldr	r2, [pc, #64]	; (8004624 <TIM_Base_SetConfig+0x114>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00f      	beq.n	8004608 <TIM_Base_SetConfig+0xf8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a12      	ldr	r2, [pc, #72]	; (8004634 <TIM_Base_SetConfig+0x124>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00b      	beq.n	8004608 <TIM_Base_SetConfig+0xf8>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a11      	ldr	r2, [pc, #68]	; (8004638 <TIM_Base_SetConfig+0x128>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d007      	beq.n	8004608 <TIM_Base_SetConfig+0xf8>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a10      	ldr	r2, [pc, #64]	; (800463c <TIM_Base_SetConfig+0x12c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d003      	beq.n	8004608 <TIM_Base_SetConfig+0xf8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a0f      	ldr	r2, [pc, #60]	; (8004640 <TIM_Base_SetConfig+0x130>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d103      	bne.n	8004610 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	615a      	str	r2, [r3, #20]
}
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40012c00 	.word	0x40012c00
 8004628:	40000400 	.word	0x40000400
 800462c:	40000800 	.word	0x40000800
 8004630:	40000c00 	.word	0x40000c00
 8004634:	40013400 	.word	0x40013400
 8004638:	40014000 	.word	0x40014000
 800463c:	40014400 	.word	0x40014400
 8004640:	40014800 	.word	0x40014800

08004644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	f023 0201 	bic.w	r2, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0303 	bic.w	r3, r3, #3
 800467e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f023 0302 	bic.w	r3, r3, #2
 8004690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a2c      	ldr	r2, [pc, #176]	; (8004750 <TIM_OC1_SetConfig+0x10c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00f      	beq.n	80046c4 <TIM_OC1_SetConfig+0x80>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a2b      	ldr	r2, [pc, #172]	; (8004754 <TIM_OC1_SetConfig+0x110>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00b      	beq.n	80046c4 <TIM_OC1_SetConfig+0x80>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a2a      	ldr	r2, [pc, #168]	; (8004758 <TIM_OC1_SetConfig+0x114>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d007      	beq.n	80046c4 <TIM_OC1_SetConfig+0x80>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a29      	ldr	r2, [pc, #164]	; (800475c <TIM_OC1_SetConfig+0x118>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d003      	beq.n	80046c4 <TIM_OC1_SetConfig+0x80>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a28      	ldr	r2, [pc, #160]	; (8004760 <TIM_OC1_SetConfig+0x11c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d10c      	bne.n	80046de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f023 0308 	bic.w	r3, r3, #8
 80046ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f023 0304 	bic.w	r3, r3, #4
 80046dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a1b      	ldr	r2, [pc, #108]	; (8004750 <TIM_OC1_SetConfig+0x10c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00f      	beq.n	8004706 <TIM_OC1_SetConfig+0xc2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a1a      	ldr	r2, [pc, #104]	; (8004754 <TIM_OC1_SetConfig+0x110>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00b      	beq.n	8004706 <TIM_OC1_SetConfig+0xc2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a19      	ldr	r2, [pc, #100]	; (8004758 <TIM_OC1_SetConfig+0x114>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d007      	beq.n	8004706 <TIM_OC1_SetConfig+0xc2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a18      	ldr	r2, [pc, #96]	; (800475c <TIM_OC1_SetConfig+0x118>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d003      	beq.n	8004706 <TIM_OC1_SetConfig+0xc2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a17      	ldr	r2, [pc, #92]	; (8004760 <TIM_OC1_SetConfig+0x11c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d111      	bne.n	800472a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800470c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	621a      	str	r2, [r3, #32]
}
 8004744:	bf00      	nop
 8004746:	371c      	adds	r7, #28
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	40012c00 	.word	0x40012c00
 8004754:	40013400 	.word	0x40013400
 8004758:	40014000 	.word	0x40014000
 800475c:	40014400 	.word	0x40014400
 8004760:	40014800 	.word	0x40014800

08004764 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	f023 0210 	bic.w	r2, r3, #16
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	021b      	lsls	r3, r3, #8
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f023 0320 	bic.w	r3, r3, #32
 80047b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a28      	ldr	r2, [pc, #160]	; (8004864 <TIM_OC2_SetConfig+0x100>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d003      	beq.n	80047d0 <TIM_OC2_SetConfig+0x6c>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a27      	ldr	r2, [pc, #156]	; (8004868 <TIM_OC2_SetConfig+0x104>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d10d      	bne.n	80047ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a1d      	ldr	r2, [pc, #116]	; (8004864 <TIM_OC2_SetConfig+0x100>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00f      	beq.n	8004814 <TIM_OC2_SetConfig+0xb0>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a1c      	ldr	r2, [pc, #112]	; (8004868 <TIM_OC2_SetConfig+0x104>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00b      	beq.n	8004814 <TIM_OC2_SetConfig+0xb0>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a1b      	ldr	r2, [pc, #108]	; (800486c <TIM_OC2_SetConfig+0x108>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d007      	beq.n	8004814 <TIM_OC2_SetConfig+0xb0>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a1a      	ldr	r2, [pc, #104]	; (8004870 <TIM_OC2_SetConfig+0x10c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d003      	beq.n	8004814 <TIM_OC2_SetConfig+0xb0>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a19      	ldr	r2, [pc, #100]	; (8004874 <TIM_OC2_SetConfig+0x110>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d113      	bne.n	800483c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800481a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004822:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	4313      	orrs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	621a      	str	r2, [r3, #32]
}
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40012c00 	.word	0x40012c00
 8004868:	40013400 	.word	0x40013400
 800486c:	40014000 	.word	0x40014000
 8004870:	40014400 	.word	0x40014400
 8004874:	40014800 	.word	0x40014800

08004878 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0303 	bic.w	r3, r3, #3
 80048b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a27      	ldr	r2, [pc, #156]	; (8004974 <TIM_OC3_SetConfig+0xfc>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d003      	beq.n	80048e2 <TIM_OC3_SetConfig+0x6a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a26      	ldr	r2, [pc, #152]	; (8004978 <TIM_OC3_SetConfig+0x100>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d10d      	bne.n	80048fe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a1c      	ldr	r2, [pc, #112]	; (8004974 <TIM_OC3_SetConfig+0xfc>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00f      	beq.n	8004926 <TIM_OC3_SetConfig+0xae>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a1b      	ldr	r2, [pc, #108]	; (8004978 <TIM_OC3_SetConfig+0x100>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00b      	beq.n	8004926 <TIM_OC3_SetConfig+0xae>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a1a      	ldr	r2, [pc, #104]	; (800497c <TIM_OC3_SetConfig+0x104>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d007      	beq.n	8004926 <TIM_OC3_SetConfig+0xae>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a19      	ldr	r2, [pc, #100]	; (8004980 <TIM_OC3_SetConfig+0x108>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d003      	beq.n	8004926 <TIM_OC3_SetConfig+0xae>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a18      	ldr	r2, [pc, #96]	; (8004984 <TIM_OC3_SetConfig+0x10c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d113      	bne.n	800494e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800492c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	621a      	str	r2, [r3, #32]
}
 8004968:	bf00      	nop
 800496a:	371c      	adds	r7, #28
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	40012c00 	.word	0x40012c00
 8004978:	40013400 	.word	0x40013400
 800497c:	40014000 	.word	0x40014000
 8004980:	40014400 	.word	0x40014400
 8004984:	40014800 	.word	0x40014800

08004988 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	021b      	lsls	r3, r3, #8
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	031b      	lsls	r3, r3, #12
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a18      	ldr	r2, [pc, #96]	; (8004a48 <TIM_OC4_SetConfig+0xc0>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00f      	beq.n	8004a0c <TIM_OC4_SetConfig+0x84>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a17      	ldr	r2, [pc, #92]	; (8004a4c <TIM_OC4_SetConfig+0xc4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00b      	beq.n	8004a0c <TIM_OC4_SetConfig+0x84>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a16      	ldr	r2, [pc, #88]	; (8004a50 <TIM_OC4_SetConfig+0xc8>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d007      	beq.n	8004a0c <TIM_OC4_SetConfig+0x84>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a15      	ldr	r2, [pc, #84]	; (8004a54 <TIM_OC4_SetConfig+0xcc>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d003      	beq.n	8004a0c <TIM_OC4_SetConfig+0x84>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a14      	ldr	r2, [pc, #80]	; (8004a58 <TIM_OC4_SetConfig+0xd0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d109      	bne.n	8004a20 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	019b      	lsls	r3, r3, #6
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	621a      	str	r2, [r3, #32]
}
 8004a3a:	bf00      	nop
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	40012c00 	.word	0x40012c00
 8004a4c:	40013400 	.word	0x40013400
 8004a50:	40014000 	.word	0x40014000
 8004a54:	40014400 	.word	0x40014400
 8004a58:	40014800 	.word	0x40014800

08004a5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004aa0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	041b      	lsls	r3, r3, #16
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a17      	ldr	r2, [pc, #92]	; (8004b10 <TIM_OC5_SetConfig+0xb4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00f      	beq.n	8004ad6 <TIM_OC5_SetConfig+0x7a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a16      	ldr	r2, [pc, #88]	; (8004b14 <TIM_OC5_SetConfig+0xb8>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00b      	beq.n	8004ad6 <TIM_OC5_SetConfig+0x7a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a15      	ldr	r2, [pc, #84]	; (8004b18 <TIM_OC5_SetConfig+0xbc>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d007      	beq.n	8004ad6 <TIM_OC5_SetConfig+0x7a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a14      	ldr	r2, [pc, #80]	; (8004b1c <TIM_OC5_SetConfig+0xc0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d003      	beq.n	8004ad6 <TIM_OC5_SetConfig+0x7a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a13      	ldr	r2, [pc, #76]	; (8004b20 <TIM_OC5_SetConfig+0xc4>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d109      	bne.n	8004aea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004adc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	621a      	str	r2, [r3, #32]
}
 8004b04:	bf00      	nop
 8004b06:	371c      	adds	r7, #28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	40012c00 	.word	0x40012c00
 8004b14:	40013400 	.word	0x40013400
 8004b18:	40014000 	.word	0x40014000
 8004b1c:	40014400 	.word	0x40014400
 8004b20:	40014800 	.word	0x40014800

08004b24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	021b      	lsls	r3, r3, #8
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	051b      	lsls	r3, r3, #20
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a18      	ldr	r2, [pc, #96]	; (8004bdc <TIM_OC6_SetConfig+0xb8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00f      	beq.n	8004ba0 <TIM_OC6_SetConfig+0x7c>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a17      	ldr	r2, [pc, #92]	; (8004be0 <TIM_OC6_SetConfig+0xbc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00b      	beq.n	8004ba0 <TIM_OC6_SetConfig+0x7c>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a16      	ldr	r2, [pc, #88]	; (8004be4 <TIM_OC6_SetConfig+0xc0>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d007      	beq.n	8004ba0 <TIM_OC6_SetConfig+0x7c>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a15      	ldr	r2, [pc, #84]	; (8004be8 <TIM_OC6_SetConfig+0xc4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d003      	beq.n	8004ba0 <TIM_OC6_SetConfig+0x7c>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a14      	ldr	r2, [pc, #80]	; (8004bec <TIM_OC6_SetConfig+0xc8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d109      	bne.n	8004bb4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	029b      	lsls	r3, r3, #10
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	621a      	str	r2, [r3, #32]
}
 8004bce:	bf00      	nop
 8004bd0:	371c      	adds	r7, #28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	40012c00 	.word	0x40012c00
 8004be0:	40013400 	.word	0x40013400
 8004be4:	40014000 	.word	0x40014000
 8004be8:	40014400 	.word	0x40014400
 8004bec:	40014800 	.word	0x40014800

08004bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f023 0201 	bic.w	r2, r3, #1
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f023 030a 	bic.w	r3, r3, #10
 8004c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	621a      	str	r2, [r3, #32]
}
 8004c42:	bf00      	nop
 8004c44:	371c      	adds	r7, #28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b087      	sub	sp, #28
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	f023 0210 	bic.w	r2, r3, #16
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	031b      	lsls	r3, r3, #12
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	621a      	str	r2, [r3, #32]
}
 8004ca2:	bf00      	nop
 8004ca4:	371c      	adds	r7, #28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b085      	sub	sp, #20
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f043 0307 	orr.w	r3, r3, #7
 8004cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	609a      	str	r2, [r3, #8]
}
 8004cd8:	bf00      	nop
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	021a      	lsls	r2, r3, #8
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	609a      	str	r2, [r3, #8]
}
 8004d18:	bf00      	nop
 8004d1a:	371c      	adds	r7, #28
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f003 031f 	and.w	r3, r3, #31
 8004d36:	2201      	movs	r2, #1
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a1a      	ldr	r2, [r3, #32]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	43db      	mvns	r3, r3
 8004d46:	401a      	ands	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a1a      	ldr	r2, [r3, #32]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f003 031f 	and.w	r3, r3, #31
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	621a      	str	r2, [r3, #32]
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
	...

08004d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e068      	b.n	8004e5a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a2e      	ldr	r2, [pc, #184]	; (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d004      	beq.n	8004dbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a2d      	ldr	r2, [pc, #180]	; (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d108      	bne.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004dc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a1e      	ldr	r2, [pc, #120]	; (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d01d      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfa:	d018      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1b      	ldr	r2, [pc, #108]	; (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d013      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a1a      	ldr	r2, [pc, #104]	; (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00e      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a18      	ldr	r2, [pc, #96]	; (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d009      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a13      	ldr	r2, [pc, #76]	; (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d004      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a14      	ldr	r2, [pc, #80]	; (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d10c      	bne.n	8004e48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40012c00 	.word	0x40012c00
 8004e6c:	40013400 	.word	0x40013400
 8004e70:	40000400 	.word	0x40000400
 8004e74:	40000800 	.word	0x40000800
 8004e78:	40000c00 	.word	0x40000c00
 8004e7c:	40014000 	.word	0x40014000

08004e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e040      	b.n	8004f50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d106      	bne.n	8004ee4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7fc fc0e 	bl	8001700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2224      	movs	r2, #36	; 0x24
 8004ee8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0201 	bic.w	r2, r2, #1
 8004ef8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f8c0 	bl	8005080 <UART_SetConfig>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e022      	b.n	8004f50 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fb6c 	bl	80055f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689a      	ldr	r2, [r3, #8]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fbf3 	bl	8005734 <UART_CheckIdleState>
 8004f4e:	4603      	mov	r3, r0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08a      	sub	sp, #40	; 0x28
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	603b      	str	r3, [r7, #0]
 8004f64:	4613      	mov	r3, r2
 8004f66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f6c:	2b20      	cmp	r3, #32
 8004f6e:	f040 8082 	bne.w	8005076 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <HAL_UART_Transmit+0x26>
 8004f78:	88fb      	ldrh	r3, [r7, #6]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e07a      	b.n	8005078 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d101      	bne.n	8004f90 <HAL_UART_Transmit+0x38>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e073      	b.n	8005078 <HAL_UART_Transmit+0x120>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2221      	movs	r2, #33	; 0x21
 8004fa4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fa6:	f7fc fd8d 	bl	8001ac4 <HAL_GetTick>
 8004faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	88fa      	ldrh	r2, [r7, #6]
 8004fb0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	88fa      	ldrh	r2, [r7, #6]
 8004fb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc4:	d108      	bne.n	8004fd8 <HAL_UART_Transmit+0x80>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d104      	bne.n	8004fd8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	61bb      	str	r3, [r7, #24]
 8004fd6:	e003      	b.n	8004fe0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004fe8:	e02d      	b.n	8005046 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2180      	movs	r1, #128	; 0x80
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 fbe6 	bl	80057c6 <UART_WaitOnFlagUntilTimeout>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e039      	b.n	8005078 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10b      	bne.n	8005022 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	881a      	ldrh	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005016:	b292      	uxth	r2, r2
 8005018:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	3302      	adds	r3, #2
 800501e:	61bb      	str	r3, [r7, #24]
 8005020:	e008      	b.n	8005034 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	781a      	ldrb	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	b292      	uxth	r2, r2
 800502c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	3301      	adds	r3, #1
 8005032:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1cb      	bne.n	8004fea <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2200      	movs	r2, #0
 800505a:	2140      	movs	r1, #64	; 0x40
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 fbb2 	bl	80057c6 <UART_WaitOnFlagUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e005      	b.n	8005078 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2220      	movs	r2, #32
 8005070:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	e000      	b.n	8005078 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005076:	2302      	movs	r3, #2
  }
}
 8005078:	4618      	mov	r0, r3
 800507a:	3720      	adds	r7, #32
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005084:	b08a      	sub	sp, #40	; 0x28
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	431a      	orrs	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	431a      	orrs	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4ba4      	ldr	r3, [pc, #656]	; (8005340 <UART_SetConfig+0x2c0>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	6812      	ldr	r2, [r2, #0]
 80050b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050b8:	430b      	orrs	r3, r1
 80050ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a99      	ldr	r2, [pc, #612]	; (8005344 <UART_SetConfig+0x2c4>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d004      	beq.n	80050ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e8:	4313      	orrs	r3, r2
 80050ea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fc:	430a      	orrs	r2, r1
 80050fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a90      	ldr	r2, [pc, #576]	; (8005348 <UART_SetConfig+0x2c8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d126      	bne.n	8005158 <UART_SetConfig+0xd8>
 800510a:	4b90      	ldr	r3, [pc, #576]	; (800534c <UART_SetConfig+0x2cc>)
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	2b03      	cmp	r3, #3
 8005116:	d81b      	bhi.n	8005150 <UART_SetConfig+0xd0>
 8005118:	a201      	add	r2, pc, #4	; (adr r2, 8005120 <UART_SetConfig+0xa0>)
 800511a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511e:	bf00      	nop
 8005120:	08005131 	.word	0x08005131
 8005124:	08005141 	.word	0x08005141
 8005128:	08005139 	.word	0x08005139
 800512c:	08005149 	.word	0x08005149
 8005130:	2301      	movs	r3, #1
 8005132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005136:	e116      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005138:	2302      	movs	r3, #2
 800513a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800513e:	e112      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005140:	2304      	movs	r3, #4
 8005142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005146:	e10e      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005148:	2308      	movs	r3, #8
 800514a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800514e:	e10a      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005150:	2310      	movs	r3, #16
 8005152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005156:	e106      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a7c      	ldr	r2, [pc, #496]	; (8005350 <UART_SetConfig+0x2d0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d138      	bne.n	80051d4 <UART_SetConfig+0x154>
 8005162:	4b7a      	ldr	r3, [pc, #488]	; (800534c <UART_SetConfig+0x2cc>)
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005168:	f003 030c 	and.w	r3, r3, #12
 800516c:	2b0c      	cmp	r3, #12
 800516e:	d82d      	bhi.n	80051cc <UART_SetConfig+0x14c>
 8005170:	a201      	add	r2, pc, #4	; (adr r2, 8005178 <UART_SetConfig+0xf8>)
 8005172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005176:	bf00      	nop
 8005178:	080051ad 	.word	0x080051ad
 800517c:	080051cd 	.word	0x080051cd
 8005180:	080051cd 	.word	0x080051cd
 8005184:	080051cd 	.word	0x080051cd
 8005188:	080051bd 	.word	0x080051bd
 800518c:	080051cd 	.word	0x080051cd
 8005190:	080051cd 	.word	0x080051cd
 8005194:	080051cd 	.word	0x080051cd
 8005198:	080051b5 	.word	0x080051b5
 800519c:	080051cd 	.word	0x080051cd
 80051a0:	080051cd 	.word	0x080051cd
 80051a4:	080051cd 	.word	0x080051cd
 80051a8:	080051c5 	.word	0x080051c5
 80051ac:	2300      	movs	r3, #0
 80051ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b2:	e0d8      	b.n	8005366 <UART_SetConfig+0x2e6>
 80051b4:	2302      	movs	r3, #2
 80051b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ba:	e0d4      	b.n	8005366 <UART_SetConfig+0x2e6>
 80051bc:	2304      	movs	r3, #4
 80051be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c2:	e0d0      	b.n	8005366 <UART_SetConfig+0x2e6>
 80051c4:	2308      	movs	r3, #8
 80051c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ca:	e0cc      	b.n	8005366 <UART_SetConfig+0x2e6>
 80051cc:	2310      	movs	r3, #16
 80051ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d2:	e0c8      	b.n	8005366 <UART_SetConfig+0x2e6>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a5e      	ldr	r2, [pc, #376]	; (8005354 <UART_SetConfig+0x2d4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d125      	bne.n	800522a <UART_SetConfig+0x1aa>
 80051de:	4b5b      	ldr	r3, [pc, #364]	; (800534c <UART_SetConfig+0x2cc>)
 80051e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051e8:	2b30      	cmp	r3, #48	; 0x30
 80051ea:	d016      	beq.n	800521a <UART_SetConfig+0x19a>
 80051ec:	2b30      	cmp	r3, #48	; 0x30
 80051ee:	d818      	bhi.n	8005222 <UART_SetConfig+0x1a2>
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	d00a      	beq.n	800520a <UART_SetConfig+0x18a>
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d814      	bhi.n	8005222 <UART_SetConfig+0x1a2>
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <UART_SetConfig+0x182>
 80051fc:	2b10      	cmp	r3, #16
 80051fe:	d008      	beq.n	8005212 <UART_SetConfig+0x192>
 8005200:	e00f      	b.n	8005222 <UART_SetConfig+0x1a2>
 8005202:	2300      	movs	r3, #0
 8005204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005208:	e0ad      	b.n	8005366 <UART_SetConfig+0x2e6>
 800520a:	2302      	movs	r3, #2
 800520c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005210:	e0a9      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005212:	2304      	movs	r3, #4
 8005214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005218:	e0a5      	b.n	8005366 <UART_SetConfig+0x2e6>
 800521a:	2308      	movs	r3, #8
 800521c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005220:	e0a1      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005222:	2310      	movs	r3, #16
 8005224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005228:	e09d      	b.n	8005366 <UART_SetConfig+0x2e6>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a4a      	ldr	r2, [pc, #296]	; (8005358 <UART_SetConfig+0x2d8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d125      	bne.n	8005280 <UART_SetConfig+0x200>
 8005234:	4b45      	ldr	r3, [pc, #276]	; (800534c <UART_SetConfig+0x2cc>)
 8005236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800523e:	2bc0      	cmp	r3, #192	; 0xc0
 8005240:	d016      	beq.n	8005270 <UART_SetConfig+0x1f0>
 8005242:	2bc0      	cmp	r3, #192	; 0xc0
 8005244:	d818      	bhi.n	8005278 <UART_SetConfig+0x1f8>
 8005246:	2b80      	cmp	r3, #128	; 0x80
 8005248:	d00a      	beq.n	8005260 <UART_SetConfig+0x1e0>
 800524a:	2b80      	cmp	r3, #128	; 0x80
 800524c:	d814      	bhi.n	8005278 <UART_SetConfig+0x1f8>
 800524e:	2b00      	cmp	r3, #0
 8005250:	d002      	beq.n	8005258 <UART_SetConfig+0x1d8>
 8005252:	2b40      	cmp	r3, #64	; 0x40
 8005254:	d008      	beq.n	8005268 <UART_SetConfig+0x1e8>
 8005256:	e00f      	b.n	8005278 <UART_SetConfig+0x1f8>
 8005258:	2300      	movs	r3, #0
 800525a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800525e:	e082      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005260:	2302      	movs	r3, #2
 8005262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005266:	e07e      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005268:	2304      	movs	r3, #4
 800526a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800526e:	e07a      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005270:	2308      	movs	r3, #8
 8005272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005276:	e076      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005278:	2310      	movs	r3, #16
 800527a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527e:	e072      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a35      	ldr	r2, [pc, #212]	; (800535c <UART_SetConfig+0x2dc>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d12a      	bne.n	80052e0 <UART_SetConfig+0x260>
 800528a:	4b30      	ldr	r3, [pc, #192]	; (800534c <UART_SetConfig+0x2cc>)
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005294:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005298:	d01a      	beq.n	80052d0 <UART_SetConfig+0x250>
 800529a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800529e:	d81b      	bhi.n	80052d8 <UART_SetConfig+0x258>
 80052a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052a4:	d00c      	beq.n	80052c0 <UART_SetConfig+0x240>
 80052a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052aa:	d815      	bhi.n	80052d8 <UART_SetConfig+0x258>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <UART_SetConfig+0x238>
 80052b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052b4:	d008      	beq.n	80052c8 <UART_SetConfig+0x248>
 80052b6:	e00f      	b.n	80052d8 <UART_SetConfig+0x258>
 80052b8:	2300      	movs	r3, #0
 80052ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052be:	e052      	b.n	8005366 <UART_SetConfig+0x2e6>
 80052c0:	2302      	movs	r3, #2
 80052c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052c6:	e04e      	b.n	8005366 <UART_SetConfig+0x2e6>
 80052c8:	2304      	movs	r3, #4
 80052ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ce:	e04a      	b.n	8005366 <UART_SetConfig+0x2e6>
 80052d0:	2308      	movs	r3, #8
 80052d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d6:	e046      	b.n	8005366 <UART_SetConfig+0x2e6>
 80052d8:	2310      	movs	r3, #16
 80052da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052de:	e042      	b.n	8005366 <UART_SetConfig+0x2e6>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a17      	ldr	r2, [pc, #92]	; (8005344 <UART_SetConfig+0x2c4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d13a      	bne.n	8005360 <UART_SetConfig+0x2e0>
 80052ea:	4b18      	ldr	r3, [pc, #96]	; (800534c <UART_SetConfig+0x2cc>)
 80052ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052f8:	d01a      	beq.n	8005330 <UART_SetConfig+0x2b0>
 80052fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052fe:	d81b      	bhi.n	8005338 <UART_SetConfig+0x2b8>
 8005300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005304:	d00c      	beq.n	8005320 <UART_SetConfig+0x2a0>
 8005306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800530a:	d815      	bhi.n	8005338 <UART_SetConfig+0x2b8>
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <UART_SetConfig+0x298>
 8005310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005314:	d008      	beq.n	8005328 <UART_SetConfig+0x2a8>
 8005316:	e00f      	b.n	8005338 <UART_SetConfig+0x2b8>
 8005318:	2300      	movs	r3, #0
 800531a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800531e:	e022      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005320:	2302      	movs	r3, #2
 8005322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005326:	e01e      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005328:	2304      	movs	r3, #4
 800532a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800532e:	e01a      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005330:	2308      	movs	r3, #8
 8005332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005336:	e016      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005338:	2310      	movs	r3, #16
 800533a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800533e:	e012      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005340:	efff69f3 	.word	0xefff69f3
 8005344:	40008000 	.word	0x40008000
 8005348:	40013800 	.word	0x40013800
 800534c:	40021000 	.word	0x40021000
 8005350:	40004400 	.word	0x40004400
 8005354:	40004800 	.word	0x40004800
 8005358:	40004c00 	.word	0x40004c00
 800535c:	40005000 	.word	0x40005000
 8005360:	2310      	movs	r3, #16
 8005362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a9f      	ldr	r2, [pc, #636]	; (80055e8 <UART_SetConfig+0x568>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d17a      	bne.n	8005466 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005370:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005374:	2b08      	cmp	r3, #8
 8005376:	d824      	bhi.n	80053c2 <UART_SetConfig+0x342>
 8005378:	a201      	add	r2, pc, #4	; (adr r2, 8005380 <UART_SetConfig+0x300>)
 800537a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537e:	bf00      	nop
 8005380:	080053a5 	.word	0x080053a5
 8005384:	080053c3 	.word	0x080053c3
 8005388:	080053ad 	.word	0x080053ad
 800538c:	080053c3 	.word	0x080053c3
 8005390:	080053b3 	.word	0x080053b3
 8005394:	080053c3 	.word	0x080053c3
 8005398:	080053c3 	.word	0x080053c3
 800539c:	080053c3 	.word	0x080053c3
 80053a0:	080053bb 	.word	0x080053bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053a4:	f7fd fc9c 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 80053a8:	61f8      	str	r0, [r7, #28]
        break;
 80053aa:	e010      	b.n	80053ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053ac:	4b8f      	ldr	r3, [pc, #572]	; (80055ec <UART_SetConfig+0x56c>)
 80053ae:	61fb      	str	r3, [r7, #28]
        break;
 80053b0:	e00d      	b.n	80053ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053b2:	f7fd fbfd 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 80053b6:	61f8      	str	r0, [r7, #28]
        break;
 80053b8:	e009      	b.n	80053ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053be:	61fb      	str	r3, [r7, #28]
        break;
 80053c0:	e005      	b.n	80053ce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 80fb 	beq.w	80055cc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	4613      	mov	r3, r2
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	4413      	add	r3, r2
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d305      	bcc.n	80053f2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d903      	bls.n	80053fa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053f8:	e0e8      	b.n	80055cc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	2200      	movs	r2, #0
 80053fe:	461c      	mov	r4, r3
 8005400:	4615      	mov	r5, r2
 8005402:	f04f 0200 	mov.w	r2, #0
 8005406:	f04f 0300 	mov.w	r3, #0
 800540a:	022b      	lsls	r3, r5, #8
 800540c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005410:	0222      	lsls	r2, r4, #8
 8005412:	68f9      	ldr	r1, [r7, #12]
 8005414:	6849      	ldr	r1, [r1, #4]
 8005416:	0849      	lsrs	r1, r1, #1
 8005418:	2000      	movs	r0, #0
 800541a:	4688      	mov	r8, r1
 800541c:	4681      	mov	r9, r0
 800541e:	eb12 0a08 	adds.w	sl, r2, r8
 8005422:	eb43 0b09 	adc.w	fp, r3, r9
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	603b      	str	r3, [r7, #0]
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005434:	4650      	mov	r0, sl
 8005436:	4659      	mov	r1, fp
 8005438:	f7fb fbe8 	bl	8000c0c <__aeabi_uldivmod>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4613      	mov	r3, r2
 8005442:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800544a:	d308      	bcc.n	800545e <UART_SetConfig+0x3de>
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005452:	d204      	bcs.n	800545e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	60da      	str	r2, [r3, #12]
 800545c:	e0b6      	b.n	80055cc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005464:	e0b2      	b.n	80055cc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800546e:	d15e      	bne.n	800552e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005470:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005474:	2b08      	cmp	r3, #8
 8005476:	d828      	bhi.n	80054ca <UART_SetConfig+0x44a>
 8005478:	a201      	add	r2, pc, #4	; (adr r2, 8005480 <UART_SetConfig+0x400>)
 800547a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547e:	bf00      	nop
 8005480:	080054a5 	.word	0x080054a5
 8005484:	080054ad 	.word	0x080054ad
 8005488:	080054b5 	.word	0x080054b5
 800548c:	080054cb 	.word	0x080054cb
 8005490:	080054bb 	.word	0x080054bb
 8005494:	080054cb 	.word	0x080054cb
 8005498:	080054cb 	.word	0x080054cb
 800549c:	080054cb 	.word	0x080054cb
 80054a0:	080054c3 	.word	0x080054c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054a4:	f7fd fc1c 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 80054a8:	61f8      	str	r0, [r7, #28]
        break;
 80054aa:	e014      	b.n	80054d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054ac:	f7fd fc2e 	bl	8002d0c <HAL_RCC_GetPCLK2Freq>
 80054b0:	61f8      	str	r0, [r7, #28]
        break;
 80054b2:	e010      	b.n	80054d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054b4:	4b4d      	ldr	r3, [pc, #308]	; (80055ec <UART_SetConfig+0x56c>)
 80054b6:	61fb      	str	r3, [r7, #28]
        break;
 80054b8:	e00d      	b.n	80054d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ba:	f7fd fb79 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 80054be:	61f8      	str	r0, [r7, #28]
        break;
 80054c0:	e009      	b.n	80054d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054c6:	61fb      	str	r3, [r7, #28]
        break;
 80054c8:	e005      	b.n	80054d6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80054d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d077      	beq.n	80055cc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	005a      	lsls	r2, r3, #1
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	085b      	lsrs	r3, r3, #1
 80054e6:	441a      	add	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	2b0f      	cmp	r3, #15
 80054f6:	d916      	bls.n	8005526 <UART_SetConfig+0x4a6>
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054fe:	d212      	bcs.n	8005526 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	b29b      	uxth	r3, r3
 8005504:	f023 030f 	bic.w	r3, r3, #15
 8005508:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	085b      	lsrs	r3, r3, #1
 800550e:	b29b      	uxth	r3, r3
 8005510:	f003 0307 	and.w	r3, r3, #7
 8005514:	b29a      	uxth	r2, r3
 8005516:	8afb      	ldrh	r3, [r7, #22]
 8005518:	4313      	orrs	r3, r2
 800551a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	8afa      	ldrh	r2, [r7, #22]
 8005522:	60da      	str	r2, [r3, #12]
 8005524:	e052      	b.n	80055cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800552c:	e04e      	b.n	80055cc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800552e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005532:	2b08      	cmp	r3, #8
 8005534:	d827      	bhi.n	8005586 <UART_SetConfig+0x506>
 8005536:	a201      	add	r2, pc, #4	; (adr r2, 800553c <UART_SetConfig+0x4bc>)
 8005538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553c:	08005561 	.word	0x08005561
 8005540:	08005569 	.word	0x08005569
 8005544:	08005571 	.word	0x08005571
 8005548:	08005587 	.word	0x08005587
 800554c:	08005577 	.word	0x08005577
 8005550:	08005587 	.word	0x08005587
 8005554:	08005587 	.word	0x08005587
 8005558:	08005587 	.word	0x08005587
 800555c:	0800557f 	.word	0x0800557f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005560:	f7fd fbbe 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 8005564:	61f8      	str	r0, [r7, #28]
        break;
 8005566:	e014      	b.n	8005592 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005568:	f7fd fbd0 	bl	8002d0c <HAL_RCC_GetPCLK2Freq>
 800556c:	61f8      	str	r0, [r7, #28]
        break;
 800556e:	e010      	b.n	8005592 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005570:	4b1e      	ldr	r3, [pc, #120]	; (80055ec <UART_SetConfig+0x56c>)
 8005572:	61fb      	str	r3, [r7, #28]
        break;
 8005574:	e00d      	b.n	8005592 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005576:	f7fd fb1b 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 800557a:	61f8      	str	r0, [r7, #28]
        break;
 800557c:	e009      	b.n	8005592 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800557e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005582:	61fb      	str	r3, [r7, #28]
        break;
 8005584:	e005      	b.n	8005592 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005590:	bf00      	nop
    }

    if (pclk != 0U)
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d019      	beq.n	80055cc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	085a      	lsrs	r2, r3, #1
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	441a      	add	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	2b0f      	cmp	r3, #15
 80055b0:	d909      	bls.n	80055c6 <UART_SetConfig+0x546>
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b8:	d205      	bcs.n	80055c6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	60da      	str	r2, [r3, #12]
 80055c4:	e002      	b.n	80055cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80055d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3728      	adds	r7, #40	; 0x28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055e6:	bf00      	nop
 80055e8:	40008000 	.word	0x40008000
 80055ec:	00f42400 	.word	0x00f42400

080055f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00a      	beq.n	800561a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	f003 0310 	and.w	r3, r3, #16
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	f003 0320 	and.w	r3, r3, #32
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01a      	beq.n	8005706 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ee:	d10a      	bne.n	8005706 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	605a      	str	r2, [r3, #4]
  }
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af02      	add	r7, sp, #8
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005744:	f7fc f9be 	bl	8001ac4 <HAL_GetTick>
 8005748:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0308 	and.w	r3, r3, #8
 8005754:	2b08      	cmp	r3, #8
 8005756:	d10e      	bne.n	8005776 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005758:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f82d 	bl	80057c6 <UART_WaitOnFlagUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e023      	b.n	80057be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b04      	cmp	r3, #4
 8005782:	d10e      	bne.n	80057a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005784:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f817 	bl	80057c6 <UART_WaitOnFlagUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e00d      	b.n	80057be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2220      	movs	r2, #32
 80057a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2220      	movs	r2, #32
 80057ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b09c      	sub	sp, #112	; 0x70
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	603b      	str	r3, [r7, #0]
 80057d2:	4613      	mov	r3, r2
 80057d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d6:	e0a5      	b.n	8005924 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057de:	f000 80a1 	beq.w	8005924 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e2:	f7fc f96f 	bl	8001ac4 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d302      	bcc.n	80057f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80057f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d13e      	bne.n	8005876 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005808:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800580c:	667b      	str	r3, [r7, #100]	; 0x64
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005816:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005818:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800581c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1e6      	bne.n	80057f8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3308      	adds	r3, #8
 8005830:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005834:	e853 3f00 	ldrex	r3, [r3]
 8005838:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800583a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583c:	f023 0301 	bic.w	r3, r3, #1
 8005840:	663b      	str	r3, [r7, #96]	; 0x60
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3308      	adds	r3, #8
 8005848:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800584a:	64ba      	str	r2, [r7, #72]	; 0x48
 800584c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005850:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e5      	bne.n	800582a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2220      	movs	r2, #32
 8005862:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e067      	b.n	8005946 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	d04f      	beq.n	8005924 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800588e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005892:	d147      	bne.n	8005924 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800589c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a6:	e853 3f00 	ldrex	r3, [r3]
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	461a      	mov	r2, r3
 80058ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058bc:	637b      	str	r3, [r7, #52]	; 0x34
 80058be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058c4:	e841 2300 	strex	r3, r2, [r1]
 80058c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e6      	bne.n	800589e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3308      	adds	r3, #8
 80058d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	613b      	str	r3, [r7, #16]
   return(result);
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f023 0301 	bic.w	r3, r3, #1
 80058e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3308      	adds	r3, #8
 80058ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058f0:	623a      	str	r2, [r7, #32]
 80058f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f4:	69f9      	ldr	r1, [r7, #28]
 80058f6:	6a3a      	ldr	r2, [r7, #32]
 80058f8:	e841 2300 	strex	r3, r2, [r1]
 80058fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e5      	bne.n	80058d0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2220      	movs	r2, #32
 8005908:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2220      	movs	r2, #32
 800590e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2220      	movs	r2, #32
 8005914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e010      	b.n	8005946 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	69da      	ldr	r2, [r3, #28]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	4013      	ands	r3, r2
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	429a      	cmp	r2, r3
 8005932:	bf0c      	ite	eq
 8005934:	2301      	moveq	r3, #1
 8005936:	2300      	movne	r3, #0
 8005938:	b2db      	uxtb	r3, r3
 800593a:	461a      	mov	r2, r3
 800593c:	79fb      	ldrb	r3, [r7, #7]
 800593e:	429a      	cmp	r2, r3
 8005940:	f43f af4a 	beq.w	80057d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3770      	adds	r7, #112	; 0x70
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
	...

08005950 <std>:
 8005950:	2300      	movs	r3, #0
 8005952:	b510      	push	{r4, lr}
 8005954:	4604      	mov	r4, r0
 8005956:	e9c0 3300 	strd	r3, r3, [r0]
 800595a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800595e:	6083      	str	r3, [r0, #8]
 8005960:	8181      	strh	r1, [r0, #12]
 8005962:	6643      	str	r3, [r0, #100]	; 0x64
 8005964:	81c2      	strh	r2, [r0, #14]
 8005966:	6183      	str	r3, [r0, #24]
 8005968:	4619      	mov	r1, r3
 800596a:	2208      	movs	r2, #8
 800596c:	305c      	adds	r0, #92	; 0x5c
 800596e:	f000 f9f7 	bl	8005d60 <memset>
 8005972:	4b0d      	ldr	r3, [pc, #52]	; (80059a8 <std+0x58>)
 8005974:	6263      	str	r3, [r4, #36]	; 0x24
 8005976:	4b0d      	ldr	r3, [pc, #52]	; (80059ac <std+0x5c>)
 8005978:	62a3      	str	r3, [r4, #40]	; 0x28
 800597a:	4b0d      	ldr	r3, [pc, #52]	; (80059b0 <std+0x60>)
 800597c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800597e:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <std+0x64>)
 8005980:	6323      	str	r3, [r4, #48]	; 0x30
 8005982:	4b0d      	ldr	r3, [pc, #52]	; (80059b8 <std+0x68>)
 8005984:	6224      	str	r4, [r4, #32]
 8005986:	429c      	cmp	r4, r3
 8005988:	d006      	beq.n	8005998 <std+0x48>
 800598a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800598e:	4294      	cmp	r4, r2
 8005990:	d002      	beq.n	8005998 <std+0x48>
 8005992:	33d0      	adds	r3, #208	; 0xd0
 8005994:	429c      	cmp	r4, r3
 8005996:	d105      	bne.n	80059a4 <std+0x54>
 8005998:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800599c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059a0:	f000 ba56 	b.w	8005e50 <__retarget_lock_init_recursive>
 80059a4:	bd10      	pop	{r4, pc}
 80059a6:	bf00      	nop
 80059a8:	08005bb1 	.word	0x08005bb1
 80059ac:	08005bd3 	.word	0x08005bd3
 80059b0:	08005c0b 	.word	0x08005c0b
 80059b4:	08005c2f 	.word	0x08005c2f
 80059b8:	200001ac 	.word	0x200001ac

080059bc <stdio_exit_handler>:
 80059bc:	4a02      	ldr	r2, [pc, #8]	; (80059c8 <stdio_exit_handler+0xc>)
 80059be:	4903      	ldr	r1, [pc, #12]	; (80059cc <stdio_exit_handler+0x10>)
 80059c0:	4803      	ldr	r0, [pc, #12]	; (80059d0 <stdio_exit_handler+0x14>)
 80059c2:	f000 b869 	b.w	8005a98 <_fwalk_sglue>
 80059c6:	bf00      	nop
 80059c8:	2000000c 	.word	0x2000000c
 80059cc:	080066fd 	.word	0x080066fd
 80059d0:	20000018 	.word	0x20000018

080059d4 <cleanup_stdio>:
 80059d4:	6841      	ldr	r1, [r0, #4]
 80059d6:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <cleanup_stdio+0x34>)
 80059d8:	4299      	cmp	r1, r3
 80059da:	b510      	push	{r4, lr}
 80059dc:	4604      	mov	r4, r0
 80059de:	d001      	beq.n	80059e4 <cleanup_stdio+0x10>
 80059e0:	f000 fe8c 	bl	80066fc <_fflush_r>
 80059e4:	68a1      	ldr	r1, [r4, #8]
 80059e6:	4b09      	ldr	r3, [pc, #36]	; (8005a0c <cleanup_stdio+0x38>)
 80059e8:	4299      	cmp	r1, r3
 80059ea:	d002      	beq.n	80059f2 <cleanup_stdio+0x1e>
 80059ec:	4620      	mov	r0, r4
 80059ee:	f000 fe85 	bl	80066fc <_fflush_r>
 80059f2:	68e1      	ldr	r1, [r4, #12]
 80059f4:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <cleanup_stdio+0x3c>)
 80059f6:	4299      	cmp	r1, r3
 80059f8:	d004      	beq.n	8005a04 <cleanup_stdio+0x30>
 80059fa:	4620      	mov	r0, r4
 80059fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a00:	f000 be7c 	b.w	80066fc <_fflush_r>
 8005a04:	bd10      	pop	{r4, pc}
 8005a06:	bf00      	nop
 8005a08:	200001ac 	.word	0x200001ac
 8005a0c:	20000214 	.word	0x20000214
 8005a10:	2000027c 	.word	0x2000027c

08005a14 <global_stdio_init.part.0>:
 8005a14:	b510      	push	{r4, lr}
 8005a16:	4b0b      	ldr	r3, [pc, #44]	; (8005a44 <global_stdio_init.part.0+0x30>)
 8005a18:	4c0b      	ldr	r4, [pc, #44]	; (8005a48 <global_stdio_init.part.0+0x34>)
 8005a1a:	4a0c      	ldr	r2, [pc, #48]	; (8005a4c <global_stdio_init.part.0+0x38>)
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	4620      	mov	r0, r4
 8005a20:	2200      	movs	r2, #0
 8005a22:	2104      	movs	r1, #4
 8005a24:	f7ff ff94 	bl	8005950 <std>
 8005a28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	2109      	movs	r1, #9
 8005a30:	f7ff ff8e 	bl	8005950 <std>
 8005a34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005a38:	2202      	movs	r2, #2
 8005a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a3e:	2112      	movs	r1, #18
 8005a40:	f7ff bf86 	b.w	8005950 <std>
 8005a44:	200002e4 	.word	0x200002e4
 8005a48:	200001ac 	.word	0x200001ac
 8005a4c:	080059bd 	.word	0x080059bd

08005a50 <__sfp_lock_acquire>:
 8005a50:	4801      	ldr	r0, [pc, #4]	; (8005a58 <__sfp_lock_acquire+0x8>)
 8005a52:	f000 b9fe 	b.w	8005e52 <__retarget_lock_acquire_recursive>
 8005a56:	bf00      	nop
 8005a58:	200002ed 	.word	0x200002ed

08005a5c <__sfp_lock_release>:
 8005a5c:	4801      	ldr	r0, [pc, #4]	; (8005a64 <__sfp_lock_release+0x8>)
 8005a5e:	f000 b9f9 	b.w	8005e54 <__retarget_lock_release_recursive>
 8005a62:	bf00      	nop
 8005a64:	200002ed 	.word	0x200002ed

08005a68 <__sinit>:
 8005a68:	b510      	push	{r4, lr}
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	f7ff fff0 	bl	8005a50 <__sfp_lock_acquire>
 8005a70:	6a23      	ldr	r3, [r4, #32]
 8005a72:	b11b      	cbz	r3, 8005a7c <__sinit+0x14>
 8005a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a78:	f7ff bff0 	b.w	8005a5c <__sfp_lock_release>
 8005a7c:	4b04      	ldr	r3, [pc, #16]	; (8005a90 <__sinit+0x28>)
 8005a7e:	6223      	str	r3, [r4, #32]
 8005a80:	4b04      	ldr	r3, [pc, #16]	; (8005a94 <__sinit+0x2c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1f5      	bne.n	8005a74 <__sinit+0xc>
 8005a88:	f7ff ffc4 	bl	8005a14 <global_stdio_init.part.0>
 8005a8c:	e7f2      	b.n	8005a74 <__sinit+0xc>
 8005a8e:	bf00      	nop
 8005a90:	080059d5 	.word	0x080059d5
 8005a94:	200002e4 	.word	0x200002e4

08005a98 <_fwalk_sglue>:
 8005a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a9c:	4607      	mov	r7, r0
 8005a9e:	4688      	mov	r8, r1
 8005aa0:	4614      	mov	r4, r2
 8005aa2:	2600      	movs	r6, #0
 8005aa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005aa8:	f1b9 0901 	subs.w	r9, r9, #1
 8005aac:	d505      	bpl.n	8005aba <_fwalk_sglue+0x22>
 8005aae:	6824      	ldr	r4, [r4, #0]
 8005ab0:	2c00      	cmp	r4, #0
 8005ab2:	d1f7      	bne.n	8005aa4 <_fwalk_sglue+0xc>
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aba:	89ab      	ldrh	r3, [r5, #12]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d907      	bls.n	8005ad0 <_fwalk_sglue+0x38>
 8005ac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	d003      	beq.n	8005ad0 <_fwalk_sglue+0x38>
 8005ac8:	4629      	mov	r1, r5
 8005aca:	4638      	mov	r0, r7
 8005acc:	47c0      	blx	r8
 8005ace:	4306      	orrs	r6, r0
 8005ad0:	3568      	adds	r5, #104	; 0x68
 8005ad2:	e7e9      	b.n	8005aa8 <_fwalk_sglue+0x10>

08005ad4 <iprintf>:
 8005ad4:	b40f      	push	{r0, r1, r2, r3}
 8005ad6:	b507      	push	{r0, r1, r2, lr}
 8005ad8:	4906      	ldr	r1, [pc, #24]	; (8005af4 <iprintf+0x20>)
 8005ada:	ab04      	add	r3, sp, #16
 8005adc:	6808      	ldr	r0, [r1, #0]
 8005ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ae2:	6881      	ldr	r1, [r0, #8]
 8005ae4:	9301      	str	r3, [sp, #4]
 8005ae6:	f000 fad9 	bl	800609c <_vfiprintf_r>
 8005aea:	b003      	add	sp, #12
 8005aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8005af0:	b004      	add	sp, #16
 8005af2:	4770      	bx	lr
 8005af4:	20000064 	.word	0x20000064

08005af8 <_puts_r>:
 8005af8:	6a03      	ldr	r3, [r0, #32]
 8005afa:	b570      	push	{r4, r5, r6, lr}
 8005afc:	6884      	ldr	r4, [r0, #8]
 8005afe:	4605      	mov	r5, r0
 8005b00:	460e      	mov	r6, r1
 8005b02:	b90b      	cbnz	r3, 8005b08 <_puts_r+0x10>
 8005b04:	f7ff ffb0 	bl	8005a68 <__sinit>
 8005b08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b0a:	07db      	lsls	r3, r3, #31
 8005b0c:	d405      	bmi.n	8005b1a <_puts_r+0x22>
 8005b0e:	89a3      	ldrh	r3, [r4, #12]
 8005b10:	0598      	lsls	r0, r3, #22
 8005b12:	d402      	bmi.n	8005b1a <_puts_r+0x22>
 8005b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b16:	f000 f99c 	bl	8005e52 <__retarget_lock_acquire_recursive>
 8005b1a:	89a3      	ldrh	r3, [r4, #12]
 8005b1c:	0719      	lsls	r1, r3, #28
 8005b1e:	d513      	bpl.n	8005b48 <_puts_r+0x50>
 8005b20:	6923      	ldr	r3, [r4, #16]
 8005b22:	b18b      	cbz	r3, 8005b48 <_puts_r+0x50>
 8005b24:	3e01      	subs	r6, #1
 8005b26:	68a3      	ldr	r3, [r4, #8]
 8005b28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	60a3      	str	r3, [r4, #8]
 8005b30:	b9e9      	cbnz	r1, 8005b6e <_puts_r+0x76>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	da2e      	bge.n	8005b94 <_puts_r+0x9c>
 8005b36:	4622      	mov	r2, r4
 8005b38:	210a      	movs	r1, #10
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	f000 f87b 	bl	8005c36 <__swbuf_r>
 8005b40:	3001      	adds	r0, #1
 8005b42:	d007      	beq.n	8005b54 <_puts_r+0x5c>
 8005b44:	250a      	movs	r5, #10
 8005b46:	e007      	b.n	8005b58 <_puts_r+0x60>
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f000 f8b0 	bl	8005cb0 <__swsetup_r>
 8005b50:	2800      	cmp	r0, #0
 8005b52:	d0e7      	beq.n	8005b24 <_puts_r+0x2c>
 8005b54:	f04f 35ff 	mov.w	r5, #4294967295
 8005b58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b5a:	07da      	lsls	r2, r3, #31
 8005b5c:	d405      	bmi.n	8005b6a <_puts_r+0x72>
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	059b      	lsls	r3, r3, #22
 8005b62:	d402      	bmi.n	8005b6a <_puts_r+0x72>
 8005b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b66:	f000 f975 	bl	8005e54 <__retarget_lock_release_recursive>
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	bd70      	pop	{r4, r5, r6, pc}
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	da04      	bge.n	8005b7c <_puts_r+0x84>
 8005b72:	69a2      	ldr	r2, [r4, #24]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	dc06      	bgt.n	8005b86 <_puts_r+0x8e>
 8005b78:	290a      	cmp	r1, #10
 8005b7a:	d004      	beq.n	8005b86 <_puts_r+0x8e>
 8005b7c:	6823      	ldr	r3, [r4, #0]
 8005b7e:	1c5a      	adds	r2, r3, #1
 8005b80:	6022      	str	r2, [r4, #0]
 8005b82:	7019      	strb	r1, [r3, #0]
 8005b84:	e7cf      	b.n	8005b26 <_puts_r+0x2e>
 8005b86:	4622      	mov	r2, r4
 8005b88:	4628      	mov	r0, r5
 8005b8a:	f000 f854 	bl	8005c36 <__swbuf_r>
 8005b8e:	3001      	adds	r0, #1
 8005b90:	d1c9      	bne.n	8005b26 <_puts_r+0x2e>
 8005b92:	e7df      	b.n	8005b54 <_puts_r+0x5c>
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	250a      	movs	r5, #10
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	6022      	str	r2, [r4, #0]
 8005b9c:	701d      	strb	r5, [r3, #0]
 8005b9e:	e7db      	b.n	8005b58 <_puts_r+0x60>

08005ba0 <puts>:
 8005ba0:	4b02      	ldr	r3, [pc, #8]	; (8005bac <puts+0xc>)
 8005ba2:	4601      	mov	r1, r0
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	f7ff bfa7 	b.w	8005af8 <_puts_r>
 8005baa:	bf00      	nop
 8005bac:	20000064 	.word	0x20000064

08005bb0 <__sread>:
 8005bb0:	b510      	push	{r4, lr}
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb8:	f000 f8fc 	bl	8005db4 <_read_r>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	bfab      	itete	ge
 8005bc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8005bc4:	181b      	addge	r3, r3, r0
 8005bc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005bca:	bfac      	ite	ge
 8005bcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005bce:	81a3      	strhlt	r3, [r4, #12]
 8005bd0:	bd10      	pop	{r4, pc}

08005bd2 <__swrite>:
 8005bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd6:	461f      	mov	r7, r3
 8005bd8:	898b      	ldrh	r3, [r1, #12]
 8005bda:	05db      	lsls	r3, r3, #23
 8005bdc:	4605      	mov	r5, r0
 8005bde:	460c      	mov	r4, r1
 8005be0:	4616      	mov	r6, r2
 8005be2:	d505      	bpl.n	8005bf0 <__swrite+0x1e>
 8005be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be8:	2302      	movs	r3, #2
 8005bea:	2200      	movs	r2, #0
 8005bec:	f000 f8d0 	bl	8005d90 <_lseek_r>
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bfa:	81a3      	strh	r3, [r4, #12]
 8005bfc:	4632      	mov	r2, r6
 8005bfe:	463b      	mov	r3, r7
 8005c00:	4628      	mov	r0, r5
 8005c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c06:	f000 b8e7 	b.w	8005dd8 <_write_r>

08005c0a <__sseek>:
 8005c0a:	b510      	push	{r4, lr}
 8005c0c:	460c      	mov	r4, r1
 8005c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c12:	f000 f8bd 	bl	8005d90 <_lseek_r>
 8005c16:	1c43      	adds	r3, r0, #1
 8005c18:	89a3      	ldrh	r3, [r4, #12]
 8005c1a:	bf15      	itete	ne
 8005c1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c26:	81a3      	strheq	r3, [r4, #12]
 8005c28:	bf18      	it	ne
 8005c2a:	81a3      	strhne	r3, [r4, #12]
 8005c2c:	bd10      	pop	{r4, pc}

08005c2e <__sclose>:
 8005c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c32:	f000 b89d 	b.w	8005d70 <_close_r>

08005c36 <__swbuf_r>:
 8005c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c38:	460e      	mov	r6, r1
 8005c3a:	4614      	mov	r4, r2
 8005c3c:	4605      	mov	r5, r0
 8005c3e:	b118      	cbz	r0, 8005c48 <__swbuf_r+0x12>
 8005c40:	6a03      	ldr	r3, [r0, #32]
 8005c42:	b90b      	cbnz	r3, 8005c48 <__swbuf_r+0x12>
 8005c44:	f7ff ff10 	bl	8005a68 <__sinit>
 8005c48:	69a3      	ldr	r3, [r4, #24]
 8005c4a:	60a3      	str	r3, [r4, #8]
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	071a      	lsls	r2, r3, #28
 8005c50:	d525      	bpl.n	8005c9e <__swbuf_r+0x68>
 8005c52:	6923      	ldr	r3, [r4, #16]
 8005c54:	b31b      	cbz	r3, 8005c9e <__swbuf_r+0x68>
 8005c56:	6823      	ldr	r3, [r4, #0]
 8005c58:	6922      	ldr	r2, [r4, #16]
 8005c5a:	1a98      	subs	r0, r3, r2
 8005c5c:	6963      	ldr	r3, [r4, #20]
 8005c5e:	b2f6      	uxtb	r6, r6
 8005c60:	4283      	cmp	r3, r0
 8005c62:	4637      	mov	r7, r6
 8005c64:	dc04      	bgt.n	8005c70 <__swbuf_r+0x3a>
 8005c66:	4621      	mov	r1, r4
 8005c68:	4628      	mov	r0, r5
 8005c6a:	f000 fd47 	bl	80066fc <_fflush_r>
 8005c6e:	b9e0      	cbnz	r0, 8005caa <__swbuf_r+0x74>
 8005c70:	68a3      	ldr	r3, [r4, #8]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	60a3      	str	r3, [r4, #8]
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	6022      	str	r2, [r4, #0]
 8005c7c:	701e      	strb	r6, [r3, #0]
 8005c7e:	6962      	ldr	r2, [r4, #20]
 8005c80:	1c43      	adds	r3, r0, #1
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d004      	beq.n	8005c90 <__swbuf_r+0x5a>
 8005c86:	89a3      	ldrh	r3, [r4, #12]
 8005c88:	07db      	lsls	r3, r3, #31
 8005c8a:	d506      	bpl.n	8005c9a <__swbuf_r+0x64>
 8005c8c:	2e0a      	cmp	r6, #10
 8005c8e:	d104      	bne.n	8005c9a <__swbuf_r+0x64>
 8005c90:	4621      	mov	r1, r4
 8005c92:	4628      	mov	r0, r5
 8005c94:	f000 fd32 	bl	80066fc <_fflush_r>
 8005c98:	b938      	cbnz	r0, 8005caa <__swbuf_r+0x74>
 8005c9a:	4638      	mov	r0, r7
 8005c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	f000 f805 	bl	8005cb0 <__swsetup_r>
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	d0d5      	beq.n	8005c56 <__swbuf_r+0x20>
 8005caa:	f04f 37ff 	mov.w	r7, #4294967295
 8005cae:	e7f4      	b.n	8005c9a <__swbuf_r+0x64>

08005cb0 <__swsetup_r>:
 8005cb0:	b538      	push	{r3, r4, r5, lr}
 8005cb2:	4b2a      	ldr	r3, [pc, #168]	; (8005d5c <__swsetup_r+0xac>)
 8005cb4:	4605      	mov	r5, r0
 8005cb6:	6818      	ldr	r0, [r3, #0]
 8005cb8:	460c      	mov	r4, r1
 8005cba:	b118      	cbz	r0, 8005cc4 <__swsetup_r+0x14>
 8005cbc:	6a03      	ldr	r3, [r0, #32]
 8005cbe:	b90b      	cbnz	r3, 8005cc4 <__swsetup_r+0x14>
 8005cc0:	f7ff fed2 	bl	8005a68 <__sinit>
 8005cc4:	89a3      	ldrh	r3, [r4, #12]
 8005cc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cca:	0718      	lsls	r0, r3, #28
 8005ccc:	d422      	bmi.n	8005d14 <__swsetup_r+0x64>
 8005cce:	06d9      	lsls	r1, r3, #27
 8005cd0:	d407      	bmi.n	8005ce2 <__swsetup_r+0x32>
 8005cd2:	2309      	movs	r3, #9
 8005cd4:	602b      	str	r3, [r5, #0]
 8005cd6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005cda:	81a3      	strh	r3, [r4, #12]
 8005cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce0:	e034      	b.n	8005d4c <__swsetup_r+0x9c>
 8005ce2:	0758      	lsls	r0, r3, #29
 8005ce4:	d512      	bpl.n	8005d0c <__swsetup_r+0x5c>
 8005ce6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ce8:	b141      	cbz	r1, 8005cfc <__swsetup_r+0x4c>
 8005cea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cee:	4299      	cmp	r1, r3
 8005cf0:	d002      	beq.n	8005cf8 <__swsetup_r+0x48>
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	f000 f8b0 	bl	8005e58 <_free_r>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	6363      	str	r3, [r4, #52]	; 0x34
 8005cfc:	89a3      	ldrh	r3, [r4, #12]
 8005cfe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d02:	81a3      	strh	r3, [r4, #12]
 8005d04:	2300      	movs	r3, #0
 8005d06:	6063      	str	r3, [r4, #4]
 8005d08:	6923      	ldr	r3, [r4, #16]
 8005d0a:	6023      	str	r3, [r4, #0]
 8005d0c:	89a3      	ldrh	r3, [r4, #12]
 8005d0e:	f043 0308 	orr.w	r3, r3, #8
 8005d12:	81a3      	strh	r3, [r4, #12]
 8005d14:	6923      	ldr	r3, [r4, #16]
 8005d16:	b94b      	cbnz	r3, 8005d2c <__swsetup_r+0x7c>
 8005d18:	89a3      	ldrh	r3, [r4, #12]
 8005d1a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d22:	d003      	beq.n	8005d2c <__swsetup_r+0x7c>
 8005d24:	4621      	mov	r1, r4
 8005d26:	4628      	mov	r0, r5
 8005d28:	f000 fd36 	bl	8006798 <__smakebuf_r>
 8005d2c:	89a0      	ldrh	r0, [r4, #12]
 8005d2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d32:	f010 0301 	ands.w	r3, r0, #1
 8005d36:	d00a      	beq.n	8005d4e <__swsetup_r+0x9e>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	60a3      	str	r3, [r4, #8]
 8005d3c:	6963      	ldr	r3, [r4, #20]
 8005d3e:	425b      	negs	r3, r3
 8005d40:	61a3      	str	r3, [r4, #24]
 8005d42:	6923      	ldr	r3, [r4, #16]
 8005d44:	b943      	cbnz	r3, 8005d58 <__swsetup_r+0xa8>
 8005d46:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d4a:	d1c4      	bne.n	8005cd6 <__swsetup_r+0x26>
 8005d4c:	bd38      	pop	{r3, r4, r5, pc}
 8005d4e:	0781      	lsls	r1, r0, #30
 8005d50:	bf58      	it	pl
 8005d52:	6963      	ldrpl	r3, [r4, #20]
 8005d54:	60a3      	str	r3, [r4, #8]
 8005d56:	e7f4      	b.n	8005d42 <__swsetup_r+0x92>
 8005d58:	2000      	movs	r0, #0
 8005d5a:	e7f7      	b.n	8005d4c <__swsetup_r+0x9c>
 8005d5c:	20000064 	.word	0x20000064

08005d60 <memset>:
 8005d60:	4402      	add	r2, r0
 8005d62:	4603      	mov	r3, r0
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d100      	bne.n	8005d6a <memset+0xa>
 8005d68:	4770      	bx	lr
 8005d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d6e:	e7f9      	b.n	8005d64 <memset+0x4>

08005d70 <_close_r>:
 8005d70:	b538      	push	{r3, r4, r5, lr}
 8005d72:	4d06      	ldr	r5, [pc, #24]	; (8005d8c <_close_r+0x1c>)
 8005d74:	2300      	movs	r3, #0
 8005d76:	4604      	mov	r4, r0
 8005d78:	4608      	mov	r0, r1
 8005d7a:	602b      	str	r3, [r5, #0]
 8005d7c:	f7fb fd93 	bl	80018a6 <_close>
 8005d80:	1c43      	adds	r3, r0, #1
 8005d82:	d102      	bne.n	8005d8a <_close_r+0x1a>
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	b103      	cbz	r3, 8005d8a <_close_r+0x1a>
 8005d88:	6023      	str	r3, [r4, #0]
 8005d8a:	bd38      	pop	{r3, r4, r5, pc}
 8005d8c:	200002e8 	.word	0x200002e8

08005d90 <_lseek_r>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	4d07      	ldr	r5, [pc, #28]	; (8005db0 <_lseek_r+0x20>)
 8005d94:	4604      	mov	r4, r0
 8005d96:	4608      	mov	r0, r1
 8005d98:	4611      	mov	r1, r2
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	602a      	str	r2, [r5, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f7fb fda8 	bl	80018f4 <_lseek>
 8005da4:	1c43      	adds	r3, r0, #1
 8005da6:	d102      	bne.n	8005dae <_lseek_r+0x1e>
 8005da8:	682b      	ldr	r3, [r5, #0]
 8005daa:	b103      	cbz	r3, 8005dae <_lseek_r+0x1e>
 8005dac:	6023      	str	r3, [r4, #0]
 8005dae:	bd38      	pop	{r3, r4, r5, pc}
 8005db0:	200002e8 	.word	0x200002e8

08005db4 <_read_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	4d07      	ldr	r5, [pc, #28]	; (8005dd4 <_read_r+0x20>)
 8005db8:	4604      	mov	r4, r0
 8005dba:	4608      	mov	r0, r1
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	602a      	str	r2, [r5, #0]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f7fb fd36 	bl	8001834 <_read>
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	d102      	bne.n	8005dd2 <_read_r+0x1e>
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	b103      	cbz	r3, 8005dd2 <_read_r+0x1e>
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	bd38      	pop	{r3, r4, r5, pc}
 8005dd4:	200002e8 	.word	0x200002e8

08005dd8 <_write_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	4d07      	ldr	r5, [pc, #28]	; (8005df8 <_write_r+0x20>)
 8005ddc:	4604      	mov	r4, r0
 8005dde:	4608      	mov	r0, r1
 8005de0:	4611      	mov	r1, r2
 8005de2:	2200      	movs	r2, #0
 8005de4:	602a      	str	r2, [r5, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	f7fb fd41 	bl	800186e <_write>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d102      	bne.n	8005df6 <_write_r+0x1e>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	b103      	cbz	r3, 8005df6 <_write_r+0x1e>
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
 8005df8:	200002e8 	.word	0x200002e8

08005dfc <__errno>:
 8005dfc:	4b01      	ldr	r3, [pc, #4]	; (8005e04 <__errno+0x8>)
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	20000064 	.word	0x20000064

08005e08 <__libc_init_array>:
 8005e08:	b570      	push	{r4, r5, r6, lr}
 8005e0a:	4d0d      	ldr	r5, [pc, #52]	; (8005e40 <__libc_init_array+0x38>)
 8005e0c:	4c0d      	ldr	r4, [pc, #52]	; (8005e44 <__libc_init_array+0x3c>)
 8005e0e:	1b64      	subs	r4, r4, r5
 8005e10:	10a4      	asrs	r4, r4, #2
 8005e12:	2600      	movs	r6, #0
 8005e14:	42a6      	cmp	r6, r4
 8005e16:	d109      	bne.n	8005e2c <__libc_init_array+0x24>
 8005e18:	4d0b      	ldr	r5, [pc, #44]	; (8005e48 <__libc_init_array+0x40>)
 8005e1a:	4c0c      	ldr	r4, [pc, #48]	; (8005e4c <__libc_init_array+0x44>)
 8005e1c:	f001 ff74 	bl	8007d08 <_init>
 8005e20:	1b64      	subs	r4, r4, r5
 8005e22:	10a4      	asrs	r4, r4, #2
 8005e24:	2600      	movs	r6, #0
 8005e26:	42a6      	cmp	r6, r4
 8005e28:	d105      	bne.n	8005e36 <__libc_init_array+0x2e>
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}
 8005e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e30:	4798      	blx	r3
 8005e32:	3601      	adds	r6, #1
 8005e34:	e7ee      	b.n	8005e14 <__libc_init_array+0xc>
 8005e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e3a:	4798      	blx	r3
 8005e3c:	3601      	adds	r6, #1
 8005e3e:	e7f2      	b.n	8005e26 <__libc_init_array+0x1e>
 8005e40:	08007ff8 	.word	0x08007ff8
 8005e44:	08007ff8 	.word	0x08007ff8
 8005e48:	08007ff8 	.word	0x08007ff8
 8005e4c:	08007ffc 	.word	0x08007ffc

08005e50 <__retarget_lock_init_recursive>:
 8005e50:	4770      	bx	lr

08005e52 <__retarget_lock_acquire_recursive>:
 8005e52:	4770      	bx	lr

08005e54 <__retarget_lock_release_recursive>:
 8005e54:	4770      	bx	lr
	...

08005e58 <_free_r>:
 8005e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e5a:	2900      	cmp	r1, #0
 8005e5c:	d044      	beq.n	8005ee8 <_free_r+0x90>
 8005e5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e62:	9001      	str	r0, [sp, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f1a1 0404 	sub.w	r4, r1, #4
 8005e6a:	bfb8      	it	lt
 8005e6c:	18e4      	addlt	r4, r4, r3
 8005e6e:	f000 f8df 	bl	8006030 <__malloc_lock>
 8005e72:	4a1e      	ldr	r2, [pc, #120]	; (8005eec <_free_r+0x94>)
 8005e74:	9801      	ldr	r0, [sp, #4]
 8005e76:	6813      	ldr	r3, [r2, #0]
 8005e78:	b933      	cbnz	r3, 8005e88 <_free_r+0x30>
 8005e7a:	6063      	str	r3, [r4, #4]
 8005e7c:	6014      	str	r4, [r2, #0]
 8005e7e:	b003      	add	sp, #12
 8005e80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e84:	f000 b8da 	b.w	800603c <__malloc_unlock>
 8005e88:	42a3      	cmp	r3, r4
 8005e8a:	d908      	bls.n	8005e9e <_free_r+0x46>
 8005e8c:	6825      	ldr	r5, [r4, #0]
 8005e8e:	1961      	adds	r1, r4, r5
 8005e90:	428b      	cmp	r3, r1
 8005e92:	bf01      	itttt	eq
 8005e94:	6819      	ldreq	r1, [r3, #0]
 8005e96:	685b      	ldreq	r3, [r3, #4]
 8005e98:	1949      	addeq	r1, r1, r5
 8005e9a:	6021      	streq	r1, [r4, #0]
 8005e9c:	e7ed      	b.n	8005e7a <_free_r+0x22>
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	b10b      	cbz	r3, 8005ea8 <_free_r+0x50>
 8005ea4:	42a3      	cmp	r3, r4
 8005ea6:	d9fa      	bls.n	8005e9e <_free_r+0x46>
 8005ea8:	6811      	ldr	r1, [r2, #0]
 8005eaa:	1855      	adds	r5, r2, r1
 8005eac:	42a5      	cmp	r5, r4
 8005eae:	d10b      	bne.n	8005ec8 <_free_r+0x70>
 8005eb0:	6824      	ldr	r4, [r4, #0]
 8005eb2:	4421      	add	r1, r4
 8005eb4:	1854      	adds	r4, r2, r1
 8005eb6:	42a3      	cmp	r3, r4
 8005eb8:	6011      	str	r1, [r2, #0]
 8005eba:	d1e0      	bne.n	8005e7e <_free_r+0x26>
 8005ebc:	681c      	ldr	r4, [r3, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	6053      	str	r3, [r2, #4]
 8005ec2:	440c      	add	r4, r1
 8005ec4:	6014      	str	r4, [r2, #0]
 8005ec6:	e7da      	b.n	8005e7e <_free_r+0x26>
 8005ec8:	d902      	bls.n	8005ed0 <_free_r+0x78>
 8005eca:	230c      	movs	r3, #12
 8005ecc:	6003      	str	r3, [r0, #0]
 8005ece:	e7d6      	b.n	8005e7e <_free_r+0x26>
 8005ed0:	6825      	ldr	r5, [r4, #0]
 8005ed2:	1961      	adds	r1, r4, r5
 8005ed4:	428b      	cmp	r3, r1
 8005ed6:	bf04      	itt	eq
 8005ed8:	6819      	ldreq	r1, [r3, #0]
 8005eda:	685b      	ldreq	r3, [r3, #4]
 8005edc:	6063      	str	r3, [r4, #4]
 8005ede:	bf04      	itt	eq
 8005ee0:	1949      	addeq	r1, r1, r5
 8005ee2:	6021      	streq	r1, [r4, #0]
 8005ee4:	6054      	str	r4, [r2, #4]
 8005ee6:	e7ca      	b.n	8005e7e <_free_r+0x26>
 8005ee8:	b003      	add	sp, #12
 8005eea:	bd30      	pop	{r4, r5, pc}
 8005eec:	200002f0 	.word	0x200002f0

08005ef0 <sbrk_aligned>:
 8005ef0:	b570      	push	{r4, r5, r6, lr}
 8005ef2:	4e0e      	ldr	r6, [pc, #56]	; (8005f2c <sbrk_aligned+0x3c>)
 8005ef4:	460c      	mov	r4, r1
 8005ef6:	6831      	ldr	r1, [r6, #0]
 8005ef8:	4605      	mov	r5, r0
 8005efa:	b911      	cbnz	r1, 8005f02 <sbrk_aligned+0x12>
 8005efc:	f000 fcaa 	bl	8006854 <_sbrk_r>
 8005f00:	6030      	str	r0, [r6, #0]
 8005f02:	4621      	mov	r1, r4
 8005f04:	4628      	mov	r0, r5
 8005f06:	f000 fca5 	bl	8006854 <_sbrk_r>
 8005f0a:	1c43      	adds	r3, r0, #1
 8005f0c:	d00a      	beq.n	8005f24 <sbrk_aligned+0x34>
 8005f0e:	1cc4      	adds	r4, r0, #3
 8005f10:	f024 0403 	bic.w	r4, r4, #3
 8005f14:	42a0      	cmp	r0, r4
 8005f16:	d007      	beq.n	8005f28 <sbrk_aligned+0x38>
 8005f18:	1a21      	subs	r1, r4, r0
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	f000 fc9a 	bl	8006854 <_sbrk_r>
 8005f20:	3001      	adds	r0, #1
 8005f22:	d101      	bne.n	8005f28 <sbrk_aligned+0x38>
 8005f24:	f04f 34ff 	mov.w	r4, #4294967295
 8005f28:	4620      	mov	r0, r4
 8005f2a:	bd70      	pop	{r4, r5, r6, pc}
 8005f2c:	200002f4 	.word	0x200002f4

08005f30 <_malloc_r>:
 8005f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f34:	1ccd      	adds	r5, r1, #3
 8005f36:	f025 0503 	bic.w	r5, r5, #3
 8005f3a:	3508      	adds	r5, #8
 8005f3c:	2d0c      	cmp	r5, #12
 8005f3e:	bf38      	it	cc
 8005f40:	250c      	movcc	r5, #12
 8005f42:	2d00      	cmp	r5, #0
 8005f44:	4607      	mov	r7, r0
 8005f46:	db01      	blt.n	8005f4c <_malloc_r+0x1c>
 8005f48:	42a9      	cmp	r1, r5
 8005f4a:	d905      	bls.n	8005f58 <_malloc_r+0x28>
 8005f4c:	230c      	movs	r3, #12
 8005f4e:	603b      	str	r3, [r7, #0]
 8005f50:	2600      	movs	r6, #0
 8005f52:	4630      	mov	r0, r6
 8005f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800602c <_malloc_r+0xfc>
 8005f5c:	f000 f868 	bl	8006030 <__malloc_lock>
 8005f60:	f8d8 3000 	ldr.w	r3, [r8]
 8005f64:	461c      	mov	r4, r3
 8005f66:	bb5c      	cbnz	r4, 8005fc0 <_malloc_r+0x90>
 8005f68:	4629      	mov	r1, r5
 8005f6a:	4638      	mov	r0, r7
 8005f6c:	f7ff ffc0 	bl	8005ef0 <sbrk_aligned>
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	4604      	mov	r4, r0
 8005f74:	d155      	bne.n	8006022 <_malloc_r+0xf2>
 8005f76:	f8d8 4000 	ldr.w	r4, [r8]
 8005f7a:	4626      	mov	r6, r4
 8005f7c:	2e00      	cmp	r6, #0
 8005f7e:	d145      	bne.n	800600c <_malloc_r+0xdc>
 8005f80:	2c00      	cmp	r4, #0
 8005f82:	d048      	beq.n	8006016 <_malloc_r+0xe6>
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	4631      	mov	r1, r6
 8005f88:	4638      	mov	r0, r7
 8005f8a:	eb04 0903 	add.w	r9, r4, r3
 8005f8e:	f000 fc61 	bl	8006854 <_sbrk_r>
 8005f92:	4581      	cmp	r9, r0
 8005f94:	d13f      	bne.n	8006016 <_malloc_r+0xe6>
 8005f96:	6821      	ldr	r1, [r4, #0]
 8005f98:	1a6d      	subs	r5, r5, r1
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	4638      	mov	r0, r7
 8005f9e:	f7ff ffa7 	bl	8005ef0 <sbrk_aligned>
 8005fa2:	3001      	adds	r0, #1
 8005fa4:	d037      	beq.n	8006016 <_malloc_r+0xe6>
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	442b      	add	r3, r5
 8005faa:	6023      	str	r3, [r4, #0]
 8005fac:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d038      	beq.n	8006026 <_malloc_r+0xf6>
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	42a2      	cmp	r2, r4
 8005fb8:	d12b      	bne.n	8006012 <_malloc_r+0xe2>
 8005fba:	2200      	movs	r2, #0
 8005fbc:	605a      	str	r2, [r3, #4]
 8005fbe:	e00f      	b.n	8005fe0 <_malloc_r+0xb0>
 8005fc0:	6822      	ldr	r2, [r4, #0]
 8005fc2:	1b52      	subs	r2, r2, r5
 8005fc4:	d41f      	bmi.n	8006006 <_malloc_r+0xd6>
 8005fc6:	2a0b      	cmp	r2, #11
 8005fc8:	d917      	bls.n	8005ffa <_malloc_r+0xca>
 8005fca:	1961      	adds	r1, r4, r5
 8005fcc:	42a3      	cmp	r3, r4
 8005fce:	6025      	str	r5, [r4, #0]
 8005fd0:	bf18      	it	ne
 8005fd2:	6059      	strne	r1, [r3, #4]
 8005fd4:	6863      	ldr	r3, [r4, #4]
 8005fd6:	bf08      	it	eq
 8005fd8:	f8c8 1000 	streq.w	r1, [r8]
 8005fdc:	5162      	str	r2, [r4, r5]
 8005fde:	604b      	str	r3, [r1, #4]
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	f104 060b 	add.w	r6, r4, #11
 8005fe6:	f000 f829 	bl	800603c <__malloc_unlock>
 8005fea:	f026 0607 	bic.w	r6, r6, #7
 8005fee:	1d23      	adds	r3, r4, #4
 8005ff0:	1af2      	subs	r2, r6, r3
 8005ff2:	d0ae      	beq.n	8005f52 <_malloc_r+0x22>
 8005ff4:	1b9b      	subs	r3, r3, r6
 8005ff6:	50a3      	str	r3, [r4, r2]
 8005ff8:	e7ab      	b.n	8005f52 <_malloc_r+0x22>
 8005ffa:	42a3      	cmp	r3, r4
 8005ffc:	6862      	ldr	r2, [r4, #4]
 8005ffe:	d1dd      	bne.n	8005fbc <_malloc_r+0x8c>
 8006000:	f8c8 2000 	str.w	r2, [r8]
 8006004:	e7ec      	b.n	8005fe0 <_malloc_r+0xb0>
 8006006:	4623      	mov	r3, r4
 8006008:	6864      	ldr	r4, [r4, #4]
 800600a:	e7ac      	b.n	8005f66 <_malloc_r+0x36>
 800600c:	4634      	mov	r4, r6
 800600e:	6876      	ldr	r6, [r6, #4]
 8006010:	e7b4      	b.n	8005f7c <_malloc_r+0x4c>
 8006012:	4613      	mov	r3, r2
 8006014:	e7cc      	b.n	8005fb0 <_malloc_r+0x80>
 8006016:	230c      	movs	r3, #12
 8006018:	603b      	str	r3, [r7, #0]
 800601a:	4638      	mov	r0, r7
 800601c:	f000 f80e 	bl	800603c <__malloc_unlock>
 8006020:	e797      	b.n	8005f52 <_malloc_r+0x22>
 8006022:	6025      	str	r5, [r4, #0]
 8006024:	e7dc      	b.n	8005fe0 <_malloc_r+0xb0>
 8006026:	605b      	str	r3, [r3, #4]
 8006028:	deff      	udf	#255	; 0xff
 800602a:	bf00      	nop
 800602c:	200002f0 	.word	0x200002f0

08006030 <__malloc_lock>:
 8006030:	4801      	ldr	r0, [pc, #4]	; (8006038 <__malloc_lock+0x8>)
 8006032:	f7ff bf0e 	b.w	8005e52 <__retarget_lock_acquire_recursive>
 8006036:	bf00      	nop
 8006038:	200002ec 	.word	0x200002ec

0800603c <__malloc_unlock>:
 800603c:	4801      	ldr	r0, [pc, #4]	; (8006044 <__malloc_unlock+0x8>)
 800603e:	f7ff bf09 	b.w	8005e54 <__retarget_lock_release_recursive>
 8006042:	bf00      	nop
 8006044:	200002ec 	.word	0x200002ec

08006048 <__sfputc_r>:
 8006048:	6893      	ldr	r3, [r2, #8]
 800604a:	3b01      	subs	r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	b410      	push	{r4}
 8006050:	6093      	str	r3, [r2, #8]
 8006052:	da08      	bge.n	8006066 <__sfputc_r+0x1e>
 8006054:	6994      	ldr	r4, [r2, #24]
 8006056:	42a3      	cmp	r3, r4
 8006058:	db01      	blt.n	800605e <__sfputc_r+0x16>
 800605a:	290a      	cmp	r1, #10
 800605c:	d103      	bne.n	8006066 <__sfputc_r+0x1e>
 800605e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006062:	f7ff bde8 	b.w	8005c36 <__swbuf_r>
 8006066:	6813      	ldr	r3, [r2, #0]
 8006068:	1c58      	adds	r0, r3, #1
 800606a:	6010      	str	r0, [r2, #0]
 800606c:	7019      	strb	r1, [r3, #0]
 800606e:	4608      	mov	r0, r1
 8006070:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006074:	4770      	bx	lr

08006076 <__sfputs_r>:
 8006076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006078:	4606      	mov	r6, r0
 800607a:	460f      	mov	r7, r1
 800607c:	4614      	mov	r4, r2
 800607e:	18d5      	adds	r5, r2, r3
 8006080:	42ac      	cmp	r4, r5
 8006082:	d101      	bne.n	8006088 <__sfputs_r+0x12>
 8006084:	2000      	movs	r0, #0
 8006086:	e007      	b.n	8006098 <__sfputs_r+0x22>
 8006088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800608c:	463a      	mov	r2, r7
 800608e:	4630      	mov	r0, r6
 8006090:	f7ff ffda 	bl	8006048 <__sfputc_r>
 8006094:	1c43      	adds	r3, r0, #1
 8006096:	d1f3      	bne.n	8006080 <__sfputs_r+0xa>
 8006098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800609c <_vfiprintf_r>:
 800609c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a0:	460d      	mov	r5, r1
 80060a2:	b09d      	sub	sp, #116	; 0x74
 80060a4:	4614      	mov	r4, r2
 80060a6:	4698      	mov	r8, r3
 80060a8:	4606      	mov	r6, r0
 80060aa:	b118      	cbz	r0, 80060b4 <_vfiprintf_r+0x18>
 80060ac:	6a03      	ldr	r3, [r0, #32]
 80060ae:	b90b      	cbnz	r3, 80060b4 <_vfiprintf_r+0x18>
 80060b0:	f7ff fcda 	bl	8005a68 <__sinit>
 80060b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060b6:	07d9      	lsls	r1, r3, #31
 80060b8:	d405      	bmi.n	80060c6 <_vfiprintf_r+0x2a>
 80060ba:	89ab      	ldrh	r3, [r5, #12]
 80060bc:	059a      	lsls	r2, r3, #22
 80060be:	d402      	bmi.n	80060c6 <_vfiprintf_r+0x2a>
 80060c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060c2:	f7ff fec6 	bl	8005e52 <__retarget_lock_acquire_recursive>
 80060c6:	89ab      	ldrh	r3, [r5, #12]
 80060c8:	071b      	lsls	r3, r3, #28
 80060ca:	d501      	bpl.n	80060d0 <_vfiprintf_r+0x34>
 80060cc:	692b      	ldr	r3, [r5, #16]
 80060ce:	b99b      	cbnz	r3, 80060f8 <_vfiprintf_r+0x5c>
 80060d0:	4629      	mov	r1, r5
 80060d2:	4630      	mov	r0, r6
 80060d4:	f7ff fdec 	bl	8005cb0 <__swsetup_r>
 80060d8:	b170      	cbz	r0, 80060f8 <_vfiprintf_r+0x5c>
 80060da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060dc:	07dc      	lsls	r4, r3, #31
 80060de:	d504      	bpl.n	80060ea <_vfiprintf_r+0x4e>
 80060e0:	f04f 30ff 	mov.w	r0, #4294967295
 80060e4:	b01d      	add	sp, #116	; 0x74
 80060e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ea:	89ab      	ldrh	r3, [r5, #12]
 80060ec:	0598      	lsls	r0, r3, #22
 80060ee:	d4f7      	bmi.n	80060e0 <_vfiprintf_r+0x44>
 80060f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060f2:	f7ff feaf 	bl	8005e54 <__retarget_lock_release_recursive>
 80060f6:	e7f3      	b.n	80060e0 <_vfiprintf_r+0x44>
 80060f8:	2300      	movs	r3, #0
 80060fa:	9309      	str	r3, [sp, #36]	; 0x24
 80060fc:	2320      	movs	r3, #32
 80060fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006102:	f8cd 800c 	str.w	r8, [sp, #12]
 8006106:	2330      	movs	r3, #48	; 0x30
 8006108:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80062bc <_vfiprintf_r+0x220>
 800610c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006110:	f04f 0901 	mov.w	r9, #1
 8006114:	4623      	mov	r3, r4
 8006116:	469a      	mov	sl, r3
 8006118:	f813 2b01 	ldrb.w	r2, [r3], #1
 800611c:	b10a      	cbz	r2, 8006122 <_vfiprintf_r+0x86>
 800611e:	2a25      	cmp	r2, #37	; 0x25
 8006120:	d1f9      	bne.n	8006116 <_vfiprintf_r+0x7a>
 8006122:	ebba 0b04 	subs.w	fp, sl, r4
 8006126:	d00b      	beq.n	8006140 <_vfiprintf_r+0xa4>
 8006128:	465b      	mov	r3, fp
 800612a:	4622      	mov	r2, r4
 800612c:	4629      	mov	r1, r5
 800612e:	4630      	mov	r0, r6
 8006130:	f7ff ffa1 	bl	8006076 <__sfputs_r>
 8006134:	3001      	adds	r0, #1
 8006136:	f000 80a9 	beq.w	800628c <_vfiprintf_r+0x1f0>
 800613a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800613c:	445a      	add	r2, fp
 800613e:	9209      	str	r2, [sp, #36]	; 0x24
 8006140:	f89a 3000 	ldrb.w	r3, [sl]
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 80a1 	beq.w	800628c <_vfiprintf_r+0x1f0>
 800614a:	2300      	movs	r3, #0
 800614c:	f04f 32ff 	mov.w	r2, #4294967295
 8006150:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006154:	f10a 0a01 	add.w	sl, sl, #1
 8006158:	9304      	str	r3, [sp, #16]
 800615a:	9307      	str	r3, [sp, #28]
 800615c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006160:	931a      	str	r3, [sp, #104]	; 0x68
 8006162:	4654      	mov	r4, sl
 8006164:	2205      	movs	r2, #5
 8006166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800616a:	4854      	ldr	r0, [pc, #336]	; (80062bc <_vfiprintf_r+0x220>)
 800616c:	f7fa f830 	bl	80001d0 <memchr>
 8006170:	9a04      	ldr	r2, [sp, #16]
 8006172:	b9d8      	cbnz	r0, 80061ac <_vfiprintf_r+0x110>
 8006174:	06d1      	lsls	r1, r2, #27
 8006176:	bf44      	itt	mi
 8006178:	2320      	movmi	r3, #32
 800617a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800617e:	0713      	lsls	r3, r2, #28
 8006180:	bf44      	itt	mi
 8006182:	232b      	movmi	r3, #43	; 0x2b
 8006184:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006188:	f89a 3000 	ldrb.w	r3, [sl]
 800618c:	2b2a      	cmp	r3, #42	; 0x2a
 800618e:	d015      	beq.n	80061bc <_vfiprintf_r+0x120>
 8006190:	9a07      	ldr	r2, [sp, #28]
 8006192:	4654      	mov	r4, sl
 8006194:	2000      	movs	r0, #0
 8006196:	f04f 0c0a 	mov.w	ip, #10
 800619a:	4621      	mov	r1, r4
 800619c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061a0:	3b30      	subs	r3, #48	; 0x30
 80061a2:	2b09      	cmp	r3, #9
 80061a4:	d94d      	bls.n	8006242 <_vfiprintf_r+0x1a6>
 80061a6:	b1b0      	cbz	r0, 80061d6 <_vfiprintf_r+0x13a>
 80061a8:	9207      	str	r2, [sp, #28]
 80061aa:	e014      	b.n	80061d6 <_vfiprintf_r+0x13a>
 80061ac:	eba0 0308 	sub.w	r3, r0, r8
 80061b0:	fa09 f303 	lsl.w	r3, r9, r3
 80061b4:	4313      	orrs	r3, r2
 80061b6:	9304      	str	r3, [sp, #16]
 80061b8:	46a2      	mov	sl, r4
 80061ba:	e7d2      	b.n	8006162 <_vfiprintf_r+0xc6>
 80061bc:	9b03      	ldr	r3, [sp, #12]
 80061be:	1d19      	adds	r1, r3, #4
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	9103      	str	r1, [sp, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	bfbb      	ittet	lt
 80061c8:	425b      	neglt	r3, r3
 80061ca:	f042 0202 	orrlt.w	r2, r2, #2
 80061ce:	9307      	strge	r3, [sp, #28]
 80061d0:	9307      	strlt	r3, [sp, #28]
 80061d2:	bfb8      	it	lt
 80061d4:	9204      	strlt	r2, [sp, #16]
 80061d6:	7823      	ldrb	r3, [r4, #0]
 80061d8:	2b2e      	cmp	r3, #46	; 0x2e
 80061da:	d10c      	bne.n	80061f6 <_vfiprintf_r+0x15a>
 80061dc:	7863      	ldrb	r3, [r4, #1]
 80061de:	2b2a      	cmp	r3, #42	; 0x2a
 80061e0:	d134      	bne.n	800624c <_vfiprintf_r+0x1b0>
 80061e2:	9b03      	ldr	r3, [sp, #12]
 80061e4:	1d1a      	adds	r2, r3, #4
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	9203      	str	r2, [sp, #12]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	bfb8      	it	lt
 80061ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80061f2:	3402      	adds	r4, #2
 80061f4:	9305      	str	r3, [sp, #20]
 80061f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80062cc <_vfiprintf_r+0x230>
 80061fa:	7821      	ldrb	r1, [r4, #0]
 80061fc:	2203      	movs	r2, #3
 80061fe:	4650      	mov	r0, sl
 8006200:	f7f9 ffe6 	bl	80001d0 <memchr>
 8006204:	b138      	cbz	r0, 8006216 <_vfiprintf_r+0x17a>
 8006206:	9b04      	ldr	r3, [sp, #16]
 8006208:	eba0 000a 	sub.w	r0, r0, sl
 800620c:	2240      	movs	r2, #64	; 0x40
 800620e:	4082      	lsls	r2, r0
 8006210:	4313      	orrs	r3, r2
 8006212:	3401      	adds	r4, #1
 8006214:	9304      	str	r3, [sp, #16]
 8006216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800621a:	4829      	ldr	r0, [pc, #164]	; (80062c0 <_vfiprintf_r+0x224>)
 800621c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006220:	2206      	movs	r2, #6
 8006222:	f7f9 ffd5 	bl	80001d0 <memchr>
 8006226:	2800      	cmp	r0, #0
 8006228:	d03f      	beq.n	80062aa <_vfiprintf_r+0x20e>
 800622a:	4b26      	ldr	r3, [pc, #152]	; (80062c4 <_vfiprintf_r+0x228>)
 800622c:	bb1b      	cbnz	r3, 8006276 <_vfiprintf_r+0x1da>
 800622e:	9b03      	ldr	r3, [sp, #12]
 8006230:	3307      	adds	r3, #7
 8006232:	f023 0307 	bic.w	r3, r3, #7
 8006236:	3308      	adds	r3, #8
 8006238:	9303      	str	r3, [sp, #12]
 800623a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800623c:	443b      	add	r3, r7
 800623e:	9309      	str	r3, [sp, #36]	; 0x24
 8006240:	e768      	b.n	8006114 <_vfiprintf_r+0x78>
 8006242:	fb0c 3202 	mla	r2, ip, r2, r3
 8006246:	460c      	mov	r4, r1
 8006248:	2001      	movs	r0, #1
 800624a:	e7a6      	b.n	800619a <_vfiprintf_r+0xfe>
 800624c:	2300      	movs	r3, #0
 800624e:	3401      	adds	r4, #1
 8006250:	9305      	str	r3, [sp, #20]
 8006252:	4619      	mov	r1, r3
 8006254:	f04f 0c0a 	mov.w	ip, #10
 8006258:	4620      	mov	r0, r4
 800625a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800625e:	3a30      	subs	r2, #48	; 0x30
 8006260:	2a09      	cmp	r2, #9
 8006262:	d903      	bls.n	800626c <_vfiprintf_r+0x1d0>
 8006264:	2b00      	cmp	r3, #0
 8006266:	d0c6      	beq.n	80061f6 <_vfiprintf_r+0x15a>
 8006268:	9105      	str	r1, [sp, #20]
 800626a:	e7c4      	b.n	80061f6 <_vfiprintf_r+0x15a>
 800626c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006270:	4604      	mov	r4, r0
 8006272:	2301      	movs	r3, #1
 8006274:	e7f0      	b.n	8006258 <_vfiprintf_r+0x1bc>
 8006276:	ab03      	add	r3, sp, #12
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	462a      	mov	r2, r5
 800627c:	4b12      	ldr	r3, [pc, #72]	; (80062c8 <_vfiprintf_r+0x22c>)
 800627e:	a904      	add	r1, sp, #16
 8006280:	4630      	mov	r0, r6
 8006282:	f3af 8000 	nop.w
 8006286:	4607      	mov	r7, r0
 8006288:	1c78      	adds	r0, r7, #1
 800628a:	d1d6      	bne.n	800623a <_vfiprintf_r+0x19e>
 800628c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800628e:	07d9      	lsls	r1, r3, #31
 8006290:	d405      	bmi.n	800629e <_vfiprintf_r+0x202>
 8006292:	89ab      	ldrh	r3, [r5, #12]
 8006294:	059a      	lsls	r2, r3, #22
 8006296:	d402      	bmi.n	800629e <_vfiprintf_r+0x202>
 8006298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800629a:	f7ff fddb 	bl	8005e54 <__retarget_lock_release_recursive>
 800629e:	89ab      	ldrh	r3, [r5, #12]
 80062a0:	065b      	lsls	r3, r3, #25
 80062a2:	f53f af1d 	bmi.w	80060e0 <_vfiprintf_r+0x44>
 80062a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062a8:	e71c      	b.n	80060e4 <_vfiprintf_r+0x48>
 80062aa:	ab03      	add	r3, sp, #12
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	462a      	mov	r2, r5
 80062b0:	4b05      	ldr	r3, [pc, #20]	; (80062c8 <_vfiprintf_r+0x22c>)
 80062b2:	a904      	add	r1, sp, #16
 80062b4:	4630      	mov	r0, r6
 80062b6:	f000 f879 	bl	80063ac <_printf_i>
 80062ba:	e7e4      	b.n	8006286 <_vfiprintf_r+0x1ea>
 80062bc:	08007db4 	.word	0x08007db4
 80062c0:	08007dbe 	.word	0x08007dbe
 80062c4:	00000000 	.word	0x00000000
 80062c8:	08006077 	.word	0x08006077
 80062cc:	08007dba 	.word	0x08007dba

080062d0 <_printf_common>:
 80062d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062d4:	4616      	mov	r6, r2
 80062d6:	4699      	mov	r9, r3
 80062d8:	688a      	ldr	r2, [r1, #8]
 80062da:	690b      	ldr	r3, [r1, #16]
 80062dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062e0:	4293      	cmp	r3, r2
 80062e2:	bfb8      	it	lt
 80062e4:	4613      	movlt	r3, r2
 80062e6:	6033      	str	r3, [r6, #0]
 80062e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062ec:	4607      	mov	r7, r0
 80062ee:	460c      	mov	r4, r1
 80062f0:	b10a      	cbz	r2, 80062f6 <_printf_common+0x26>
 80062f2:	3301      	adds	r3, #1
 80062f4:	6033      	str	r3, [r6, #0]
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	0699      	lsls	r1, r3, #26
 80062fa:	bf42      	ittt	mi
 80062fc:	6833      	ldrmi	r3, [r6, #0]
 80062fe:	3302      	addmi	r3, #2
 8006300:	6033      	strmi	r3, [r6, #0]
 8006302:	6825      	ldr	r5, [r4, #0]
 8006304:	f015 0506 	ands.w	r5, r5, #6
 8006308:	d106      	bne.n	8006318 <_printf_common+0x48>
 800630a:	f104 0a19 	add.w	sl, r4, #25
 800630e:	68e3      	ldr	r3, [r4, #12]
 8006310:	6832      	ldr	r2, [r6, #0]
 8006312:	1a9b      	subs	r3, r3, r2
 8006314:	42ab      	cmp	r3, r5
 8006316:	dc26      	bgt.n	8006366 <_printf_common+0x96>
 8006318:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800631c:	1e13      	subs	r3, r2, #0
 800631e:	6822      	ldr	r2, [r4, #0]
 8006320:	bf18      	it	ne
 8006322:	2301      	movne	r3, #1
 8006324:	0692      	lsls	r2, r2, #26
 8006326:	d42b      	bmi.n	8006380 <_printf_common+0xb0>
 8006328:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800632c:	4649      	mov	r1, r9
 800632e:	4638      	mov	r0, r7
 8006330:	47c0      	blx	r8
 8006332:	3001      	adds	r0, #1
 8006334:	d01e      	beq.n	8006374 <_printf_common+0xa4>
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	6922      	ldr	r2, [r4, #16]
 800633a:	f003 0306 	and.w	r3, r3, #6
 800633e:	2b04      	cmp	r3, #4
 8006340:	bf02      	ittt	eq
 8006342:	68e5      	ldreq	r5, [r4, #12]
 8006344:	6833      	ldreq	r3, [r6, #0]
 8006346:	1aed      	subeq	r5, r5, r3
 8006348:	68a3      	ldr	r3, [r4, #8]
 800634a:	bf0c      	ite	eq
 800634c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006350:	2500      	movne	r5, #0
 8006352:	4293      	cmp	r3, r2
 8006354:	bfc4      	itt	gt
 8006356:	1a9b      	subgt	r3, r3, r2
 8006358:	18ed      	addgt	r5, r5, r3
 800635a:	2600      	movs	r6, #0
 800635c:	341a      	adds	r4, #26
 800635e:	42b5      	cmp	r5, r6
 8006360:	d11a      	bne.n	8006398 <_printf_common+0xc8>
 8006362:	2000      	movs	r0, #0
 8006364:	e008      	b.n	8006378 <_printf_common+0xa8>
 8006366:	2301      	movs	r3, #1
 8006368:	4652      	mov	r2, sl
 800636a:	4649      	mov	r1, r9
 800636c:	4638      	mov	r0, r7
 800636e:	47c0      	blx	r8
 8006370:	3001      	adds	r0, #1
 8006372:	d103      	bne.n	800637c <_printf_common+0xac>
 8006374:	f04f 30ff 	mov.w	r0, #4294967295
 8006378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637c:	3501      	adds	r5, #1
 800637e:	e7c6      	b.n	800630e <_printf_common+0x3e>
 8006380:	18e1      	adds	r1, r4, r3
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	2030      	movs	r0, #48	; 0x30
 8006386:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800638a:	4422      	add	r2, r4
 800638c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006390:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006394:	3302      	adds	r3, #2
 8006396:	e7c7      	b.n	8006328 <_printf_common+0x58>
 8006398:	2301      	movs	r3, #1
 800639a:	4622      	mov	r2, r4
 800639c:	4649      	mov	r1, r9
 800639e:	4638      	mov	r0, r7
 80063a0:	47c0      	blx	r8
 80063a2:	3001      	adds	r0, #1
 80063a4:	d0e6      	beq.n	8006374 <_printf_common+0xa4>
 80063a6:	3601      	adds	r6, #1
 80063a8:	e7d9      	b.n	800635e <_printf_common+0x8e>
	...

080063ac <_printf_i>:
 80063ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063b0:	7e0f      	ldrb	r7, [r1, #24]
 80063b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063b4:	2f78      	cmp	r7, #120	; 0x78
 80063b6:	4691      	mov	r9, r2
 80063b8:	4680      	mov	r8, r0
 80063ba:	460c      	mov	r4, r1
 80063bc:	469a      	mov	sl, r3
 80063be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063c2:	d807      	bhi.n	80063d4 <_printf_i+0x28>
 80063c4:	2f62      	cmp	r7, #98	; 0x62
 80063c6:	d80a      	bhi.n	80063de <_printf_i+0x32>
 80063c8:	2f00      	cmp	r7, #0
 80063ca:	f000 80d4 	beq.w	8006576 <_printf_i+0x1ca>
 80063ce:	2f58      	cmp	r7, #88	; 0x58
 80063d0:	f000 80c0 	beq.w	8006554 <_printf_i+0x1a8>
 80063d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063dc:	e03a      	b.n	8006454 <_printf_i+0xa8>
 80063de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063e2:	2b15      	cmp	r3, #21
 80063e4:	d8f6      	bhi.n	80063d4 <_printf_i+0x28>
 80063e6:	a101      	add	r1, pc, #4	; (adr r1, 80063ec <_printf_i+0x40>)
 80063e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063ec:	08006445 	.word	0x08006445
 80063f0:	08006459 	.word	0x08006459
 80063f4:	080063d5 	.word	0x080063d5
 80063f8:	080063d5 	.word	0x080063d5
 80063fc:	080063d5 	.word	0x080063d5
 8006400:	080063d5 	.word	0x080063d5
 8006404:	08006459 	.word	0x08006459
 8006408:	080063d5 	.word	0x080063d5
 800640c:	080063d5 	.word	0x080063d5
 8006410:	080063d5 	.word	0x080063d5
 8006414:	080063d5 	.word	0x080063d5
 8006418:	0800655d 	.word	0x0800655d
 800641c:	08006485 	.word	0x08006485
 8006420:	08006517 	.word	0x08006517
 8006424:	080063d5 	.word	0x080063d5
 8006428:	080063d5 	.word	0x080063d5
 800642c:	0800657f 	.word	0x0800657f
 8006430:	080063d5 	.word	0x080063d5
 8006434:	08006485 	.word	0x08006485
 8006438:	080063d5 	.word	0x080063d5
 800643c:	080063d5 	.word	0x080063d5
 8006440:	0800651f 	.word	0x0800651f
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	1d1a      	adds	r2, r3, #4
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	602a      	str	r2, [r5, #0]
 800644c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006450:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006454:	2301      	movs	r3, #1
 8006456:	e09f      	b.n	8006598 <_printf_i+0x1ec>
 8006458:	6820      	ldr	r0, [r4, #0]
 800645a:	682b      	ldr	r3, [r5, #0]
 800645c:	0607      	lsls	r7, r0, #24
 800645e:	f103 0104 	add.w	r1, r3, #4
 8006462:	6029      	str	r1, [r5, #0]
 8006464:	d501      	bpl.n	800646a <_printf_i+0xbe>
 8006466:	681e      	ldr	r6, [r3, #0]
 8006468:	e003      	b.n	8006472 <_printf_i+0xc6>
 800646a:	0646      	lsls	r6, r0, #25
 800646c:	d5fb      	bpl.n	8006466 <_printf_i+0xba>
 800646e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006472:	2e00      	cmp	r6, #0
 8006474:	da03      	bge.n	800647e <_printf_i+0xd2>
 8006476:	232d      	movs	r3, #45	; 0x2d
 8006478:	4276      	negs	r6, r6
 800647a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800647e:	485a      	ldr	r0, [pc, #360]	; (80065e8 <_printf_i+0x23c>)
 8006480:	230a      	movs	r3, #10
 8006482:	e012      	b.n	80064aa <_printf_i+0xfe>
 8006484:	682b      	ldr	r3, [r5, #0]
 8006486:	6820      	ldr	r0, [r4, #0]
 8006488:	1d19      	adds	r1, r3, #4
 800648a:	6029      	str	r1, [r5, #0]
 800648c:	0605      	lsls	r5, r0, #24
 800648e:	d501      	bpl.n	8006494 <_printf_i+0xe8>
 8006490:	681e      	ldr	r6, [r3, #0]
 8006492:	e002      	b.n	800649a <_printf_i+0xee>
 8006494:	0641      	lsls	r1, r0, #25
 8006496:	d5fb      	bpl.n	8006490 <_printf_i+0xe4>
 8006498:	881e      	ldrh	r6, [r3, #0]
 800649a:	4853      	ldr	r0, [pc, #332]	; (80065e8 <_printf_i+0x23c>)
 800649c:	2f6f      	cmp	r7, #111	; 0x6f
 800649e:	bf0c      	ite	eq
 80064a0:	2308      	moveq	r3, #8
 80064a2:	230a      	movne	r3, #10
 80064a4:	2100      	movs	r1, #0
 80064a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064aa:	6865      	ldr	r5, [r4, #4]
 80064ac:	60a5      	str	r5, [r4, #8]
 80064ae:	2d00      	cmp	r5, #0
 80064b0:	bfa2      	ittt	ge
 80064b2:	6821      	ldrge	r1, [r4, #0]
 80064b4:	f021 0104 	bicge.w	r1, r1, #4
 80064b8:	6021      	strge	r1, [r4, #0]
 80064ba:	b90e      	cbnz	r6, 80064c0 <_printf_i+0x114>
 80064bc:	2d00      	cmp	r5, #0
 80064be:	d04b      	beq.n	8006558 <_printf_i+0x1ac>
 80064c0:	4615      	mov	r5, r2
 80064c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80064c6:	fb03 6711 	mls	r7, r3, r1, r6
 80064ca:	5dc7      	ldrb	r7, [r0, r7]
 80064cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064d0:	4637      	mov	r7, r6
 80064d2:	42bb      	cmp	r3, r7
 80064d4:	460e      	mov	r6, r1
 80064d6:	d9f4      	bls.n	80064c2 <_printf_i+0x116>
 80064d8:	2b08      	cmp	r3, #8
 80064da:	d10b      	bne.n	80064f4 <_printf_i+0x148>
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	07de      	lsls	r6, r3, #31
 80064e0:	d508      	bpl.n	80064f4 <_printf_i+0x148>
 80064e2:	6923      	ldr	r3, [r4, #16]
 80064e4:	6861      	ldr	r1, [r4, #4]
 80064e6:	4299      	cmp	r1, r3
 80064e8:	bfde      	ittt	le
 80064ea:	2330      	movle	r3, #48	; 0x30
 80064ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064f4:	1b52      	subs	r2, r2, r5
 80064f6:	6122      	str	r2, [r4, #16]
 80064f8:	f8cd a000 	str.w	sl, [sp]
 80064fc:	464b      	mov	r3, r9
 80064fe:	aa03      	add	r2, sp, #12
 8006500:	4621      	mov	r1, r4
 8006502:	4640      	mov	r0, r8
 8006504:	f7ff fee4 	bl	80062d0 <_printf_common>
 8006508:	3001      	adds	r0, #1
 800650a:	d14a      	bne.n	80065a2 <_printf_i+0x1f6>
 800650c:	f04f 30ff 	mov.w	r0, #4294967295
 8006510:	b004      	add	sp, #16
 8006512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	f043 0320 	orr.w	r3, r3, #32
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	4833      	ldr	r0, [pc, #204]	; (80065ec <_printf_i+0x240>)
 8006520:	2778      	movs	r7, #120	; 0x78
 8006522:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	6829      	ldr	r1, [r5, #0]
 800652a:	061f      	lsls	r7, r3, #24
 800652c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006530:	d402      	bmi.n	8006538 <_printf_i+0x18c>
 8006532:	065f      	lsls	r7, r3, #25
 8006534:	bf48      	it	mi
 8006536:	b2b6      	uxthmi	r6, r6
 8006538:	07df      	lsls	r7, r3, #31
 800653a:	bf48      	it	mi
 800653c:	f043 0320 	orrmi.w	r3, r3, #32
 8006540:	6029      	str	r1, [r5, #0]
 8006542:	bf48      	it	mi
 8006544:	6023      	strmi	r3, [r4, #0]
 8006546:	b91e      	cbnz	r6, 8006550 <_printf_i+0x1a4>
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	f023 0320 	bic.w	r3, r3, #32
 800654e:	6023      	str	r3, [r4, #0]
 8006550:	2310      	movs	r3, #16
 8006552:	e7a7      	b.n	80064a4 <_printf_i+0xf8>
 8006554:	4824      	ldr	r0, [pc, #144]	; (80065e8 <_printf_i+0x23c>)
 8006556:	e7e4      	b.n	8006522 <_printf_i+0x176>
 8006558:	4615      	mov	r5, r2
 800655a:	e7bd      	b.n	80064d8 <_printf_i+0x12c>
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	6826      	ldr	r6, [r4, #0]
 8006560:	6961      	ldr	r1, [r4, #20]
 8006562:	1d18      	adds	r0, r3, #4
 8006564:	6028      	str	r0, [r5, #0]
 8006566:	0635      	lsls	r5, r6, #24
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	d501      	bpl.n	8006570 <_printf_i+0x1c4>
 800656c:	6019      	str	r1, [r3, #0]
 800656e:	e002      	b.n	8006576 <_printf_i+0x1ca>
 8006570:	0670      	lsls	r0, r6, #25
 8006572:	d5fb      	bpl.n	800656c <_printf_i+0x1c0>
 8006574:	8019      	strh	r1, [r3, #0]
 8006576:	2300      	movs	r3, #0
 8006578:	6123      	str	r3, [r4, #16]
 800657a:	4615      	mov	r5, r2
 800657c:	e7bc      	b.n	80064f8 <_printf_i+0x14c>
 800657e:	682b      	ldr	r3, [r5, #0]
 8006580:	1d1a      	adds	r2, r3, #4
 8006582:	602a      	str	r2, [r5, #0]
 8006584:	681d      	ldr	r5, [r3, #0]
 8006586:	6862      	ldr	r2, [r4, #4]
 8006588:	2100      	movs	r1, #0
 800658a:	4628      	mov	r0, r5
 800658c:	f7f9 fe20 	bl	80001d0 <memchr>
 8006590:	b108      	cbz	r0, 8006596 <_printf_i+0x1ea>
 8006592:	1b40      	subs	r0, r0, r5
 8006594:	6060      	str	r0, [r4, #4]
 8006596:	6863      	ldr	r3, [r4, #4]
 8006598:	6123      	str	r3, [r4, #16]
 800659a:	2300      	movs	r3, #0
 800659c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065a0:	e7aa      	b.n	80064f8 <_printf_i+0x14c>
 80065a2:	6923      	ldr	r3, [r4, #16]
 80065a4:	462a      	mov	r2, r5
 80065a6:	4649      	mov	r1, r9
 80065a8:	4640      	mov	r0, r8
 80065aa:	47d0      	blx	sl
 80065ac:	3001      	adds	r0, #1
 80065ae:	d0ad      	beq.n	800650c <_printf_i+0x160>
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	079b      	lsls	r3, r3, #30
 80065b4:	d413      	bmi.n	80065de <_printf_i+0x232>
 80065b6:	68e0      	ldr	r0, [r4, #12]
 80065b8:	9b03      	ldr	r3, [sp, #12]
 80065ba:	4298      	cmp	r0, r3
 80065bc:	bfb8      	it	lt
 80065be:	4618      	movlt	r0, r3
 80065c0:	e7a6      	b.n	8006510 <_printf_i+0x164>
 80065c2:	2301      	movs	r3, #1
 80065c4:	4632      	mov	r2, r6
 80065c6:	4649      	mov	r1, r9
 80065c8:	4640      	mov	r0, r8
 80065ca:	47d0      	blx	sl
 80065cc:	3001      	adds	r0, #1
 80065ce:	d09d      	beq.n	800650c <_printf_i+0x160>
 80065d0:	3501      	adds	r5, #1
 80065d2:	68e3      	ldr	r3, [r4, #12]
 80065d4:	9903      	ldr	r1, [sp, #12]
 80065d6:	1a5b      	subs	r3, r3, r1
 80065d8:	42ab      	cmp	r3, r5
 80065da:	dcf2      	bgt.n	80065c2 <_printf_i+0x216>
 80065dc:	e7eb      	b.n	80065b6 <_printf_i+0x20a>
 80065de:	2500      	movs	r5, #0
 80065e0:	f104 0619 	add.w	r6, r4, #25
 80065e4:	e7f5      	b.n	80065d2 <_printf_i+0x226>
 80065e6:	bf00      	nop
 80065e8:	08007dc5 	.word	0x08007dc5
 80065ec:	08007dd6 	.word	0x08007dd6

080065f0 <__sflush_r>:
 80065f0:	898a      	ldrh	r2, [r1, #12]
 80065f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065f6:	4605      	mov	r5, r0
 80065f8:	0710      	lsls	r0, r2, #28
 80065fa:	460c      	mov	r4, r1
 80065fc:	d458      	bmi.n	80066b0 <__sflush_r+0xc0>
 80065fe:	684b      	ldr	r3, [r1, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	dc05      	bgt.n	8006610 <__sflush_r+0x20>
 8006604:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	dc02      	bgt.n	8006610 <__sflush_r+0x20>
 800660a:	2000      	movs	r0, #0
 800660c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006612:	2e00      	cmp	r6, #0
 8006614:	d0f9      	beq.n	800660a <__sflush_r+0x1a>
 8006616:	2300      	movs	r3, #0
 8006618:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800661c:	682f      	ldr	r7, [r5, #0]
 800661e:	6a21      	ldr	r1, [r4, #32]
 8006620:	602b      	str	r3, [r5, #0]
 8006622:	d032      	beq.n	800668a <__sflush_r+0x9a>
 8006624:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006626:	89a3      	ldrh	r3, [r4, #12]
 8006628:	075a      	lsls	r2, r3, #29
 800662a:	d505      	bpl.n	8006638 <__sflush_r+0x48>
 800662c:	6863      	ldr	r3, [r4, #4]
 800662e:	1ac0      	subs	r0, r0, r3
 8006630:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006632:	b10b      	cbz	r3, 8006638 <__sflush_r+0x48>
 8006634:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006636:	1ac0      	subs	r0, r0, r3
 8006638:	2300      	movs	r3, #0
 800663a:	4602      	mov	r2, r0
 800663c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800663e:	6a21      	ldr	r1, [r4, #32]
 8006640:	4628      	mov	r0, r5
 8006642:	47b0      	blx	r6
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	89a3      	ldrh	r3, [r4, #12]
 8006648:	d106      	bne.n	8006658 <__sflush_r+0x68>
 800664a:	6829      	ldr	r1, [r5, #0]
 800664c:	291d      	cmp	r1, #29
 800664e:	d82b      	bhi.n	80066a8 <__sflush_r+0xb8>
 8006650:	4a29      	ldr	r2, [pc, #164]	; (80066f8 <__sflush_r+0x108>)
 8006652:	410a      	asrs	r2, r1
 8006654:	07d6      	lsls	r6, r2, #31
 8006656:	d427      	bmi.n	80066a8 <__sflush_r+0xb8>
 8006658:	2200      	movs	r2, #0
 800665a:	6062      	str	r2, [r4, #4]
 800665c:	04d9      	lsls	r1, r3, #19
 800665e:	6922      	ldr	r2, [r4, #16]
 8006660:	6022      	str	r2, [r4, #0]
 8006662:	d504      	bpl.n	800666e <__sflush_r+0x7e>
 8006664:	1c42      	adds	r2, r0, #1
 8006666:	d101      	bne.n	800666c <__sflush_r+0x7c>
 8006668:	682b      	ldr	r3, [r5, #0]
 800666a:	b903      	cbnz	r3, 800666e <__sflush_r+0x7e>
 800666c:	6560      	str	r0, [r4, #84]	; 0x54
 800666e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006670:	602f      	str	r7, [r5, #0]
 8006672:	2900      	cmp	r1, #0
 8006674:	d0c9      	beq.n	800660a <__sflush_r+0x1a>
 8006676:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800667a:	4299      	cmp	r1, r3
 800667c:	d002      	beq.n	8006684 <__sflush_r+0x94>
 800667e:	4628      	mov	r0, r5
 8006680:	f7ff fbea 	bl	8005e58 <_free_r>
 8006684:	2000      	movs	r0, #0
 8006686:	6360      	str	r0, [r4, #52]	; 0x34
 8006688:	e7c0      	b.n	800660c <__sflush_r+0x1c>
 800668a:	2301      	movs	r3, #1
 800668c:	4628      	mov	r0, r5
 800668e:	47b0      	blx	r6
 8006690:	1c41      	adds	r1, r0, #1
 8006692:	d1c8      	bne.n	8006626 <__sflush_r+0x36>
 8006694:	682b      	ldr	r3, [r5, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d0c5      	beq.n	8006626 <__sflush_r+0x36>
 800669a:	2b1d      	cmp	r3, #29
 800669c:	d001      	beq.n	80066a2 <__sflush_r+0xb2>
 800669e:	2b16      	cmp	r3, #22
 80066a0:	d101      	bne.n	80066a6 <__sflush_r+0xb6>
 80066a2:	602f      	str	r7, [r5, #0]
 80066a4:	e7b1      	b.n	800660a <__sflush_r+0x1a>
 80066a6:	89a3      	ldrh	r3, [r4, #12]
 80066a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ac:	81a3      	strh	r3, [r4, #12]
 80066ae:	e7ad      	b.n	800660c <__sflush_r+0x1c>
 80066b0:	690f      	ldr	r7, [r1, #16]
 80066b2:	2f00      	cmp	r7, #0
 80066b4:	d0a9      	beq.n	800660a <__sflush_r+0x1a>
 80066b6:	0793      	lsls	r3, r2, #30
 80066b8:	680e      	ldr	r6, [r1, #0]
 80066ba:	bf08      	it	eq
 80066bc:	694b      	ldreq	r3, [r1, #20]
 80066be:	600f      	str	r7, [r1, #0]
 80066c0:	bf18      	it	ne
 80066c2:	2300      	movne	r3, #0
 80066c4:	eba6 0807 	sub.w	r8, r6, r7
 80066c8:	608b      	str	r3, [r1, #8]
 80066ca:	f1b8 0f00 	cmp.w	r8, #0
 80066ce:	dd9c      	ble.n	800660a <__sflush_r+0x1a>
 80066d0:	6a21      	ldr	r1, [r4, #32]
 80066d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066d4:	4643      	mov	r3, r8
 80066d6:	463a      	mov	r2, r7
 80066d8:	4628      	mov	r0, r5
 80066da:	47b0      	blx	r6
 80066dc:	2800      	cmp	r0, #0
 80066de:	dc06      	bgt.n	80066ee <__sflush_r+0xfe>
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e6:	81a3      	strh	r3, [r4, #12]
 80066e8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ec:	e78e      	b.n	800660c <__sflush_r+0x1c>
 80066ee:	4407      	add	r7, r0
 80066f0:	eba8 0800 	sub.w	r8, r8, r0
 80066f4:	e7e9      	b.n	80066ca <__sflush_r+0xda>
 80066f6:	bf00      	nop
 80066f8:	dfbffffe 	.word	0xdfbffffe

080066fc <_fflush_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	690b      	ldr	r3, [r1, #16]
 8006700:	4605      	mov	r5, r0
 8006702:	460c      	mov	r4, r1
 8006704:	b913      	cbnz	r3, 800670c <_fflush_r+0x10>
 8006706:	2500      	movs	r5, #0
 8006708:	4628      	mov	r0, r5
 800670a:	bd38      	pop	{r3, r4, r5, pc}
 800670c:	b118      	cbz	r0, 8006716 <_fflush_r+0x1a>
 800670e:	6a03      	ldr	r3, [r0, #32]
 8006710:	b90b      	cbnz	r3, 8006716 <_fflush_r+0x1a>
 8006712:	f7ff f9a9 	bl	8005a68 <__sinit>
 8006716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0f3      	beq.n	8006706 <_fflush_r+0xa>
 800671e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006720:	07d0      	lsls	r0, r2, #31
 8006722:	d404      	bmi.n	800672e <_fflush_r+0x32>
 8006724:	0599      	lsls	r1, r3, #22
 8006726:	d402      	bmi.n	800672e <_fflush_r+0x32>
 8006728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800672a:	f7ff fb92 	bl	8005e52 <__retarget_lock_acquire_recursive>
 800672e:	4628      	mov	r0, r5
 8006730:	4621      	mov	r1, r4
 8006732:	f7ff ff5d 	bl	80065f0 <__sflush_r>
 8006736:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006738:	07da      	lsls	r2, r3, #31
 800673a:	4605      	mov	r5, r0
 800673c:	d4e4      	bmi.n	8006708 <_fflush_r+0xc>
 800673e:	89a3      	ldrh	r3, [r4, #12]
 8006740:	059b      	lsls	r3, r3, #22
 8006742:	d4e1      	bmi.n	8006708 <_fflush_r+0xc>
 8006744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006746:	f7ff fb85 	bl	8005e54 <__retarget_lock_release_recursive>
 800674a:	e7dd      	b.n	8006708 <_fflush_r+0xc>

0800674c <__swhatbuf_r>:
 800674c:	b570      	push	{r4, r5, r6, lr}
 800674e:	460c      	mov	r4, r1
 8006750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006754:	2900      	cmp	r1, #0
 8006756:	b096      	sub	sp, #88	; 0x58
 8006758:	4615      	mov	r5, r2
 800675a:	461e      	mov	r6, r3
 800675c:	da0d      	bge.n	800677a <__swhatbuf_r+0x2e>
 800675e:	89a3      	ldrh	r3, [r4, #12]
 8006760:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006764:	f04f 0100 	mov.w	r1, #0
 8006768:	bf0c      	ite	eq
 800676a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800676e:	2340      	movne	r3, #64	; 0x40
 8006770:	2000      	movs	r0, #0
 8006772:	6031      	str	r1, [r6, #0]
 8006774:	602b      	str	r3, [r5, #0]
 8006776:	b016      	add	sp, #88	; 0x58
 8006778:	bd70      	pop	{r4, r5, r6, pc}
 800677a:	466a      	mov	r2, sp
 800677c:	f000 f848 	bl	8006810 <_fstat_r>
 8006780:	2800      	cmp	r0, #0
 8006782:	dbec      	blt.n	800675e <__swhatbuf_r+0x12>
 8006784:	9901      	ldr	r1, [sp, #4]
 8006786:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800678a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800678e:	4259      	negs	r1, r3
 8006790:	4159      	adcs	r1, r3
 8006792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006796:	e7eb      	b.n	8006770 <__swhatbuf_r+0x24>

08006798 <__smakebuf_r>:
 8006798:	898b      	ldrh	r3, [r1, #12]
 800679a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800679c:	079d      	lsls	r5, r3, #30
 800679e:	4606      	mov	r6, r0
 80067a0:	460c      	mov	r4, r1
 80067a2:	d507      	bpl.n	80067b4 <__smakebuf_r+0x1c>
 80067a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067a8:	6023      	str	r3, [r4, #0]
 80067aa:	6123      	str	r3, [r4, #16]
 80067ac:	2301      	movs	r3, #1
 80067ae:	6163      	str	r3, [r4, #20]
 80067b0:	b002      	add	sp, #8
 80067b2:	bd70      	pop	{r4, r5, r6, pc}
 80067b4:	ab01      	add	r3, sp, #4
 80067b6:	466a      	mov	r2, sp
 80067b8:	f7ff ffc8 	bl	800674c <__swhatbuf_r>
 80067bc:	9900      	ldr	r1, [sp, #0]
 80067be:	4605      	mov	r5, r0
 80067c0:	4630      	mov	r0, r6
 80067c2:	f7ff fbb5 	bl	8005f30 <_malloc_r>
 80067c6:	b948      	cbnz	r0, 80067dc <__smakebuf_r+0x44>
 80067c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067cc:	059a      	lsls	r2, r3, #22
 80067ce:	d4ef      	bmi.n	80067b0 <__smakebuf_r+0x18>
 80067d0:	f023 0303 	bic.w	r3, r3, #3
 80067d4:	f043 0302 	orr.w	r3, r3, #2
 80067d8:	81a3      	strh	r3, [r4, #12]
 80067da:	e7e3      	b.n	80067a4 <__smakebuf_r+0xc>
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	6020      	str	r0, [r4, #0]
 80067e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067e4:	81a3      	strh	r3, [r4, #12]
 80067e6:	9b00      	ldr	r3, [sp, #0]
 80067e8:	6163      	str	r3, [r4, #20]
 80067ea:	9b01      	ldr	r3, [sp, #4]
 80067ec:	6120      	str	r0, [r4, #16]
 80067ee:	b15b      	cbz	r3, 8006808 <__smakebuf_r+0x70>
 80067f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067f4:	4630      	mov	r0, r6
 80067f6:	f000 f81d 	bl	8006834 <_isatty_r>
 80067fa:	b128      	cbz	r0, 8006808 <__smakebuf_r+0x70>
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	f023 0303 	bic.w	r3, r3, #3
 8006802:	f043 0301 	orr.w	r3, r3, #1
 8006806:	81a3      	strh	r3, [r4, #12]
 8006808:	89a3      	ldrh	r3, [r4, #12]
 800680a:	431d      	orrs	r5, r3
 800680c:	81a5      	strh	r5, [r4, #12]
 800680e:	e7cf      	b.n	80067b0 <__smakebuf_r+0x18>

08006810 <_fstat_r>:
 8006810:	b538      	push	{r3, r4, r5, lr}
 8006812:	4d07      	ldr	r5, [pc, #28]	; (8006830 <_fstat_r+0x20>)
 8006814:	2300      	movs	r3, #0
 8006816:	4604      	mov	r4, r0
 8006818:	4608      	mov	r0, r1
 800681a:	4611      	mov	r1, r2
 800681c:	602b      	str	r3, [r5, #0]
 800681e:	f7fb f84e 	bl	80018be <_fstat>
 8006822:	1c43      	adds	r3, r0, #1
 8006824:	d102      	bne.n	800682c <_fstat_r+0x1c>
 8006826:	682b      	ldr	r3, [r5, #0]
 8006828:	b103      	cbz	r3, 800682c <_fstat_r+0x1c>
 800682a:	6023      	str	r3, [r4, #0]
 800682c:	bd38      	pop	{r3, r4, r5, pc}
 800682e:	bf00      	nop
 8006830:	200002e8 	.word	0x200002e8

08006834 <_isatty_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	4d06      	ldr	r5, [pc, #24]	; (8006850 <_isatty_r+0x1c>)
 8006838:	2300      	movs	r3, #0
 800683a:	4604      	mov	r4, r0
 800683c:	4608      	mov	r0, r1
 800683e:	602b      	str	r3, [r5, #0]
 8006840:	f7fb f84d 	bl	80018de <_isatty>
 8006844:	1c43      	adds	r3, r0, #1
 8006846:	d102      	bne.n	800684e <_isatty_r+0x1a>
 8006848:	682b      	ldr	r3, [r5, #0]
 800684a:	b103      	cbz	r3, 800684e <_isatty_r+0x1a>
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	bd38      	pop	{r3, r4, r5, pc}
 8006850:	200002e8 	.word	0x200002e8

08006854 <_sbrk_r>:
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	4d06      	ldr	r5, [pc, #24]	; (8006870 <_sbrk_r+0x1c>)
 8006858:	2300      	movs	r3, #0
 800685a:	4604      	mov	r4, r0
 800685c:	4608      	mov	r0, r1
 800685e:	602b      	str	r3, [r5, #0]
 8006860:	f7fb f856 	bl	8001910 <_sbrk>
 8006864:	1c43      	adds	r3, r0, #1
 8006866:	d102      	bne.n	800686e <_sbrk_r+0x1a>
 8006868:	682b      	ldr	r3, [r5, #0]
 800686a:	b103      	cbz	r3, 800686e <_sbrk_r+0x1a>
 800686c:	6023      	str	r3, [r4, #0]
 800686e:	bd38      	pop	{r3, r4, r5, pc}
 8006870:	200002e8 	.word	0x200002e8
 8006874:	00000000 	.word	0x00000000

08006878 <exp>:
 8006878:	b538      	push	{r3, r4, r5, lr}
 800687a:	ed2d 8b02 	vpush	{d8}
 800687e:	ec55 4b10 	vmov	r4, r5, d0
 8006882:	f000 fa2d 	bl	8006ce0 <__ieee754_exp>
 8006886:	eeb0 8a40 	vmov.f32	s16, s0
 800688a:	eef0 8a60 	vmov.f32	s17, s1
 800688e:	ec45 4b10 	vmov	d0, r4, r5
 8006892:	f000 f891 	bl	80069b8 <finite>
 8006896:	b168      	cbz	r0, 80068b4 <exp+0x3c>
 8006898:	a317      	add	r3, pc, #92	; (adr r3, 80068f8 <exp+0x80>)
 800689a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689e:	4620      	mov	r0, r4
 80068a0:	4629      	mov	r1, r5
 80068a2:	f7fa f931 	bl	8000b08 <__aeabi_dcmpgt>
 80068a6:	b160      	cbz	r0, 80068c2 <exp+0x4a>
 80068a8:	f7ff faa8 	bl	8005dfc <__errno>
 80068ac:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 80068e8 <exp+0x70>
 80068b0:	2322      	movs	r3, #34	; 0x22
 80068b2:	6003      	str	r3, [r0, #0]
 80068b4:	eeb0 0a48 	vmov.f32	s0, s16
 80068b8:	eef0 0a68 	vmov.f32	s1, s17
 80068bc:	ecbd 8b02 	vpop	{d8}
 80068c0:	bd38      	pop	{r3, r4, r5, pc}
 80068c2:	a30f      	add	r3, pc, #60	; (adr r3, 8006900 <exp+0x88>)
 80068c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c8:	4620      	mov	r0, r4
 80068ca:	4629      	mov	r1, r5
 80068cc:	f7fa f8fe 	bl	8000acc <__aeabi_dcmplt>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d0ef      	beq.n	80068b4 <exp+0x3c>
 80068d4:	f7ff fa92 	bl	8005dfc <__errno>
 80068d8:	2322      	movs	r3, #34	; 0x22
 80068da:	ed9f 8b05 	vldr	d8, [pc, #20]	; 80068f0 <exp+0x78>
 80068de:	6003      	str	r3, [r0, #0]
 80068e0:	e7e8      	b.n	80068b4 <exp+0x3c>
 80068e2:	bf00      	nop
 80068e4:	f3af 8000 	nop.w
 80068e8:	00000000 	.word	0x00000000
 80068ec:	7ff00000 	.word	0x7ff00000
	...
 80068f8:	fefa39ef 	.word	0xfefa39ef
 80068fc:	40862e42 	.word	0x40862e42
 8006900:	d52d3051 	.word	0xd52d3051
 8006904:	c0874910 	.word	0xc0874910

08006908 <sin>:
 8006908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800690a:	ec53 2b10 	vmov	r2, r3, d0
 800690e:	4828      	ldr	r0, [pc, #160]	; (80069b0 <sin+0xa8>)
 8006910:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006914:	4281      	cmp	r1, r0
 8006916:	dc07      	bgt.n	8006928 <sin+0x20>
 8006918:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80069a8 <sin+0xa0>
 800691c:	2000      	movs	r0, #0
 800691e:	b005      	add	sp, #20
 8006920:	f85d eb04 	ldr.w	lr, [sp], #4
 8006924:	f000 b91c 	b.w	8006b60 <__kernel_sin>
 8006928:	4822      	ldr	r0, [pc, #136]	; (80069b4 <sin+0xac>)
 800692a:	4281      	cmp	r1, r0
 800692c:	dd09      	ble.n	8006942 <sin+0x3a>
 800692e:	ee10 0a10 	vmov	r0, s0
 8006932:	4619      	mov	r1, r3
 8006934:	f7f9 fca0 	bl	8000278 <__aeabi_dsub>
 8006938:	ec41 0b10 	vmov	d0, r0, r1
 800693c:	b005      	add	sp, #20
 800693e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006942:	4668      	mov	r0, sp
 8006944:	f000 fb50 	bl	8006fe8 <__ieee754_rem_pio2>
 8006948:	f000 0003 	and.w	r0, r0, #3
 800694c:	2801      	cmp	r0, #1
 800694e:	d00c      	beq.n	800696a <sin+0x62>
 8006950:	2802      	cmp	r0, #2
 8006952:	d011      	beq.n	8006978 <sin+0x70>
 8006954:	b9f0      	cbnz	r0, 8006994 <sin+0x8c>
 8006956:	ed9d 1b02 	vldr	d1, [sp, #8]
 800695a:	ed9d 0b00 	vldr	d0, [sp]
 800695e:	2001      	movs	r0, #1
 8006960:	f000 f8fe 	bl	8006b60 <__kernel_sin>
 8006964:	ec51 0b10 	vmov	r0, r1, d0
 8006968:	e7e6      	b.n	8006938 <sin+0x30>
 800696a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800696e:	ed9d 0b00 	vldr	d0, [sp]
 8006972:	f000 f82d 	bl	80069d0 <__kernel_cos>
 8006976:	e7f5      	b.n	8006964 <sin+0x5c>
 8006978:	ed9d 1b02 	vldr	d1, [sp, #8]
 800697c:	ed9d 0b00 	vldr	d0, [sp]
 8006980:	2001      	movs	r0, #1
 8006982:	f000 f8ed 	bl	8006b60 <__kernel_sin>
 8006986:	ec53 2b10 	vmov	r2, r3, d0
 800698a:	ee10 0a10 	vmov	r0, s0
 800698e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006992:	e7d1      	b.n	8006938 <sin+0x30>
 8006994:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006998:	ed9d 0b00 	vldr	d0, [sp]
 800699c:	f000 f818 	bl	80069d0 <__kernel_cos>
 80069a0:	e7f1      	b.n	8006986 <sin+0x7e>
 80069a2:	bf00      	nop
 80069a4:	f3af 8000 	nop.w
	...
 80069b0:	3fe921fb 	.word	0x3fe921fb
 80069b4:	7fefffff 	.word	0x7fefffff

080069b8 <finite>:
 80069b8:	b082      	sub	sp, #8
 80069ba:	ed8d 0b00 	vstr	d0, [sp]
 80069be:	9801      	ldr	r0, [sp, #4]
 80069c0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80069c4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80069c8:	0fc0      	lsrs	r0, r0, #31
 80069ca:	b002      	add	sp, #8
 80069cc:	4770      	bx	lr
	...

080069d0 <__kernel_cos>:
 80069d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d4:	ec57 6b10 	vmov	r6, r7, d0
 80069d8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80069dc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80069e0:	ed8d 1b00 	vstr	d1, [sp]
 80069e4:	da07      	bge.n	80069f6 <__kernel_cos+0x26>
 80069e6:	ee10 0a10 	vmov	r0, s0
 80069ea:	4639      	mov	r1, r7
 80069ec:	f7fa f896 	bl	8000b1c <__aeabi_d2iz>
 80069f0:	2800      	cmp	r0, #0
 80069f2:	f000 8088 	beq.w	8006b06 <__kernel_cos+0x136>
 80069f6:	4632      	mov	r2, r6
 80069f8:	463b      	mov	r3, r7
 80069fa:	4630      	mov	r0, r6
 80069fc:	4639      	mov	r1, r7
 80069fe:	f7f9 fdf3 	bl	80005e8 <__aeabi_dmul>
 8006a02:	4b51      	ldr	r3, [pc, #324]	; (8006b48 <__kernel_cos+0x178>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	4604      	mov	r4, r0
 8006a08:	460d      	mov	r5, r1
 8006a0a:	f7f9 fded 	bl	80005e8 <__aeabi_dmul>
 8006a0e:	a340      	add	r3, pc, #256	; (adr r3, 8006b10 <__kernel_cos+0x140>)
 8006a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a14:	4682      	mov	sl, r0
 8006a16:	468b      	mov	fp, r1
 8006a18:	4620      	mov	r0, r4
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	f7f9 fde4 	bl	80005e8 <__aeabi_dmul>
 8006a20:	a33d      	add	r3, pc, #244	; (adr r3, 8006b18 <__kernel_cos+0x148>)
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	f7f9 fc29 	bl	800027c <__adddf3>
 8006a2a:	4622      	mov	r2, r4
 8006a2c:	462b      	mov	r3, r5
 8006a2e:	f7f9 fddb 	bl	80005e8 <__aeabi_dmul>
 8006a32:	a33b      	add	r3, pc, #236	; (adr r3, 8006b20 <__kernel_cos+0x150>)
 8006a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a38:	f7f9 fc1e 	bl	8000278 <__aeabi_dsub>
 8006a3c:	4622      	mov	r2, r4
 8006a3e:	462b      	mov	r3, r5
 8006a40:	f7f9 fdd2 	bl	80005e8 <__aeabi_dmul>
 8006a44:	a338      	add	r3, pc, #224	; (adr r3, 8006b28 <__kernel_cos+0x158>)
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	f7f9 fc17 	bl	800027c <__adddf3>
 8006a4e:	4622      	mov	r2, r4
 8006a50:	462b      	mov	r3, r5
 8006a52:	f7f9 fdc9 	bl	80005e8 <__aeabi_dmul>
 8006a56:	a336      	add	r3, pc, #216	; (adr r3, 8006b30 <__kernel_cos+0x160>)
 8006a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5c:	f7f9 fc0c 	bl	8000278 <__aeabi_dsub>
 8006a60:	4622      	mov	r2, r4
 8006a62:	462b      	mov	r3, r5
 8006a64:	f7f9 fdc0 	bl	80005e8 <__aeabi_dmul>
 8006a68:	a333      	add	r3, pc, #204	; (adr r3, 8006b38 <__kernel_cos+0x168>)
 8006a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6e:	f7f9 fc05 	bl	800027c <__adddf3>
 8006a72:	4622      	mov	r2, r4
 8006a74:	462b      	mov	r3, r5
 8006a76:	f7f9 fdb7 	bl	80005e8 <__aeabi_dmul>
 8006a7a:	4622      	mov	r2, r4
 8006a7c:	462b      	mov	r3, r5
 8006a7e:	f7f9 fdb3 	bl	80005e8 <__aeabi_dmul>
 8006a82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a86:	4604      	mov	r4, r0
 8006a88:	460d      	mov	r5, r1
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	4639      	mov	r1, r7
 8006a8e:	f7f9 fdab 	bl	80005e8 <__aeabi_dmul>
 8006a92:	460b      	mov	r3, r1
 8006a94:	4602      	mov	r2, r0
 8006a96:	4629      	mov	r1, r5
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f7f9 fbed 	bl	8000278 <__aeabi_dsub>
 8006a9e:	4b2b      	ldr	r3, [pc, #172]	; (8006b4c <__kernel_cos+0x17c>)
 8006aa0:	4598      	cmp	r8, r3
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	460f      	mov	r7, r1
 8006aa6:	dc10      	bgt.n	8006aca <__kernel_cos+0xfa>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4650      	mov	r0, sl
 8006aae:	4659      	mov	r1, fp
 8006ab0:	f7f9 fbe2 	bl	8000278 <__aeabi_dsub>
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4926      	ldr	r1, [pc, #152]	; (8006b50 <__kernel_cos+0x180>)
 8006ab8:	4602      	mov	r2, r0
 8006aba:	2000      	movs	r0, #0
 8006abc:	f7f9 fbdc 	bl	8000278 <__aeabi_dsub>
 8006ac0:	ec41 0b10 	vmov	d0, r0, r1
 8006ac4:	b003      	add	sp, #12
 8006ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aca:	4b22      	ldr	r3, [pc, #136]	; (8006b54 <__kernel_cos+0x184>)
 8006acc:	4920      	ldr	r1, [pc, #128]	; (8006b50 <__kernel_cos+0x180>)
 8006ace:	4598      	cmp	r8, r3
 8006ad0:	bfcc      	ite	gt
 8006ad2:	4d21      	ldrgt	r5, [pc, #132]	; (8006b58 <__kernel_cos+0x188>)
 8006ad4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006ad8:	2400      	movs	r4, #0
 8006ada:	4622      	mov	r2, r4
 8006adc:	462b      	mov	r3, r5
 8006ade:	2000      	movs	r0, #0
 8006ae0:	f7f9 fbca 	bl	8000278 <__aeabi_dsub>
 8006ae4:	4622      	mov	r2, r4
 8006ae6:	4680      	mov	r8, r0
 8006ae8:	4689      	mov	r9, r1
 8006aea:	462b      	mov	r3, r5
 8006aec:	4650      	mov	r0, sl
 8006aee:	4659      	mov	r1, fp
 8006af0:	f7f9 fbc2 	bl	8000278 <__aeabi_dsub>
 8006af4:	4632      	mov	r2, r6
 8006af6:	463b      	mov	r3, r7
 8006af8:	f7f9 fbbe 	bl	8000278 <__aeabi_dsub>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4640      	mov	r0, r8
 8006b02:	4649      	mov	r1, r9
 8006b04:	e7da      	b.n	8006abc <__kernel_cos+0xec>
 8006b06:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006b40 <__kernel_cos+0x170>
 8006b0a:	e7db      	b.n	8006ac4 <__kernel_cos+0xf4>
 8006b0c:	f3af 8000 	nop.w
 8006b10:	be8838d4 	.word	0xbe8838d4
 8006b14:	bda8fae9 	.word	0xbda8fae9
 8006b18:	bdb4b1c4 	.word	0xbdb4b1c4
 8006b1c:	3e21ee9e 	.word	0x3e21ee9e
 8006b20:	809c52ad 	.word	0x809c52ad
 8006b24:	3e927e4f 	.word	0x3e927e4f
 8006b28:	19cb1590 	.word	0x19cb1590
 8006b2c:	3efa01a0 	.word	0x3efa01a0
 8006b30:	16c15177 	.word	0x16c15177
 8006b34:	3f56c16c 	.word	0x3f56c16c
 8006b38:	5555554c 	.word	0x5555554c
 8006b3c:	3fa55555 	.word	0x3fa55555
 8006b40:	00000000 	.word	0x00000000
 8006b44:	3ff00000 	.word	0x3ff00000
 8006b48:	3fe00000 	.word	0x3fe00000
 8006b4c:	3fd33332 	.word	0x3fd33332
 8006b50:	3ff00000 	.word	0x3ff00000
 8006b54:	3fe90000 	.word	0x3fe90000
 8006b58:	3fd20000 	.word	0x3fd20000
 8006b5c:	00000000 	.word	0x00000000

08006b60 <__kernel_sin>:
 8006b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b64:	ed2d 8b04 	vpush	{d8-d9}
 8006b68:	eeb0 8a41 	vmov.f32	s16, s2
 8006b6c:	eef0 8a61 	vmov.f32	s17, s3
 8006b70:	ec55 4b10 	vmov	r4, r5, d0
 8006b74:	b083      	sub	sp, #12
 8006b76:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006b7a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006b7e:	9001      	str	r0, [sp, #4]
 8006b80:	da06      	bge.n	8006b90 <__kernel_sin+0x30>
 8006b82:	ee10 0a10 	vmov	r0, s0
 8006b86:	4629      	mov	r1, r5
 8006b88:	f7f9 ffc8 	bl	8000b1c <__aeabi_d2iz>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d051      	beq.n	8006c34 <__kernel_sin+0xd4>
 8006b90:	4622      	mov	r2, r4
 8006b92:	462b      	mov	r3, r5
 8006b94:	4620      	mov	r0, r4
 8006b96:	4629      	mov	r1, r5
 8006b98:	f7f9 fd26 	bl	80005e8 <__aeabi_dmul>
 8006b9c:	4682      	mov	sl, r0
 8006b9e:	468b      	mov	fp, r1
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	f7f9 fd1e 	bl	80005e8 <__aeabi_dmul>
 8006bac:	a341      	add	r3, pc, #260	; (adr r3, 8006cb4 <__kernel_sin+0x154>)
 8006bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb2:	4680      	mov	r8, r0
 8006bb4:	4689      	mov	r9, r1
 8006bb6:	4650      	mov	r0, sl
 8006bb8:	4659      	mov	r1, fp
 8006bba:	f7f9 fd15 	bl	80005e8 <__aeabi_dmul>
 8006bbe:	a33f      	add	r3, pc, #252	; (adr r3, 8006cbc <__kernel_sin+0x15c>)
 8006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc4:	f7f9 fb58 	bl	8000278 <__aeabi_dsub>
 8006bc8:	4652      	mov	r2, sl
 8006bca:	465b      	mov	r3, fp
 8006bcc:	f7f9 fd0c 	bl	80005e8 <__aeabi_dmul>
 8006bd0:	a33c      	add	r3, pc, #240	; (adr r3, 8006cc4 <__kernel_sin+0x164>)
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	f7f9 fb51 	bl	800027c <__adddf3>
 8006bda:	4652      	mov	r2, sl
 8006bdc:	465b      	mov	r3, fp
 8006bde:	f7f9 fd03 	bl	80005e8 <__aeabi_dmul>
 8006be2:	a33a      	add	r3, pc, #232	; (adr r3, 8006ccc <__kernel_sin+0x16c>)
 8006be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be8:	f7f9 fb46 	bl	8000278 <__aeabi_dsub>
 8006bec:	4652      	mov	r2, sl
 8006bee:	465b      	mov	r3, fp
 8006bf0:	f7f9 fcfa 	bl	80005e8 <__aeabi_dmul>
 8006bf4:	a337      	add	r3, pc, #220	; (adr r3, 8006cd4 <__kernel_sin+0x174>)
 8006bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfa:	f7f9 fb3f 	bl	800027c <__adddf3>
 8006bfe:	9b01      	ldr	r3, [sp, #4]
 8006c00:	4606      	mov	r6, r0
 8006c02:	460f      	mov	r7, r1
 8006c04:	b9eb      	cbnz	r3, 8006c42 <__kernel_sin+0xe2>
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	4650      	mov	r0, sl
 8006c0c:	4659      	mov	r1, fp
 8006c0e:	f7f9 fceb 	bl	80005e8 <__aeabi_dmul>
 8006c12:	a325      	add	r3, pc, #148	; (adr r3, 8006ca8 <__kernel_sin+0x148>)
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	f7f9 fb2e 	bl	8000278 <__aeabi_dsub>
 8006c1c:	4642      	mov	r2, r8
 8006c1e:	464b      	mov	r3, r9
 8006c20:	f7f9 fce2 	bl	80005e8 <__aeabi_dmul>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	4620      	mov	r0, r4
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	f7f9 fb26 	bl	800027c <__adddf3>
 8006c30:	4604      	mov	r4, r0
 8006c32:	460d      	mov	r5, r1
 8006c34:	ec45 4b10 	vmov	d0, r4, r5
 8006c38:	b003      	add	sp, #12
 8006c3a:	ecbd 8b04 	vpop	{d8-d9}
 8006c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c42:	4b1b      	ldr	r3, [pc, #108]	; (8006cb0 <__kernel_sin+0x150>)
 8006c44:	ec51 0b18 	vmov	r0, r1, d8
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f7f9 fccd 	bl	80005e8 <__aeabi_dmul>
 8006c4e:	4632      	mov	r2, r6
 8006c50:	ec41 0b19 	vmov	d9, r0, r1
 8006c54:	463b      	mov	r3, r7
 8006c56:	4640      	mov	r0, r8
 8006c58:	4649      	mov	r1, r9
 8006c5a:	f7f9 fcc5 	bl	80005e8 <__aeabi_dmul>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	ec51 0b19 	vmov	r0, r1, d9
 8006c66:	f7f9 fb07 	bl	8000278 <__aeabi_dsub>
 8006c6a:	4652      	mov	r2, sl
 8006c6c:	465b      	mov	r3, fp
 8006c6e:	f7f9 fcbb 	bl	80005e8 <__aeabi_dmul>
 8006c72:	ec53 2b18 	vmov	r2, r3, d8
 8006c76:	f7f9 faff 	bl	8000278 <__aeabi_dsub>
 8006c7a:	a30b      	add	r3, pc, #44	; (adr r3, 8006ca8 <__kernel_sin+0x148>)
 8006c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c80:	4606      	mov	r6, r0
 8006c82:	460f      	mov	r7, r1
 8006c84:	4640      	mov	r0, r8
 8006c86:	4649      	mov	r1, r9
 8006c88:	f7f9 fcae 	bl	80005e8 <__aeabi_dmul>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	460b      	mov	r3, r1
 8006c90:	4630      	mov	r0, r6
 8006c92:	4639      	mov	r1, r7
 8006c94:	f7f9 faf2 	bl	800027c <__adddf3>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	f7f9 faea 	bl	8000278 <__aeabi_dsub>
 8006ca4:	e7c4      	b.n	8006c30 <__kernel_sin+0xd0>
 8006ca6:	bf00      	nop
 8006ca8:	55555549 	.word	0x55555549
 8006cac:	3fc55555 	.word	0x3fc55555
 8006cb0:	3fe00000 	.word	0x3fe00000
 8006cb4:	5acfd57c 	.word	0x5acfd57c
 8006cb8:	3de5d93a 	.word	0x3de5d93a
 8006cbc:	8a2b9ceb 	.word	0x8a2b9ceb
 8006cc0:	3e5ae5e6 	.word	0x3e5ae5e6
 8006cc4:	57b1fe7d 	.word	0x57b1fe7d
 8006cc8:	3ec71de3 	.word	0x3ec71de3
 8006ccc:	19c161d5 	.word	0x19c161d5
 8006cd0:	3f2a01a0 	.word	0x3f2a01a0
 8006cd4:	1110f8a6 	.word	0x1110f8a6
 8006cd8:	3f811111 	.word	0x3f811111
 8006cdc:	00000000 	.word	0x00000000

08006ce0 <__ieee754_exp>:
 8006ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ce4:	ec55 4b10 	vmov	r4, r5, d0
 8006ce8:	49b5      	ldr	r1, [pc, #724]	; (8006fc0 <__ieee754_exp+0x2e0>)
 8006cea:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8006cee:	428a      	cmp	r2, r1
 8006cf0:	ed2d 8b04 	vpush	{d8-d9}
 8006cf4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8006cf8:	d93b      	bls.n	8006d72 <__ieee754_exp+0x92>
 8006cfa:	49b2      	ldr	r1, [pc, #712]	; (8006fc4 <__ieee754_exp+0x2e4>)
 8006cfc:	428a      	cmp	r2, r1
 8006cfe:	d916      	bls.n	8006d2e <__ieee754_exp+0x4e>
 8006d00:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006d04:	4323      	orrs	r3, r4
 8006d06:	ee10 2a10 	vmov	r2, s0
 8006d0a:	d007      	beq.n	8006d1c <__ieee754_exp+0x3c>
 8006d0c:	462b      	mov	r3, r5
 8006d0e:	4620      	mov	r0, r4
 8006d10:	4629      	mov	r1, r5
 8006d12:	f7f9 fab3 	bl	800027c <__adddf3>
 8006d16:	4604      	mov	r4, r0
 8006d18:	460d      	mov	r5, r1
 8006d1a:	e002      	b.n	8006d22 <__ieee754_exp+0x42>
 8006d1c:	b10e      	cbz	r6, 8006d22 <__ieee754_exp+0x42>
 8006d1e:	2400      	movs	r4, #0
 8006d20:	2500      	movs	r5, #0
 8006d22:	ecbd 8b04 	vpop	{d8-d9}
 8006d26:	ec45 4b10 	vmov	d0, r4, r5
 8006d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d2e:	a38e      	add	r3, pc, #568	; (adr r3, 8006f68 <__ieee754_exp+0x288>)
 8006d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d34:	ee10 0a10 	vmov	r0, s0
 8006d38:	4629      	mov	r1, r5
 8006d3a:	f7f9 fee5 	bl	8000b08 <__aeabi_dcmpgt>
 8006d3e:	4607      	mov	r7, r0
 8006d40:	b130      	cbz	r0, 8006d50 <__ieee754_exp+0x70>
 8006d42:	ecbd 8b04 	vpop	{d8-d9}
 8006d46:	2000      	movs	r0, #0
 8006d48:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d4c:	f000 bb82 	b.w	8007454 <__math_oflow>
 8006d50:	a387      	add	r3, pc, #540	; (adr r3, 8006f70 <__ieee754_exp+0x290>)
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	4620      	mov	r0, r4
 8006d58:	4629      	mov	r1, r5
 8006d5a:	f7f9 feb7 	bl	8000acc <__aeabi_dcmplt>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	f000 808b 	beq.w	8006e7a <__ieee754_exp+0x19a>
 8006d64:	ecbd 8b04 	vpop	{d8-d9}
 8006d68:	4638      	mov	r0, r7
 8006d6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d6e:	f000 bb68 	b.w	8007442 <__math_uflow>
 8006d72:	4b95      	ldr	r3, [pc, #596]	; (8006fc8 <__ieee754_exp+0x2e8>)
 8006d74:	429a      	cmp	r2, r3
 8006d76:	f240 80ac 	bls.w	8006ed2 <__ieee754_exp+0x1f2>
 8006d7a:	4b94      	ldr	r3, [pc, #592]	; (8006fcc <__ieee754_exp+0x2ec>)
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d87c      	bhi.n	8006e7a <__ieee754_exp+0x19a>
 8006d80:	4b93      	ldr	r3, [pc, #588]	; (8006fd0 <__ieee754_exp+0x2f0>)
 8006d82:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8a:	ee10 0a10 	vmov	r0, s0
 8006d8e:	4629      	mov	r1, r5
 8006d90:	f7f9 fa72 	bl	8000278 <__aeabi_dsub>
 8006d94:	4b8f      	ldr	r3, [pc, #572]	; (8006fd4 <__ieee754_exp+0x2f4>)
 8006d96:	00f7      	lsls	r7, r6, #3
 8006d98:	443b      	add	r3, r7
 8006d9a:	ed93 7b00 	vldr	d7, [r3]
 8006d9e:	f1c6 0a01 	rsb	sl, r6, #1
 8006da2:	4680      	mov	r8, r0
 8006da4:	4689      	mov	r9, r1
 8006da6:	ebaa 0a06 	sub.w	sl, sl, r6
 8006daa:	eeb0 8a47 	vmov.f32	s16, s14
 8006dae:	eef0 8a67 	vmov.f32	s17, s15
 8006db2:	ec53 2b18 	vmov	r2, r3, d8
 8006db6:	4640      	mov	r0, r8
 8006db8:	4649      	mov	r1, r9
 8006dba:	f7f9 fa5d 	bl	8000278 <__aeabi_dsub>
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	460d      	mov	r5, r1
 8006dc2:	4622      	mov	r2, r4
 8006dc4:	462b      	mov	r3, r5
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	4629      	mov	r1, r5
 8006dca:	f7f9 fc0d 	bl	80005e8 <__aeabi_dmul>
 8006dce:	a36a      	add	r3, pc, #424	; (adr r3, 8006f78 <__ieee754_exp+0x298>)
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	4606      	mov	r6, r0
 8006dd6:	460f      	mov	r7, r1
 8006dd8:	f7f9 fc06 	bl	80005e8 <__aeabi_dmul>
 8006ddc:	a368      	add	r3, pc, #416	; (adr r3, 8006f80 <__ieee754_exp+0x2a0>)
 8006dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de2:	f7f9 fa49 	bl	8000278 <__aeabi_dsub>
 8006de6:	4632      	mov	r2, r6
 8006de8:	463b      	mov	r3, r7
 8006dea:	f7f9 fbfd 	bl	80005e8 <__aeabi_dmul>
 8006dee:	a366      	add	r3, pc, #408	; (adr r3, 8006f88 <__ieee754_exp+0x2a8>)
 8006df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df4:	f7f9 fa42 	bl	800027c <__adddf3>
 8006df8:	4632      	mov	r2, r6
 8006dfa:	463b      	mov	r3, r7
 8006dfc:	f7f9 fbf4 	bl	80005e8 <__aeabi_dmul>
 8006e00:	a363      	add	r3, pc, #396	; (adr r3, 8006f90 <__ieee754_exp+0x2b0>)
 8006e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e06:	f7f9 fa37 	bl	8000278 <__aeabi_dsub>
 8006e0a:	4632      	mov	r2, r6
 8006e0c:	463b      	mov	r3, r7
 8006e0e:	f7f9 fbeb 	bl	80005e8 <__aeabi_dmul>
 8006e12:	a361      	add	r3, pc, #388	; (adr r3, 8006f98 <__ieee754_exp+0x2b8>)
 8006e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e18:	f7f9 fa30 	bl	800027c <__adddf3>
 8006e1c:	4632      	mov	r2, r6
 8006e1e:	463b      	mov	r3, r7
 8006e20:	f7f9 fbe2 	bl	80005e8 <__aeabi_dmul>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4620      	mov	r0, r4
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	f7f9 fa24 	bl	8000278 <__aeabi_dsub>
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	4606      	mov	r6, r0
 8006e36:	460f      	mov	r7, r1
 8006e38:	4620      	mov	r0, r4
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	f7f9 fbd4 	bl	80005e8 <__aeabi_dmul>
 8006e40:	ec41 0b19 	vmov	d9, r0, r1
 8006e44:	f1ba 0f00 	cmp.w	sl, #0
 8006e48:	d15d      	bne.n	8006f06 <__ieee754_exp+0x226>
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e50:	4630      	mov	r0, r6
 8006e52:	4639      	mov	r1, r7
 8006e54:	f7f9 fa10 	bl	8000278 <__aeabi_dsub>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	ec51 0b19 	vmov	r0, r1, d9
 8006e60:	f7f9 fcec 	bl	800083c <__aeabi_ddiv>
 8006e64:	4622      	mov	r2, r4
 8006e66:	462b      	mov	r3, r5
 8006e68:	f7f9 fa06 	bl	8000278 <__aeabi_dsub>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	2000      	movs	r0, #0
 8006e72:	4959      	ldr	r1, [pc, #356]	; (8006fd8 <__ieee754_exp+0x2f8>)
 8006e74:	f7f9 fa00 	bl	8000278 <__aeabi_dsub>
 8006e78:	e74d      	b.n	8006d16 <__ieee754_exp+0x36>
 8006e7a:	4b58      	ldr	r3, [pc, #352]	; (8006fdc <__ieee754_exp+0x2fc>)
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006e82:	4629      	mov	r1, r5
 8006e84:	a346      	add	r3, pc, #280	; (adr r3, 8006fa0 <__ieee754_exp+0x2c0>)
 8006e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8a:	f7f9 fbad 	bl	80005e8 <__aeabi_dmul>
 8006e8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e92:	f7f9 f9f3 	bl	800027c <__adddf3>
 8006e96:	f7f9 fe41 	bl	8000b1c <__aeabi_d2iz>
 8006e9a:	4682      	mov	sl, r0
 8006e9c:	f7f9 fb3a 	bl	8000514 <__aeabi_i2d>
 8006ea0:	a341      	add	r3, pc, #260	; (adr r3, 8006fa8 <__ieee754_exp+0x2c8>)
 8006ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	460f      	mov	r7, r1
 8006eaa:	f7f9 fb9d 	bl	80005e8 <__aeabi_dmul>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	4629      	mov	r1, r5
 8006eb6:	f7f9 f9df 	bl	8000278 <__aeabi_dsub>
 8006eba:	a33d      	add	r3, pc, #244	; (adr r3, 8006fb0 <__ieee754_exp+0x2d0>)
 8006ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec0:	4680      	mov	r8, r0
 8006ec2:	4689      	mov	r9, r1
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	4639      	mov	r1, r7
 8006ec8:	f7f9 fb8e 	bl	80005e8 <__aeabi_dmul>
 8006ecc:	ec41 0b18 	vmov	d8, r0, r1
 8006ed0:	e76f      	b.n	8006db2 <__ieee754_exp+0xd2>
 8006ed2:	4b43      	ldr	r3, [pc, #268]	; (8006fe0 <__ieee754_exp+0x300>)
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d811      	bhi.n	8006efc <__ieee754_exp+0x21c>
 8006ed8:	a337      	add	r3, pc, #220	; (adr r3, 8006fb8 <__ieee754_exp+0x2d8>)
 8006eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ede:	ee10 0a10 	vmov	r0, s0
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	f7f9 f9ca 	bl	800027c <__adddf3>
 8006ee8:	4b3b      	ldr	r3, [pc, #236]	; (8006fd8 <__ieee754_exp+0x2f8>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	f7f9 fe0c 	bl	8000b08 <__aeabi_dcmpgt>
 8006ef0:	b138      	cbz	r0, 8006f02 <__ieee754_exp+0x222>
 8006ef2:	4b39      	ldr	r3, [pc, #228]	; (8006fd8 <__ieee754_exp+0x2f8>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	4629      	mov	r1, r5
 8006efa:	e70a      	b.n	8006d12 <__ieee754_exp+0x32>
 8006efc:	f04f 0a00 	mov.w	sl, #0
 8006f00:	e75f      	b.n	8006dc2 <__ieee754_exp+0xe2>
 8006f02:	4682      	mov	sl, r0
 8006f04:	e75d      	b.n	8006dc2 <__ieee754_exp+0xe2>
 8006f06:	4632      	mov	r2, r6
 8006f08:	463b      	mov	r3, r7
 8006f0a:	2000      	movs	r0, #0
 8006f0c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006f10:	f7f9 f9b2 	bl	8000278 <__aeabi_dsub>
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	ec51 0b19 	vmov	r0, r1, d9
 8006f1c:	f7f9 fc8e 	bl	800083c <__aeabi_ddiv>
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	ec51 0b18 	vmov	r0, r1, d8
 8006f28:	f7f9 f9a6 	bl	8000278 <__aeabi_dsub>
 8006f2c:	4642      	mov	r2, r8
 8006f2e:	464b      	mov	r3, r9
 8006f30:	f7f9 f9a2 	bl	8000278 <__aeabi_dsub>
 8006f34:	4602      	mov	r2, r0
 8006f36:	460b      	mov	r3, r1
 8006f38:	2000      	movs	r0, #0
 8006f3a:	4927      	ldr	r1, [pc, #156]	; (8006fd8 <__ieee754_exp+0x2f8>)
 8006f3c:	f7f9 f99c 	bl	8000278 <__aeabi_dsub>
 8006f40:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8006f44:	4592      	cmp	sl, r2
 8006f46:	db02      	blt.n	8006f4e <__ieee754_exp+0x26e>
 8006f48:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8006f4c:	e6e3      	b.n	8006d16 <__ieee754_exp+0x36>
 8006f4e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8006f52:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8006f56:	2200      	movs	r2, #0
 8006f58:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8006f5c:	f7f9 fb44 	bl	80005e8 <__aeabi_dmul>
 8006f60:	e6d9      	b.n	8006d16 <__ieee754_exp+0x36>
 8006f62:	bf00      	nop
 8006f64:	f3af 8000 	nop.w
 8006f68:	fefa39ef 	.word	0xfefa39ef
 8006f6c:	40862e42 	.word	0x40862e42
 8006f70:	d52d3051 	.word	0xd52d3051
 8006f74:	c0874910 	.word	0xc0874910
 8006f78:	72bea4d0 	.word	0x72bea4d0
 8006f7c:	3e663769 	.word	0x3e663769
 8006f80:	c5d26bf1 	.word	0xc5d26bf1
 8006f84:	3ebbbd41 	.word	0x3ebbbd41
 8006f88:	af25de2c 	.word	0xaf25de2c
 8006f8c:	3f11566a 	.word	0x3f11566a
 8006f90:	16bebd93 	.word	0x16bebd93
 8006f94:	3f66c16c 	.word	0x3f66c16c
 8006f98:	5555553e 	.word	0x5555553e
 8006f9c:	3fc55555 	.word	0x3fc55555
 8006fa0:	652b82fe 	.word	0x652b82fe
 8006fa4:	3ff71547 	.word	0x3ff71547
 8006fa8:	fee00000 	.word	0xfee00000
 8006fac:	3fe62e42 	.word	0x3fe62e42
 8006fb0:	35793c76 	.word	0x35793c76
 8006fb4:	3dea39ef 	.word	0x3dea39ef
 8006fb8:	8800759c 	.word	0x8800759c
 8006fbc:	7e37e43c 	.word	0x7e37e43c
 8006fc0:	40862e41 	.word	0x40862e41
 8006fc4:	7fefffff 	.word	0x7fefffff
 8006fc8:	3fd62e42 	.word	0x3fd62e42
 8006fcc:	3ff0a2b1 	.word	0x3ff0a2b1
 8006fd0:	08007df8 	.word	0x08007df8
 8006fd4:	08007e08 	.word	0x08007e08
 8006fd8:	3ff00000 	.word	0x3ff00000
 8006fdc:	08007de8 	.word	0x08007de8
 8006fe0:	3defffff 	.word	0x3defffff
 8006fe4:	00000000 	.word	0x00000000

08006fe8 <__ieee754_rem_pio2>:
 8006fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	ed2d 8b02 	vpush	{d8}
 8006ff0:	ec55 4b10 	vmov	r4, r5, d0
 8006ff4:	4bca      	ldr	r3, [pc, #808]	; (8007320 <__ieee754_rem_pio2+0x338>)
 8006ff6:	b08b      	sub	sp, #44	; 0x2c
 8006ff8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006ffc:	4598      	cmp	r8, r3
 8006ffe:	4682      	mov	sl, r0
 8007000:	9502      	str	r5, [sp, #8]
 8007002:	dc08      	bgt.n	8007016 <__ieee754_rem_pio2+0x2e>
 8007004:	2200      	movs	r2, #0
 8007006:	2300      	movs	r3, #0
 8007008:	ed80 0b00 	vstr	d0, [r0]
 800700c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007010:	f04f 0b00 	mov.w	fp, #0
 8007014:	e028      	b.n	8007068 <__ieee754_rem_pio2+0x80>
 8007016:	4bc3      	ldr	r3, [pc, #780]	; (8007324 <__ieee754_rem_pio2+0x33c>)
 8007018:	4598      	cmp	r8, r3
 800701a:	dc78      	bgt.n	800710e <__ieee754_rem_pio2+0x126>
 800701c:	9b02      	ldr	r3, [sp, #8]
 800701e:	4ec2      	ldr	r6, [pc, #776]	; (8007328 <__ieee754_rem_pio2+0x340>)
 8007020:	2b00      	cmp	r3, #0
 8007022:	ee10 0a10 	vmov	r0, s0
 8007026:	a3b0      	add	r3, pc, #704	; (adr r3, 80072e8 <__ieee754_rem_pio2+0x300>)
 8007028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702c:	4629      	mov	r1, r5
 800702e:	dd39      	ble.n	80070a4 <__ieee754_rem_pio2+0xbc>
 8007030:	f7f9 f922 	bl	8000278 <__aeabi_dsub>
 8007034:	45b0      	cmp	r8, r6
 8007036:	4604      	mov	r4, r0
 8007038:	460d      	mov	r5, r1
 800703a:	d01b      	beq.n	8007074 <__ieee754_rem_pio2+0x8c>
 800703c:	a3ac      	add	r3, pc, #688	; (adr r3, 80072f0 <__ieee754_rem_pio2+0x308>)
 800703e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007042:	f7f9 f919 	bl	8000278 <__aeabi_dsub>
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	e9ca 2300 	strd	r2, r3, [sl]
 800704e:	4620      	mov	r0, r4
 8007050:	4629      	mov	r1, r5
 8007052:	f7f9 f911 	bl	8000278 <__aeabi_dsub>
 8007056:	a3a6      	add	r3, pc, #664	; (adr r3, 80072f0 <__ieee754_rem_pio2+0x308>)
 8007058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705c:	f7f9 f90c 	bl	8000278 <__aeabi_dsub>
 8007060:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007064:	f04f 0b01 	mov.w	fp, #1
 8007068:	4658      	mov	r0, fp
 800706a:	b00b      	add	sp, #44	; 0x2c
 800706c:	ecbd 8b02 	vpop	{d8}
 8007070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007074:	a3a0      	add	r3, pc, #640	; (adr r3, 80072f8 <__ieee754_rem_pio2+0x310>)
 8007076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707a:	f7f9 f8fd 	bl	8000278 <__aeabi_dsub>
 800707e:	a3a0      	add	r3, pc, #640	; (adr r3, 8007300 <__ieee754_rem_pio2+0x318>)
 8007080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007084:	4604      	mov	r4, r0
 8007086:	460d      	mov	r5, r1
 8007088:	f7f9 f8f6 	bl	8000278 <__aeabi_dsub>
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	e9ca 2300 	strd	r2, r3, [sl]
 8007094:	4620      	mov	r0, r4
 8007096:	4629      	mov	r1, r5
 8007098:	f7f9 f8ee 	bl	8000278 <__aeabi_dsub>
 800709c:	a398      	add	r3, pc, #608	; (adr r3, 8007300 <__ieee754_rem_pio2+0x318>)
 800709e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a2:	e7db      	b.n	800705c <__ieee754_rem_pio2+0x74>
 80070a4:	f7f9 f8ea 	bl	800027c <__adddf3>
 80070a8:	45b0      	cmp	r8, r6
 80070aa:	4604      	mov	r4, r0
 80070ac:	460d      	mov	r5, r1
 80070ae:	d016      	beq.n	80070de <__ieee754_rem_pio2+0xf6>
 80070b0:	a38f      	add	r3, pc, #572	; (adr r3, 80072f0 <__ieee754_rem_pio2+0x308>)
 80070b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b6:	f7f9 f8e1 	bl	800027c <__adddf3>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	e9ca 2300 	strd	r2, r3, [sl]
 80070c2:	4620      	mov	r0, r4
 80070c4:	4629      	mov	r1, r5
 80070c6:	f7f9 f8d7 	bl	8000278 <__aeabi_dsub>
 80070ca:	a389      	add	r3, pc, #548	; (adr r3, 80072f0 <__ieee754_rem_pio2+0x308>)
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	f7f9 f8d4 	bl	800027c <__adddf3>
 80070d4:	f04f 3bff 	mov.w	fp, #4294967295
 80070d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80070dc:	e7c4      	b.n	8007068 <__ieee754_rem_pio2+0x80>
 80070de:	a386      	add	r3, pc, #536	; (adr r3, 80072f8 <__ieee754_rem_pio2+0x310>)
 80070e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e4:	f7f9 f8ca 	bl	800027c <__adddf3>
 80070e8:	a385      	add	r3, pc, #532	; (adr r3, 8007300 <__ieee754_rem_pio2+0x318>)
 80070ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ee:	4604      	mov	r4, r0
 80070f0:	460d      	mov	r5, r1
 80070f2:	f7f9 f8c3 	bl	800027c <__adddf3>
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	e9ca 2300 	strd	r2, r3, [sl]
 80070fe:	4620      	mov	r0, r4
 8007100:	4629      	mov	r1, r5
 8007102:	f7f9 f8b9 	bl	8000278 <__aeabi_dsub>
 8007106:	a37e      	add	r3, pc, #504	; (adr r3, 8007300 <__ieee754_rem_pio2+0x318>)
 8007108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710c:	e7e0      	b.n	80070d0 <__ieee754_rem_pio2+0xe8>
 800710e:	4b87      	ldr	r3, [pc, #540]	; (800732c <__ieee754_rem_pio2+0x344>)
 8007110:	4598      	cmp	r8, r3
 8007112:	f300 80d8 	bgt.w	80072c6 <__ieee754_rem_pio2+0x2de>
 8007116:	f000 f96d 	bl	80073f4 <fabs>
 800711a:	ec55 4b10 	vmov	r4, r5, d0
 800711e:	ee10 0a10 	vmov	r0, s0
 8007122:	a379      	add	r3, pc, #484	; (adr r3, 8007308 <__ieee754_rem_pio2+0x320>)
 8007124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007128:	4629      	mov	r1, r5
 800712a:	f7f9 fa5d 	bl	80005e8 <__aeabi_dmul>
 800712e:	4b80      	ldr	r3, [pc, #512]	; (8007330 <__ieee754_rem_pio2+0x348>)
 8007130:	2200      	movs	r2, #0
 8007132:	f7f9 f8a3 	bl	800027c <__adddf3>
 8007136:	f7f9 fcf1 	bl	8000b1c <__aeabi_d2iz>
 800713a:	4683      	mov	fp, r0
 800713c:	f7f9 f9ea 	bl	8000514 <__aeabi_i2d>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	ec43 2b18 	vmov	d8, r2, r3
 8007148:	a367      	add	r3, pc, #412	; (adr r3, 80072e8 <__ieee754_rem_pio2+0x300>)
 800714a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714e:	f7f9 fa4b 	bl	80005e8 <__aeabi_dmul>
 8007152:	4602      	mov	r2, r0
 8007154:	460b      	mov	r3, r1
 8007156:	4620      	mov	r0, r4
 8007158:	4629      	mov	r1, r5
 800715a:	f7f9 f88d 	bl	8000278 <__aeabi_dsub>
 800715e:	a364      	add	r3, pc, #400	; (adr r3, 80072f0 <__ieee754_rem_pio2+0x308>)
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	4606      	mov	r6, r0
 8007166:	460f      	mov	r7, r1
 8007168:	ec51 0b18 	vmov	r0, r1, d8
 800716c:	f7f9 fa3c 	bl	80005e8 <__aeabi_dmul>
 8007170:	f1bb 0f1f 	cmp.w	fp, #31
 8007174:	4604      	mov	r4, r0
 8007176:	460d      	mov	r5, r1
 8007178:	dc0d      	bgt.n	8007196 <__ieee754_rem_pio2+0x1ae>
 800717a:	4b6e      	ldr	r3, [pc, #440]	; (8007334 <__ieee754_rem_pio2+0x34c>)
 800717c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007184:	4543      	cmp	r3, r8
 8007186:	d006      	beq.n	8007196 <__ieee754_rem_pio2+0x1ae>
 8007188:	4622      	mov	r2, r4
 800718a:	462b      	mov	r3, r5
 800718c:	4630      	mov	r0, r6
 800718e:	4639      	mov	r1, r7
 8007190:	f7f9 f872 	bl	8000278 <__aeabi_dsub>
 8007194:	e00e      	b.n	80071b4 <__ieee754_rem_pio2+0x1cc>
 8007196:	462b      	mov	r3, r5
 8007198:	4622      	mov	r2, r4
 800719a:	4630      	mov	r0, r6
 800719c:	4639      	mov	r1, r7
 800719e:	f7f9 f86b 	bl	8000278 <__aeabi_dsub>
 80071a2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80071a6:	9303      	str	r3, [sp, #12]
 80071a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80071ac:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80071b0:	2b10      	cmp	r3, #16
 80071b2:	dc02      	bgt.n	80071ba <__ieee754_rem_pio2+0x1d2>
 80071b4:	e9ca 0100 	strd	r0, r1, [sl]
 80071b8:	e039      	b.n	800722e <__ieee754_rem_pio2+0x246>
 80071ba:	a34f      	add	r3, pc, #316	; (adr r3, 80072f8 <__ieee754_rem_pio2+0x310>)
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	ec51 0b18 	vmov	r0, r1, d8
 80071c4:	f7f9 fa10 	bl	80005e8 <__aeabi_dmul>
 80071c8:	4604      	mov	r4, r0
 80071ca:	460d      	mov	r5, r1
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	4630      	mov	r0, r6
 80071d2:	4639      	mov	r1, r7
 80071d4:	f7f9 f850 	bl	8000278 <__aeabi_dsub>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4680      	mov	r8, r0
 80071de:	4689      	mov	r9, r1
 80071e0:	4630      	mov	r0, r6
 80071e2:	4639      	mov	r1, r7
 80071e4:	f7f9 f848 	bl	8000278 <__aeabi_dsub>
 80071e8:	4622      	mov	r2, r4
 80071ea:	462b      	mov	r3, r5
 80071ec:	f7f9 f844 	bl	8000278 <__aeabi_dsub>
 80071f0:	a343      	add	r3, pc, #268	; (adr r3, 8007300 <__ieee754_rem_pio2+0x318>)
 80071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f6:	4604      	mov	r4, r0
 80071f8:	460d      	mov	r5, r1
 80071fa:	ec51 0b18 	vmov	r0, r1, d8
 80071fe:	f7f9 f9f3 	bl	80005e8 <__aeabi_dmul>
 8007202:	4622      	mov	r2, r4
 8007204:	462b      	mov	r3, r5
 8007206:	f7f9 f837 	bl	8000278 <__aeabi_dsub>
 800720a:	4602      	mov	r2, r0
 800720c:	460b      	mov	r3, r1
 800720e:	4604      	mov	r4, r0
 8007210:	460d      	mov	r5, r1
 8007212:	4640      	mov	r0, r8
 8007214:	4649      	mov	r1, r9
 8007216:	f7f9 f82f 	bl	8000278 <__aeabi_dsub>
 800721a:	9a03      	ldr	r2, [sp, #12]
 800721c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	2b31      	cmp	r3, #49	; 0x31
 8007224:	dc24      	bgt.n	8007270 <__ieee754_rem_pio2+0x288>
 8007226:	e9ca 0100 	strd	r0, r1, [sl]
 800722a:	4646      	mov	r6, r8
 800722c:	464f      	mov	r7, r9
 800722e:	e9da 8900 	ldrd	r8, r9, [sl]
 8007232:	4630      	mov	r0, r6
 8007234:	4642      	mov	r2, r8
 8007236:	464b      	mov	r3, r9
 8007238:	4639      	mov	r1, r7
 800723a:	f7f9 f81d 	bl	8000278 <__aeabi_dsub>
 800723e:	462b      	mov	r3, r5
 8007240:	4622      	mov	r2, r4
 8007242:	f7f9 f819 	bl	8000278 <__aeabi_dsub>
 8007246:	9b02      	ldr	r3, [sp, #8]
 8007248:	2b00      	cmp	r3, #0
 800724a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800724e:	f6bf af0b 	bge.w	8007068 <__ieee754_rem_pio2+0x80>
 8007252:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007256:	f8ca 3004 	str.w	r3, [sl, #4]
 800725a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800725e:	f8ca 8000 	str.w	r8, [sl]
 8007262:	f8ca 0008 	str.w	r0, [sl, #8]
 8007266:	f8ca 300c 	str.w	r3, [sl, #12]
 800726a:	f1cb 0b00 	rsb	fp, fp, #0
 800726e:	e6fb      	b.n	8007068 <__ieee754_rem_pio2+0x80>
 8007270:	a327      	add	r3, pc, #156	; (adr r3, 8007310 <__ieee754_rem_pio2+0x328>)
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	ec51 0b18 	vmov	r0, r1, d8
 800727a:	f7f9 f9b5 	bl	80005e8 <__aeabi_dmul>
 800727e:	4604      	mov	r4, r0
 8007280:	460d      	mov	r5, r1
 8007282:	4602      	mov	r2, r0
 8007284:	460b      	mov	r3, r1
 8007286:	4640      	mov	r0, r8
 8007288:	4649      	mov	r1, r9
 800728a:	f7f8 fff5 	bl	8000278 <__aeabi_dsub>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	4606      	mov	r6, r0
 8007294:	460f      	mov	r7, r1
 8007296:	4640      	mov	r0, r8
 8007298:	4649      	mov	r1, r9
 800729a:	f7f8 ffed 	bl	8000278 <__aeabi_dsub>
 800729e:	4622      	mov	r2, r4
 80072a0:	462b      	mov	r3, r5
 80072a2:	f7f8 ffe9 	bl	8000278 <__aeabi_dsub>
 80072a6:	a31c      	add	r3, pc, #112	; (adr r3, 8007318 <__ieee754_rem_pio2+0x330>)
 80072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ac:	4604      	mov	r4, r0
 80072ae:	460d      	mov	r5, r1
 80072b0:	ec51 0b18 	vmov	r0, r1, d8
 80072b4:	f7f9 f998 	bl	80005e8 <__aeabi_dmul>
 80072b8:	4622      	mov	r2, r4
 80072ba:	462b      	mov	r3, r5
 80072bc:	f7f8 ffdc 	bl	8000278 <__aeabi_dsub>
 80072c0:	4604      	mov	r4, r0
 80072c2:	460d      	mov	r5, r1
 80072c4:	e760      	b.n	8007188 <__ieee754_rem_pio2+0x1a0>
 80072c6:	4b1c      	ldr	r3, [pc, #112]	; (8007338 <__ieee754_rem_pio2+0x350>)
 80072c8:	4598      	cmp	r8, r3
 80072ca:	dd37      	ble.n	800733c <__ieee754_rem_pio2+0x354>
 80072cc:	ee10 2a10 	vmov	r2, s0
 80072d0:	462b      	mov	r3, r5
 80072d2:	4620      	mov	r0, r4
 80072d4:	4629      	mov	r1, r5
 80072d6:	f7f8 ffcf 	bl	8000278 <__aeabi_dsub>
 80072da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80072de:	e9ca 0100 	strd	r0, r1, [sl]
 80072e2:	e695      	b.n	8007010 <__ieee754_rem_pio2+0x28>
 80072e4:	f3af 8000 	nop.w
 80072e8:	54400000 	.word	0x54400000
 80072ec:	3ff921fb 	.word	0x3ff921fb
 80072f0:	1a626331 	.word	0x1a626331
 80072f4:	3dd0b461 	.word	0x3dd0b461
 80072f8:	1a600000 	.word	0x1a600000
 80072fc:	3dd0b461 	.word	0x3dd0b461
 8007300:	2e037073 	.word	0x2e037073
 8007304:	3ba3198a 	.word	0x3ba3198a
 8007308:	6dc9c883 	.word	0x6dc9c883
 800730c:	3fe45f30 	.word	0x3fe45f30
 8007310:	2e000000 	.word	0x2e000000
 8007314:	3ba3198a 	.word	0x3ba3198a
 8007318:	252049c1 	.word	0x252049c1
 800731c:	397b839a 	.word	0x397b839a
 8007320:	3fe921fb 	.word	0x3fe921fb
 8007324:	4002d97b 	.word	0x4002d97b
 8007328:	3ff921fb 	.word	0x3ff921fb
 800732c:	413921fb 	.word	0x413921fb
 8007330:	3fe00000 	.word	0x3fe00000
 8007334:	08007e18 	.word	0x08007e18
 8007338:	7fefffff 	.word	0x7fefffff
 800733c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8007340:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8007344:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8007348:	4620      	mov	r0, r4
 800734a:	460d      	mov	r5, r1
 800734c:	f7f9 fbe6 	bl	8000b1c <__aeabi_d2iz>
 8007350:	f7f9 f8e0 	bl	8000514 <__aeabi_i2d>
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	4620      	mov	r0, r4
 800735a:	4629      	mov	r1, r5
 800735c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007360:	f7f8 ff8a 	bl	8000278 <__aeabi_dsub>
 8007364:	4b21      	ldr	r3, [pc, #132]	; (80073ec <__ieee754_rem_pio2+0x404>)
 8007366:	2200      	movs	r2, #0
 8007368:	f7f9 f93e 	bl	80005e8 <__aeabi_dmul>
 800736c:	460d      	mov	r5, r1
 800736e:	4604      	mov	r4, r0
 8007370:	f7f9 fbd4 	bl	8000b1c <__aeabi_d2iz>
 8007374:	f7f9 f8ce 	bl	8000514 <__aeabi_i2d>
 8007378:	4602      	mov	r2, r0
 800737a:	460b      	mov	r3, r1
 800737c:	4620      	mov	r0, r4
 800737e:	4629      	mov	r1, r5
 8007380:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007384:	f7f8 ff78 	bl	8000278 <__aeabi_dsub>
 8007388:	4b18      	ldr	r3, [pc, #96]	; (80073ec <__ieee754_rem_pio2+0x404>)
 800738a:	2200      	movs	r2, #0
 800738c:	f7f9 f92c 	bl	80005e8 <__aeabi_dmul>
 8007390:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007394:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8007398:	2703      	movs	r7, #3
 800739a:	2400      	movs	r4, #0
 800739c:	2500      	movs	r5, #0
 800739e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80073a2:	4622      	mov	r2, r4
 80073a4:	462b      	mov	r3, r5
 80073a6:	46b9      	mov	r9, r7
 80073a8:	3f01      	subs	r7, #1
 80073aa:	f7f9 fb85 	bl	8000ab8 <__aeabi_dcmpeq>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d1f5      	bne.n	800739e <__ieee754_rem_pio2+0x3b6>
 80073b2:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <__ieee754_rem_pio2+0x408>)
 80073b4:	9301      	str	r3, [sp, #4]
 80073b6:	2302      	movs	r3, #2
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	4632      	mov	r2, r6
 80073bc:	464b      	mov	r3, r9
 80073be:	4651      	mov	r1, sl
 80073c0:	a804      	add	r0, sp, #16
 80073c2:	f000 f851 	bl	8007468 <__kernel_rem_pio2>
 80073c6:	9b02      	ldr	r3, [sp, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	4683      	mov	fp, r0
 80073cc:	f6bf ae4c 	bge.w	8007068 <__ieee754_rem_pio2+0x80>
 80073d0:	e9da 2100 	ldrd	r2, r1, [sl]
 80073d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073d8:	e9ca 2300 	strd	r2, r3, [sl]
 80073dc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80073e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073e4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80073e8:	e73f      	b.n	800726a <__ieee754_rem_pio2+0x282>
 80073ea:	bf00      	nop
 80073ec:	41700000 	.word	0x41700000
 80073f0:	08007e98 	.word	0x08007e98

080073f4 <fabs>:
 80073f4:	ec51 0b10 	vmov	r0, r1, d0
 80073f8:	ee10 2a10 	vmov	r2, s0
 80073fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007400:	ec43 2b10 	vmov	d0, r2, r3
 8007404:	4770      	bx	lr

08007406 <with_errno>:
 8007406:	b570      	push	{r4, r5, r6, lr}
 8007408:	4604      	mov	r4, r0
 800740a:	460d      	mov	r5, r1
 800740c:	4616      	mov	r6, r2
 800740e:	f7fe fcf5 	bl	8005dfc <__errno>
 8007412:	4629      	mov	r1, r5
 8007414:	6006      	str	r6, [r0, #0]
 8007416:	4620      	mov	r0, r4
 8007418:	bd70      	pop	{r4, r5, r6, pc}

0800741a <xflow>:
 800741a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800741c:	4614      	mov	r4, r2
 800741e:	461d      	mov	r5, r3
 8007420:	b108      	cbz	r0, 8007426 <xflow+0xc>
 8007422:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007426:	e9cd 2300 	strd	r2, r3, [sp]
 800742a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800742e:	4620      	mov	r0, r4
 8007430:	4629      	mov	r1, r5
 8007432:	f7f9 f8d9 	bl	80005e8 <__aeabi_dmul>
 8007436:	2222      	movs	r2, #34	; 0x22
 8007438:	b003      	add	sp, #12
 800743a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800743e:	f7ff bfe2 	b.w	8007406 <with_errno>

08007442 <__math_uflow>:
 8007442:	b508      	push	{r3, lr}
 8007444:	2200      	movs	r2, #0
 8007446:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800744a:	f7ff ffe6 	bl	800741a <xflow>
 800744e:	ec41 0b10 	vmov	d0, r0, r1
 8007452:	bd08      	pop	{r3, pc}

08007454 <__math_oflow>:
 8007454:	b508      	push	{r3, lr}
 8007456:	2200      	movs	r2, #0
 8007458:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800745c:	f7ff ffdd 	bl	800741a <xflow>
 8007460:	ec41 0b10 	vmov	d0, r0, r1
 8007464:	bd08      	pop	{r3, pc}
	...

08007468 <__kernel_rem_pio2>:
 8007468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800746c:	ed2d 8b02 	vpush	{d8}
 8007470:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007474:	f112 0f14 	cmn.w	r2, #20
 8007478:	9306      	str	r3, [sp, #24]
 800747a:	9104      	str	r1, [sp, #16]
 800747c:	4bc2      	ldr	r3, [pc, #776]	; (8007788 <__kernel_rem_pio2+0x320>)
 800747e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007480:	9009      	str	r0, [sp, #36]	; 0x24
 8007482:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	9b06      	ldr	r3, [sp, #24]
 800748a:	f103 33ff 	add.w	r3, r3, #4294967295
 800748e:	bfa8      	it	ge
 8007490:	1ed4      	subge	r4, r2, #3
 8007492:	9305      	str	r3, [sp, #20]
 8007494:	bfb2      	itee	lt
 8007496:	2400      	movlt	r4, #0
 8007498:	2318      	movge	r3, #24
 800749a:	fb94 f4f3 	sdivge	r4, r4, r3
 800749e:	f06f 0317 	mvn.w	r3, #23
 80074a2:	fb04 3303 	mla	r3, r4, r3, r3
 80074a6:	eb03 0a02 	add.w	sl, r3, r2
 80074aa:	9b00      	ldr	r3, [sp, #0]
 80074ac:	9a05      	ldr	r2, [sp, #20]
 80074ae:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8007778 <__kernel_rem_pio2+0x310>
 80074b2:	eb03 0802 	add.w	r8, r3, r2
 80074b6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80074b8:	1aa7      	subs	r7, r4, r2
 80074ba:	ae20      	add	r6, sp, #128	; 0x80
 80074bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80074c0:	2500      	movs	r5, #0
 80074c2:	4545      	cmp	r5, r8
 80074c4:	dd13      	ble.n	80074ee <__kernel_rem_pio2+0x86>
 80074c6:	9b06      	ldr	r3, [sp, #24]
 80074c8:	aa20      	add	r2, sp, #128	; 0x80
 80074ca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80074ce:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80074d2:	f04f 0800 	mov.w	r8, #0
 80074d6:	9b00      	ldr	r3, [sp, #0]
 80074d8:	4598      	cmp	r8, r3
 80074da:	dc31      	bgt.n	8007540 <__kernel_rem_pio2+0xd8>
 80074dc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8007778 <__kernel_rem_pio2+0x310>
 80074e0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80074e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80074e8:	462f      	mov	r7, r5
 80074ea:	2600      	movs	r6, #0
 80074ec:	e01b      	b.n	8007526 <__kernel_rem_pio2+0xbe>
 80074ee:	42ef      	cmn	r7, r5
 80074f0:	d407      	bmi.n	8007502 <__kernel_rem_pio2+0x9a>
 80074f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80074f6:	f7f9 f80d 	bl	8000514 <__aeabi_i2d>
 80074fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80074fe:	3501      	adds	r5, #1
 8007500:	e7df      	b.n	80074c2 <__kernel_rem_pio2+0x5a>
 8007502:	ec51 0b18 	vmov	r0, r1, d8
 8007506:	e7f8      	b.n	80074fa <__kernel_rem_pio2+0x92>
 8007508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800750c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007510:	f7f9 f86a 	bl	80005e8 <__aeabi_dmul>
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800751c:	f7f8 feae 	bl	800027c <__adddf3>
 8007520:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007524:	3601      	adds	r6, #1
 8007526:	9b05      	ldr	r3, [sp, #20]
 8007528:	429e      	cmp	r6, r3
 800752a:	f1a7 0708 	sub.w	r7, r7, #8
 800752e:	ddeb      	ble.n	8007508 <__kernel_rem_pio2+0xa0>
 8007530:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007534:	f108 0801 	add.w	r8, r8, #1
 8007538:	ecab 7b02 	vstmia	fp!, {d7}
 800753c:	3508      	adds	r5, #8
 800753e:	e7ca      	b.n	80074d6 <__kernel_rem_pio2+0x6e>
 8007540:	9b00      	ldr	r3, [sp, #0]
 8007542:	aa0c      	add	r2, sp, #48	; 0x30
 8007544:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007548:	930b      	str	r3, [sp, #44]	; 0x2c
 800754a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800754c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007550:	9c00      	ldr	r4, [sp, #0]
 8007552:	930a      	str	r3, [sp, #40]	; 0x28
 8007554:	00e3      	lsls	r3, r4, #3
 8007556:	9308      	str	r3, [sp, #32]
 8007558:	ab98      	add	r3, sp, #608	; 0x260
 800755a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800755e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007562:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8007566:	ab70      	add	r3, sp, #448	; 0x1c0
 8007568:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800756c:	46c3      	mov	fp, r8
 800756e:	46a1      	mov	r9, r4
 8007570:	f1b9 0f00 	cmp.w	r9, #0
 8007574:	f1a5 0508 	sub.w	r5, r5, #8
 8007578:	dc77      	bgt.n	800766a <__kernel_rem_pio2+0x202>
 800757a:	ec47 6b10 	vmov	d0, r6, r7
 800757e:	4650      	mov	r0, sl
 8007580:	f000 fac2 	bl	8007b08 <scalbn>
 8007584:	ec57 6b10 	vmov	r6, r7, d0
 8007588:	2200      	movs	r2, #0
 800758a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800758e:	ee10 0a10 	vmov	r0, s0
 8007592:	4639      	mov	r1, r7
 8007594:	f7f9 f828 	bl	80005e8 <__aeabi_dmul>
 8007598:	ec41 0b10 	vmov	d0, r0, r1
 800759c:	f000 fb34 	bl	8007c08 <floor>
 80075a0:	4b7a      	ldr	r3, [pc, #488]	; (800778c <__kernel_rem_pio2+0x324>)
 80075a2:	ec51 0b10 	vmov	r0, r1, d0
 80075a6:	2200      	movs	r2, #0
 80075a8:	f7f9 f81e 	bl	80005e8 <__aeabi_dmul>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4630      	mov	r0, r6
 80075b2:	4639      	mov	r1, r7
 80075b4:	f7f8 fe60 	bl	8000278 <__aeabi_dsub>
 80075b8:	460f      	mov	r7, r1
 80075ba:	4606      	mov	r6, r0
 80075bc:	f7f9 faae 	bl	8000b1c <__aeabi_d2iz>
 80075c0:	9002      	str	r0, [sp, #8]
 80075c2:	f7f8 ffa7 	bl	8000514 <__aeabi_i2d>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4630      	mov	r0, r6
 80075cc:	4639      	mov	r1, r7
 80075ce:	f7f8 fe53 	bl	8000278 <__aeabi_dsub>
 80075d2:	f1ba 0f00 	cmp.w	sl, #0
 80075d6:	4606      	mov	r6, r0
 80075d8:	460f      	mov	r7, r1
 80075da:	dd6d      	ble.n	80076b8 <__kernel_rem_pio2+0x250>
 80075dc:	1e61      	subs	r1, r4, #1
 80075de:	ab0c      	add	r3, sp, #48	; 0x30
 80075e0:	9d02      	ldr	r5, [sp, #8]
 80075e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80075e6:	f1ca 0018 	rsb	r0, sl, #24
 80075ea:	fa43 f200 	asr.w	r2, r3, r0
 80075ee:	4415      	add	r5, r2
 80075f0:	4082      	lsls	r2, r0
 80075f2:	1a9b      	subs	r3, r3, r2
 80075f4:	aa0c      	add	r2, sp, #48	; 0x30
 80075f6:	9502      	str	r5, [sp, #8]
 80075f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80075fc:	f1ca 0217 	rsb	r2, sl, #23
 8007600:	fa43 fb02 	asr.w	fp, r3, r2
 8007604:	f1bb 0f00 	cmp.w	fp, #0
 8007608:	dd65      	ble.n	80076d6 <__kernel_rem_pio2+0x26e>
 800760a:	9b02      	ldr	r3, [sp, #8]
 800760c:	2200      	movs	r2, #0
 800760e:	3301      	adds	r3, #1
 8007610:	9302      	str	r3, [sp, #8]
 8007612:	4615      	mov	r5, r2
 8007614:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007618:	4294      	cmp	r4, r2
 800761a:	f300 809f 	bgt.w	800775c <__kernel_rem_pio2+0x2f4>
 800761e:	f1ba 0f00 	cmp.w	sl, #0
 8007622:	dd07      	ble.n	8007634 <__kernel_rem_pio2+0x1cc>
 8007624:	f1ba 0f01 	cmp.w	sl, #1
 8007628:	f000 80c1 	beq.w	80077ae <__kernel_rem_pio2+0x346>
 800762c:	f1ba 0f02 	cmp.w	sl, #2
 8007630:	f000 80c7 	beq.w	80077c2 <__kernel_rem_pio2+0x35a>
 8007634:	f1bb 0f02 	cmp.w	fp, #2
 8007638:	d14d      	bne.n	80076d6 <__kernel_rem_pio2+0x26e>
 800763a:	4632      	mov	r2, r6
 800763c:	463b      	mov	r3, r7
 800763e:	4954      	ldr	r1, [pc, #336]	; (8007790 <__kernel_rem_pio2+0x328>)
 8007640:	2000      	movs	r0, #0
 8007642:	f7f8 fe19 	bl	8000278 <__aeabi_dsub>
 8007646:	4606      	mov	r6, r0
 8007648:	460f      	mov	r7, r1
 800764a:	2d00      	cmp	r5, #0
 800764c:	d043      	beq.n	80076d6 <__kernel_rem_pio2+0x26e>
 800764e:	4650      	mov	r0, sl
 8007650:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8007780 <__kernel_rem_pio2+0x318>
 8007654:	f000 fa58 	bl	8007b08 <scalbn>
 8007658:	4630      	mov	r0, r6
 800765a:	4639      	mov	r1, r7
 800765c:	ec53 2b10 	vmov	r2, r3, d0
 8007660:	f7f8 fe0a 	bl	8000278 <__aeabi_dsub>
 8007664:	4606      	mov	r6, r0
 8007666:	460f      	mov	r7, r1
 8007668:	e035      	b.n	80076d6 <__kernel_rem_pio2+0x26e>
 800766a:	4b4a      	ldr	r3, [pc, #296]	; (8007794 <__kernel_rem_pio2+0x32c>)
 800766c:	2200      	movs	r2, #0
 800766e:	4630      	mov	r0, r6
 8007670:	4639      	mov	r1, r7
 8007672:	f7f8 ffb9 	bl	80005e8 <__aeabi_dmul>
 8007676:	f7f9 fa51 	bl	8000b1c <__aeabi_d2iz>
 800767a:	f7f8 ff4b 	bl	8000514 <__aeabi_i2d>
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	ec43 2b18 	vmov	d8, r2, r3
 8007686:	4b44      	ldr	r3, [pc, #272]	; (8007798 <__kernel_rem_pio2+0x330>)
 8007688:	2200      	movs	r2, #0
 800768a:	f7f8 ffad 	bl	80005e8 <__aeabi_dmul>
 800768e:	4602      	mov	r2, r0
 8007690:	460b      	mov	r3, r1
 8007692:	4630      	mov	r0, r6
 8007694:	4639      	mov	r1, r7
 8007696:	f7f8 fdef 	bl	8000278 <__aeabi_dsub>
 800769a:	f7f9 fa3f 	bl	8000b1c <__aeabi_d2iz>
 800769e:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076a2:	f84b 0b04 	str.w	r0, [fp], #4
 80076a6:	ec51 0b18 	vmov	r0, r1, d8
 80076aa:	f7f8 fde7 	bl	800027c <__adddf3>
 80076ae:	f109 39ff 	add.w	r9, r9, #4294967295
 80076b2:	4606      	mov	r6, r0
 80076b4:	460f      	mov	r7, r1
 80076b6:	e75b      	b.n	8007570 <__kernel_rem_pio2+0x108>
 80076b8:	d106      	bne.n	80076c8 <__kernel_rem_pio2+0x260>
 80076ba:	1e63      	subs	r3, r4, #1
 80076bc:	aa0c      	add	r2, sp, #48	; 0x30
 80076be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076c2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80076c6:	e79d      	b.n	8007604 <__kernel_rem_pio2+0x19c>
 80076c8:	4b34      	ldr	r3, [pc, #208]	; (800779c <__kernel_rem_pio2+0x334>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	f7f9 fa12 	bl	8000af4 <__aeabi_dcmpge>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d140      	bne.n	8007756 <__kernel_rem_pio2+0x2ee>
 80076d4:	4683      	mov	fp, r0
 80076d6:	2200      	movs	r2, #0
 80076d8:	2300      	movs	r3, #0
 80076da:	4630      	mov	r0, r6
 80076dc:	4639      	mov	r1, r7
 80076de:	f7f9 f9eb 	bl	8000ab8 <__aeabi_dcmpeq>
 80076e2:	2800      	cmp	r0, #0
 80076e4:	f000 80c1 	beq.w	800786a <__kernel_rem_pio2+0x402>
 80076e8:	1e65      	subs	r5, r4, #1
 80076ea:	462b      	mov	r3, r5
 80076ec:	2200      	movs	r2, #0
 80076ee:	9900      	ldr	r1, [sp, #0]
 80076f0:	428b      	cmp	r3, r1
 80076f2:	da6d      	bge.n	80077d0 <__kernel_rem_pio2+0x368>
 80076f4:	2a00      	cmp	r2, #0
 80076f6:	f000 808a 	beq.w	800780e <__kernel_rem_pio2+0x3a6>
 80076fa:	ab0c      	add	r3, sp, #48	; 0x30
 80076fc:	f1aa 0a18 	sub.w	sl, sl, #24
 8007700:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 80ae 	beq.w	8007866 <__kernel_rem_pio2+0x3fe>
 800770a:	4650      	mov	r0, sl
 800770c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8007780 <__kernel_rem_pio2+0x318>
 8007710:	f000 f9fa 	bl	8007b08 <scalbn>
 8007714:	1c6b      	adds	r3, r5, #1
 8007716:	00da      	lsls	r2, r3, #3
 8007718:	9205      	str	r2, [sp, #20]
 800771a:	ec57 6b10 	vmov	r6, r7, d0
 800771e:	aa70      	add	r2, sp, #448	; 0x1c0
 8007720:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8007794 <__kernel_rem_pio2+0x32c>
 8007724:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8007728:	462c      	mov	r4, r5
 800772a:	f04f 0800 	mov.w	r8, #0
 800772e:	2c00      	cmp	r4, #0
 8007730:	f280 80d4 	bge.w	80078dc <__kernel_rem_pio2+0x474>
 8007734:	462c      	mov	r4, r5
 8007736:	2c00      	cmp	r4, #0
 8007738:	f2c0 8102 	blt.w	8007940 <__kernel_rem_pio2+0x4d8>
 800773c:	4b18      	ldr	r3, [pc, #96]	; (80077a0 <__kernel_rem_pio2+0x338>)
 800773e:	461e      	mov	r6, r3
 8007740:	ab70      	add	r3, sp, #448	; 0x1c0
 8007742:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8007746:	1b2b      	subs	r3, r5, r4
 8007748:	f04f 0900 	mov.w	r9, #0
 800774c:	f04f 0a00 	mov.w	sl, #0
 8007750:	2700      	movs	r7, #0
 8007752:	9306      	str	r3, [sp, #24]
 8007754:	e0e6      	b.n	8007924 <__kernel_rem_pio2+0x4bc>
 8007756:	f04f 0b02 	mov.w	fp, #2
 800775a:	e756      	b.n	800760a <__kernel_rem_pio2+0x1a2>
 800775c:	f8d8 3000 	ldr.w	r3, [r8]
 8007760:	bb05      	cbnz	r5, 80077a4 <__kernel_rem_pio2+0x33c>
 8007762:	b123      	cbz	r3, 800776e <__kernel_rem_pio2+0x306>
 8007764:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007768:	f8c8 3000 	str.w	r3, [r8]
 800776c:	2301      	movs	r3, #1
 800776e:	3201      	adds	r2, #1
 8007770:	f108 0804 	add.w	r8, r8, #4
 8007774:	461d      	mov	r5, r3
 8007776:	e74f      	b.n	8007618 <__kernel_rem_pio2+0x1b0>
	...
 8007784:	3ff00000 	.word	0x3ff00000
 8007788:	08007fe0 	.word	0x08007fe0
 800778c:	40200000 	.word	0x40200000
 8007790:	3ff00000 	.word	0x3ff00000
 8007794:	3e700000 	.word	0x3e700000
 8007798:	41700000 	.word	0x41700000
 800779c:	3fe00000 	.word	0x3fe00000
 80077a0:	08007fa0 	.word	0x08007fa0
 80077a4:	1acb      	subs	r3, r1, r3
 80077a6:	f8c8 3000 	str.w	r3, [r8]
 80077aa:	462b      	mov	r3, r5
 80077ac:	e7df      	b.n	800776e <__kernel_rem_pio2+0x306>
 80077ae:	1e62      	subs	r2, r4, #1
 80077b0:	ab0c      	add	r3, sp, #48	; 0x30
 80077b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80077ba:	a90c      	add	r1, sp, #48	; 0x30
 80077bc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80077c0:	e738      	b.n	8007634 <__kernel_rem_pio2+0x1cc>
 80077c2:	1e62      	subs	r2, r4, #1
 80077c4:	ab0c      	add	r3, sp, #48	; 0x30
 80077c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ca:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80077ce:	e7f4      	b.n	80077ba <__kernel_rem_pio2+0x352>
 80077d0:	a90c      	add	r1, sp, #48	; 0x30
 80077d2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80077d6:	3b01      	subs	r3, #1
 80077d8:	430a      	orrs	r2, r1
 80077da:	e788      	b.n	80076ee <__kernel_rem_pio2+0x286>
 80077dc:	3301      	adds	r3, #1
 80077de:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80077e2:	2900      	cmp	r1, #0
 80077e4:	d0fa      	beq.n	80077dc <__kernel_rem_pio2+0x374>
 80077e6:	9a08      	ldr	r2, [sp, #32]
 80077e8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80077ec:	446a      	add	r2, sp
 80077ee:	3a98      	subs	r2, #152	; 0x98
 80077f0:	9208      	str	r2, [sp, #32]
 80077f2:	9a06      	ldr	r2, [sp, #24]
 80077f4:	a920      	add	r1, sp, #128	; 0x80
 80077f6:	18a2      	adds	r2, r4, r2
 80077f8:	18e3      	adds	r3, r4, r3
 80077fa:	f104 0801 	add.w	r8, r4, #1
 80077fe:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8007802:	9302      	str	r3, [sp, #8]
 8007804:	9b02      	ldr	r3, [sp, #8]
 8007806:	4543      	cmp	r3, r8
 8007808:	da04      	bge.n	8007814 <__kernel_rem_pio2+0x3ac>
 800780a:	461c      	mov	r4, r3
 800780c:	e6a2      	b.n	8007554 <__kernel_rem_pio2+0xec>
 800780e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007810:	2301      	movs	r3, #1
 8007812:	e7e4      	b.n	80077de <__kernel_rem_pio2+0x376>
 8007814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007816:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800781a:	f7f8 fe7b 	bl	8000514 <__aeabi_i2d>
 800781e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007824:	46ab      	mov	fp, r5
 8007826:	461c      	mov	r4, r3
 8007828:	f04f 0900 	mov.w	r9, #0
 800782c:	2600      	movs	r6, #0
 800782e:	2700      	movs	r7, #0
 8007830:	9b05      	ldr	r3, [sp, #20]
 8007832:	4599      	cmp	r9, r3
 8007834:	dd06      	ble.n	8007844 <__kernel_rem_pio2+0x3dc>
 8007836:	9b08      	ldr	r3, [sp, #32]
 8007838:	e8e3 6702 	strd	r6, r7, [r3], #8
 800783c:	f108 0801 	add.w	r8, r8, #1
 8007840:	9308      	str	r3, [sp, #32]
 8007842:	e7df      	b.n	8007804 <__kernel_rem_pio2+0x39c>
 8007844:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007848:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800784c:	f7f8 fecc 	bl	80005e8 <__aeabi_dmul>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	4630      	mov	r0, r6
 8007856:	4639      	mov	r1, r7
 8007858:	f7f8 fd10 	bl	800027c <__adddf3>
 800785c:	f109 0901 	add.w	r9, r9, #1
 8007860:	4606      	mov	r6, r0
 8007862:	460f      	mov	r7, r1
 8007864:	e7e4      	b.n	8007830 <__kernel_rem_pio2+0x3c8>
 8007866:	3d01      	subs	r5, #1
 8007868:	e747      	b.n	80076fa <__kernel_rem_pio2+0x292>
 800786a:	ec47 6b10 	vmov	d0, r6, r7
 800786e:	f1ca 0000 	rsb	r0, sl, #0
 8007872:	f000 f949 	bl	8007b08 <scalbn>
 8007876:	ec57 6b10 	vmov	r6, r7, d0
 800787a:	4ba0      	ldr	r3, [pc, #640]	; (8007afc <__kernel_rem_pio2+0x694>)
 800787c:	ee10 0a10 	vmov	r0, s0
 8007880:	2200      	movs	r2, #0
 8007882:	4639      	mov	r1, r7
 8007884:	f7f9 f936 	bl	8000af4 <__aeabi_dcmpge>
 8007888:	b1f8      	cbz	r0, 80078ca <__kernel_rem_pio2+0x462>
 800788a:	4b9d      	ldr	r3, [pc, #628]	; (8007b00 <__kernel_rem_pio2+0x698>)
 800788c:	2200      	movs	r2, #0
 800788e:	4630      	mov	r0, r6
 8007890:	4639      	mov	r1, r7
 8007892:	f7f8 fea9 	bl	80005e8 <__aeabi_dmul>
 8007896:	f7f9 f941 	bl	8000b1c <__aeabi_d2iz>
 800789a:	4680      	mov	r8, r0
 800789c:	f7f8 fe3a 	bl	8000514 <__aeabi_i2d>
 80078a0:	4b96      	ldr	r3, [pc, #600]	; (8007afc <__kernel_rem_pio2+0x694>)
 80078a2:	2200      	movs	r2, #0
 80078a4:	f7f8 fea0 	bl	80005e8 <__aeabi_dmul>
 80078a8:	460b      	mov	r3, r1
 80078aa:	4602      	mov	r2, r0
 80078ac:	4639      	mov	r1, r7
 80078ae:	4630      	mov	r0, r6
 80078b0:	f7f8 fce2 	bl	8000278 <__aeabi_dsub>
 80078b4:	f7f9 f932 	bl	8000b1c <__aeabi_d2iz>
 80078b8:	1c65      	adds	r5, r4, #1
 80078ba:	ab0c      	add	r3, sp, #48	; 0x30
 80078bc:	f10a 0a18 	add.w	sl, sl, #24
 80078c0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80078c4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80078c8:	e71f      	b.n	800770a <__kernel_rem_pio2+0x2a2>
 80078ca:	4630      	mov	r0, r6
 80078cc:	4639      	mov	r1, r7
 80078ce:	f7f9 f925 	bl	8000b1c <__aeabi_d2iz>
 80078d2:	ab0c      	add	r3, sp, #48	; 0x30
 80078d4:	4625      	mov	r5, r4
 80078d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80078da:	e716      	b.n	800770a <__kernel_rem_pio2+0x2a2>
 80078dc:	ab0c      	add	r3, sp, #48	; 0x30
 80078de:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80078e2:	f7f8 fe17 	bl	8000514 <__aeabi_i2d>
 80078e6:	4632      	mov	r2, r6
 80078e8:	463b      	mov	r3, r7
 80078ea:	f7f8 fe7d 	bl	80005e8 <__aeabi_dmul>
 80078ee:	4642      	mov	r2, r8
 80078f0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80078f4:	464b      	mov	r3, r9
 80078f6:	4630      	mov	r0, r6
 80078f8:	4639      	mov	r1, r7
 80078fa:	f7f8 fe75 	bl	80005e8 <__aeabi_dmul>
 80078fe:	3c01      	subs	r4, #1
 8007900:	4606      	mov	r6, r0
 8007902:	460f      	mov	r7, r1
 8007904:	e713      	b.n	800772e <__kernel_rem_pio2+0x2c6>
 8007906:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800790a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800790e:	f7f8 fe6b 	bl	80005e8 <__aeabi_dmul>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	4648      	mov	r0, r9
 8007918:	4651      	mov	r1, sl
 800791a:	f7f8 fcaf 	bl	800027c <__adddf3>
 800791e:	3701      	adds	r7, #1
 8007920:	4681      	mov	r9, r0
 8007922:	468a      	mov	sl, r1
 8007924:	9b00      	ldr	r3, [sp, #0]
 8007926:	429f      	cmp	r7, r3
 8007928:	dc02      	bgt.n	8007930 <__kernel_rem_pio2+0x4c8>
 800792a:	9b06      	ldr	r3, [sp, #24]
 800792c:	429f      	cmp	r7, r3
 800792e:	ddea      	ble.n	8007906 <__kernel_rem_pio2+0x49e>
 8007930:	9a06      	ldr	r2, [sp, #24]
 8007932:	ab48      	add	r3, sp, #288	; 0x120
 8007934:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8007938:	e9c6 9a00 	strd	r9, sl, [r6]
 800793c:	3c01      	subs	r4, #1
 800793e:	e6fa      	b.n	8007736 <__kernel_rem_pio2+0x2ce>
 8007940:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007942:	2b02      	cmp	r3, #2
 8007944:	dc0b      	bgt.n	800795e <__kernel_rem_pio2+0x4f6>
 8007946:	2b00      	cmp	r3, #0
 8007948:	dc39      	bgt.n	80079be <__kernel_rem_pio2+0x556>
 800794a:	d05d      	beq.n	8007a08 <__kernel_rem_pio2+0x5a0>
 800794c:	9b02      	ldr	r3, [sp, #8]
 800794e:	f003 0007 	and.w	r0, r3, #7
 8007952:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007956:	ecbd 8b02 	vpop	{d8}
 800795a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800795e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007960:	2b03      	cmp	r3, #3
 8007962:	d1f3      	bne.n	800794c <__kernel_rem_pio2+0x4e4>
 8007964:	9b05      	ldr	r3, [sp, #20]
 8007966:	9500      	str	r5, [sp, #0]
 8007968:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800796c:	eb0d 0403 	add.w	r4, sp, r3
 8007970:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8007974:	46a2      	mov	sl, r4
 8007976:	9b00      	ldr	r3, [sp, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	f1aa 0a08 	sub.w	sl, sl, #8
 800797e:	dc69      	bgt.n	8007a54 <__kernel_rem_pio2+0x5ec>
 8007980:	46aa      	mov	sl, r5
 8007982:	f1ba 0f01 	cmp.w	sl, #1
 8007986:	f1a4 0408 	sub.w	r4, r4, #8
 800798a:	f300 8083 	bgt.w	8007a94 <__kernel_rem_pio2+0x62c>
 800798e:	9c05      	ldr	r4, [sp, #20]
 8007990:	ab48      	add	r3, sp, #288	; 0x120
 8007992:	441c      	add	r4, r3
 8007994:	2000      	movs	r0, #0
 8007996:	2100      	movs	r1, #0
 8007998:	2d01      	cmp	r5, #1
 800799a:	f300 809a 	bgt.w	8007ad2 <__kernel_rem_pio2+0x66a>
 800799e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80079a2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80079a6:	f1bb 0f00 	cmp.w	fp, #0
 80079aa:	f040 8098 	bne.w	8007ade <__kernel_rem_pio2+0x676>
 80079ae:	9b04      	ldr	r3, [sp, #16]
 80079b0:	e9c3 7800 	strd	r7, r8, [r3]
 80079b4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80079b8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80079bc:	e7c6      	b.n	800794c <__kernel_rem_pio2+0x4e4>
 80079be:	9e05      	ldr	r6, [sp, #20]
 80079c0:	ab48      	add	r3, sp, #288	; 0x120
 80079c2:	441e      	add	r6, r3
 80079c4:	462c      	mov	r4, r5
 80079c6:	2000      	movs	r0, #0
 80079c8:	2100      	movs	r1, #0
 80079ca:	2c00      	cmp	r4, #0
 80079cc:	da33      	bge.n	8007a36 <__kernel_rem_pio2+0x5ce>
 80079ce:	f1bb 0f00 	cmp.w	fp, #0
 80079d2:	d036      	beq.n	8007a42 <__kernel_rem_pio2+0x5da>
 80079d4:	4602      	mov	r2, r0
 80079d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079da:	9c04      	ldr	r4, [sp, #16]
 80079dc:	e9c4 2300 	strd	r2, r3, [r4]
 80079e0:	4602      	mov	r2, r0
 80079e2:	460b      	mov	r3, r1
 80079e4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80079e8:	f7f8 fc46 	bl	8000278 <__aeabi_dsub>
 80079ec:	ae4a      	add	r6, sp, #296	; 0x128
 80079ee:	2401      	movs	r4, #1
 80079f0:	42a5      	cmp	r5, r4
 80079f2:	da29      	bge.n	8007a48 <__kernel_rem_pio2+0x5e0>
 80079f4:	f1bb 0f00 	cmp.w	fp, #0
 80079f8:	d002      	beq.n	8007a00 <__kernel_rem_pio2+0x598>
 80079fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079fe:	4619      	mov	r1, r3
 8007a00:	9b04      	ldr	r3, [sp, #16]
 8007a02:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007a06:	e7a1      	b.n	800794c <__kernel_rem_pio2+0x4e4>
 8007a08:	9c05      	ldr	r4, [sp, #20]
 8007a0a:	ab48      	add	r3, sp, #288	; 0x120
 8007a0c:	441c      	add	r4, r3
 8007a0e:	2000      	movs	r0, #0
 8007a10:	2100      	movs	r1, #0
 8007a12:	2d00      	cmp	r5, #0
 8007a14:	da09      	bge.n	8007a2a <__kernel_rem_pio2+0x5c2>
 8007a16:	f1bb 0f00 	cmp.w	fp, #0
 8007a1a:	d002      	beq.n	8007a22 <__kernel_rem_pio2+0x5ba>
 8007a1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a20:	4619      	mov	r1, r3
 8007a22:	9b04      	ldr	r3, [sp, #16]
 8007a24:	e9c3 0100 	strd	r0, r1, [r3]
 8007a28:	e790      	b.n	800794c <__kernel_rem_pio2+0x4e4>
 8007a2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007a2e:	f7f8 fc25 	bl	800027c <__adddf3>
 8007a32:	3d01      	subs	r5, #1
 8007a34:	e7ed      	b.n	8007a12 <__kernel_rem_pio2+0x5aa>
 8007a36:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007a3a:	f7f8 fc1f 	bl	800027c <__adddf3>
 8007a3e:	3c01      	subs	r4, #1
 8007a40:	e7c3      	b.n	80079ca <__kernel_rem_pio2+0x562>
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	e7c8      	b.n	80079da <__kernel_rem_pio2+0x572>
 8007a48:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007a4c:	f7f8 fc16 	bl	800027c <__adddf3>
 8007a50:	3401      	adds	r4, #1
 8007a52:	e7cd      	b.n	80079f0 <__kernel_rem_pio2+0x588>
 8007a54:	e9da 8900 	ldrd	r8, r9, [sl]
 8007a58:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007a5c:	9b00      	ldr	r3, [sp, #0]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	4632      	mov	r2, r6
 8007a64:	463b      	mov	r3, r7
 8007a66:	4640      	mov	r0, r8
 8007a68:	4649      	mov	r1, r9
 8007a6a:	f7f8 fc07 	bl	800027c <__adddf3>
 8007a6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	4640      	mov	r0, r8
 8007a78:	4649      	mov	r1, r9
 8007a7a:	f7f8 fbfd 	bl	8000278 <__aeabi_dsub>
 8007a7e:	4632      	mov	r2, r6
 8007a80:	463b      	mov	r3, r7
 8007a82:	f7f8 fbfb 	bl	800027c <__adddf3>
 8007a86:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007a8a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007a8e:	ed8a 7b00 	vstr	d7, [sl]
 8007a92:	e770      	b.n	8007976 <__kernel_rem_pio2+0x50e>
 8007a94:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007a98:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007a9c:	4640      	mov	r0, r8
 8007a9e:	4632      	mov	r2, r6
 8007aa0:	463b      	mov	r3, r7
 8007aa2:	4649      	mov	r1, r9
 8007aa4:	f7f8 fbea 	bl	800027c <__adddf3>
 8007aa8:	e9cd 0100 	strd	r0, r1, [sp]
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4640      	mov	r0, r8
 8007ab2:	4649      	mov	r1, r9
 8007ab4:	f7f8 fbe0 	bl	8000278 <__aeabi_dsub>
 8007ab8:	4632      	mov	r2, r6
 8007aba:	463b      	mov	r3, r7
 8007abc:	f7f8 fbde 	bl	800027c <__adddf3>
 8007ac0:	ed9d 7b00 	vldr	d7, [sp]
 8007ac4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007ac8:	ed84 7b00 	vstr	d7, [r4]
 8007acc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ad0:	e757      	b.n	8007982 <__kernel_rem_pio2+0x51a>
 8007ad2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007ad6:	f7f8 fbd1 	bl	800027c <__adddf3>
 8007ada:	3d01      	subs	r5, #1
 8007adc:	e75c      	b.n	8007998 <__kernel_rem_pio2+0x530>
 8007ade:	9b04      	ldr	r3, [sp, #16]
 8007ae0:	9a04      	ldr	r2, [sp, #16]
 8007ae2:	601f      	str	r7, [r3, #0]
 8007ae4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007ae8:	605c      	str	r4, [r3, #4]
 8007aea:	609d      	str	r5, [r3, #8]
 8007aec:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007af0:	60d3      	str	r3, [r2, #12]
 8007af2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007af6:	6110      	str	r0, [r2, #16]
 8007af8:	6153      	str	r3, [r2, #20]
 8007afa:	e727      	b.n	800794c <__kernel_rem_pio2+0x4e4>
 8007afc:	41700000 	.word	0x41700000
 8007b00:	3e700000 	.word	0x3e700000
 8007b04:	00000000 	.word	0x00000000

08007b08 <scalbn>:
 8007b08:	b570      	push	{r4, r5, r6, lr}
 8007b0a:	ec55 4b10 	vmov	r4, r5, d0
 8007b0e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007b12:	4606      	mov	r6, r0
 8007b14:	462b      	mov	r3, r5
 8007b16:	b999      	cbnz	r1, 8007b40 <scalbn+0x38>
 8007b18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007b1c:	4323      	orrs	r3, r4
 8007b1e:	d03f      	beq.n	8007ba0 <scalbn+0x98>
 8007b20:	4b35      	ldr	r3, [pc, #212]	; (8007bf8 <scalbn+0xf0>)
 8007b22:	4629      	mov	r1, r5
 8007b24:	ee10 0a10 	vmov	r0, s0
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f7f8 fd5d 	bl	80005e8 <__aeabi_dmul>
 8007b2e:	4b33      	ldr	r3, [pc, #204]	; (8007bfc <scalbn+0xf4>)
 8007b30:	429e      	cmp	r6, r3
 8007b32:	4604      	mov	r4, r0
 8007b34:	460d      	mov	r5, r1
 8007b36:	da10      	bge.n	8007b5a <scalbn+0x52>
 8007b38:	a327      	add	r3, pc, #156	; (adr r3, 8007bd8 <scalbn+0xd0>)
 8007b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3e:	e01f      	b.n	8007b80 <scalbn+0x78>
 8007b40:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007b44:	4291      	cmp	r1, r2
 8007b46:	d10c      	bne.n	8007b62 <scalbn+0x5a>
 8007b48:	ee10 2a10 	vmov	r2, s0
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	4629      	mov	r1, r5
 8007b50:	f7f8 fb94 	bl	800027c <__adddf3>
 8007b54:	4604      	mov	r4, r0
 8007b56:	460d      	mov	r5, r1
 8007b58:	e022      	b.n	8007ba0 <scalbn+0x98>
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007b60:	3936      	subs	r1, #54	; 0x36
 8007b62:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007b66:	4296      	cmp	r6, r2
 8007b68:	dd0d      	ble.n	8007b86 <scalbn+0x7e>
 8007b6a:	2d00      	cmp	r5, #0
 8007b6c:	a11c      	add	r1, pc, #112	; (adr r1, 8007be0 <scalbn+0xd8>)
 8007b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b72:	da02      	bge.n	8007b7a <scalbn+0x72>
 8007b74:	a11c      	add	r1, pc, #112	; (adr r1, 8007be8 <scalbn+0xe0>)
 8007b76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b7a:	a319      	add	r3, pc, #100	; (adr r3, 8007be0 <scalbn+0xd8>)
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	f7f8 fd32 	bl	80005e8 <__aeabi_dmul>
 8007b84:	e7e6      	b.n	8007b54 <scalbn+0x4c>
 8007b86:	1872      	adds	r2, r6, r1
 8007b88:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007b8c:	428a      	cmp	r2, r1
 8007b8e:	dcec      	bgt.n	8007b6a <scalbn+0x62>
 8007b90:	2a00      	cmp	r2, #0
 8007b92:	dd08      	ble.n	8007ba6 <scalbn+0x9e>
 8007b94:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007b98:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007b9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007ba0:	ec45 4b10 	vmov	d0, r4, r5
 8007ba4:	bd70      	pop	{r4, r5, r6, pc}
 8007ba6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007baa:	da08      	bge.n	8007bbe <scalbn+0xb6>
 8007bac:	2d00      	cmp	r5, #0
 8007bae:	a10a      	add	r1, pc, #40	; (adr r1, 8007bd8 <scalbn+0xd0>)
 8007bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bb4:	dac0      	bge.n	8007b38 <scalbn+0x30>
 8007bb6:	a10e      	add	r1, pc, #56	; (adr r1, 8007bf0 <scalbn+0xe8>)
 8007bb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bbc:	e7bc      	b.n	8007b38 <scalbn+0x30>
 8007bbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007bc2:	3236      	adds	r2, #54	; 0x36
 8007bc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007bc8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007bcc:	4620      	mov	r0, r4
 8007bce:	4b0c      	ldr	r3, [pc, #48]	; (8007c00 <scalbn+0xf8>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	e7d5      	b.n	8007b80 <scalbn+0x78>
 8007bd4:	f3af 8000 	nop.w
 8007bd8:	c2f8f359 	.word	0xc2f8f359
 8007bdc:	01a56e1f 	.word	0x01a56e1f
 8007be0:	8800759c 	.word	0x8800759c
 8007be4:	7e37e43c 	.word	0x7e37e43c
 8007be8:	8800759c 	.word	0x8800759c
 8007bec:	fe37e43c 	.word	0xfe37e43c
 8007bf0:	c2f8f359 	.word	0xc2f8f359
 8007bf4:	81a56e1f 	.word	0x81a56e1f
 8007bf8:	43500000 	.word	0x43500000
 8007bfc:	ffff3cb0 	.word	0xffff3cb0
 8007c00:	3c900000 	.word	0x3c900000
 8007c04:	00000000 	.word	0x00000000

08007c08 <floor>:
 8007c08:	ec51 0b10 	vmov	r0, r1, d0
 8007c0c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c14:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8007c18:	2e13      	cmp	r6, #19
 8007c1a:	ee10 5a10 	vmov	r5, s0
 8007c1e:	ee10 8a10 	vmov	r8, s0
 8007c22:	460c      	mov	r4, r1
 8007c24:	dc31      	bgt.n	8007c8a <floor+0x82>
 8007c26:	2e00      	cmp	r6, #0
 8007c28:	da14      	bge.n	8007c54 <floor+0x4c>
 8007c2a:	a333      	add	r3, pc, #204	; (adr r3, 8007cf8 <floor+0xf0>)
 8007c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c30:	f7f8 fb24 	bl	800027c <__adddf3>
 8007c34:	2200      	movs	r2, #0
 8007c36:	2300      	movs	r3, #0
 8007c38:	f7f8 ff66 	bl	8000b08 <__aeabi_dcmpgt>
 8007c3c:	b138      	cbz	r0, 8007c4e <floor+0x46>
 8007c3e:	2c00      	cmp	r4, #0
 8007c40:	da53      	bge.n	8007cea <floor+0xe2>
 8007c42:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8007c46:	4325      	orrs	r5, r4
 8007c48:	d052      	beq.n	8007cf0 <floor+0xe8>
 8007c4a:	4c2d      	ldr	r4, [pc, #180]	; (8007d00 <floor+0xf8>)
 8007c4c:	2500      	movs	r5, #0
 8007c4e:	4621      	mov	r1, r4
 8007c50:	4628      	mov	r0, r5
 8007c52:	e024      	b.n	8007c9e <floor+0x96>
 8007c54:	4f2b      	ldr	r7, [pc, #172]	; (8007d04 <floor+0xfc>)
 8007c56:	4137      	asrs	r7, r6
 8007c58:	ea01 0307 	and.w	r3, r1, r7
 8007c5c:	4303      	orrs	r3, r0
 8007c5e:	d01e      	beq.n	8007c9e <floor+0x96>
 8007c60:	a325      	add	r3, pc, #148	; (adr r3, 8007cf8 <floor+0xf0>)
 8007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c66:	f7f8 fb09 	bl	800027c <__adddf3>
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	f7f8 ff4b 	bl	8000b08 <__aeabi_dcmpgt>
 8007c72:	2800      	cmp	r0, #0
 8007c74:	d0eb      	beq.n	8007c4e <floor+0x46>
 8007c76:	2c00      	cmp	r4, #0
 8007c78:	bfbe      	ittt	lt
 8007c7a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007c7e:	4133      	asrlt	r3, r6
 8007c80:	18e4      	addlt	r4, r4, r3
 8007c82:	ea24 0407 	bic.w	r4, r4, r7
 8007c86:	2500      	movs	r5, #0
 8007c88:	e7e1      	b.n	8007c4e <floor+0x46>
 8007c8a:	2e33      	cmp	r6, #51	; 0x33
 8007c8c:	dd0b      	ble.n	8007ca6 <floor+0x9e>
 8007c8e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007c92:	d104      	bne.n	8007c9e <floor+0x96>
 8007c94:	ee10 2a10 	vmov	r2, s0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	f7f8 faef 	bl	800027c <__adddf3>
 8007c9e:	ec41 0b10 	vmov	d0, r0, r1
 8007ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8007caa:	f04f 37ff 	mov.w	r7, #4294967295
 8007cae:	40df      	lsrs	r7, r3
 8007cb0:	4238      	tst	r0, r7
 8007cb2:	d0f4      	beq.n	8007c9e <floor+0x96>
 8007cb4:	a310      	add	r3, pc, #64	; (adr r3, 8007cf8 <floor+0xf0>)
 8007cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cba:	f7f8 fadf 	bl	800027c <__adddf3>
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f7f8 ff21 	bl	8000b08 <__aeabi_dcmpgt>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d0c1      	beq.n	8007c4e <floor+0x46>
 8007cca:	2c00      	cmp	r4, #0
 8007ccc:	da0a      	bge.n	8007ce4 <floor+0xdc>
 8007cce:	2e14      	cmp	r6, #20
 8007cd0:	d101      	bne.n	8007cd6 <floor+0xce>
 8007cd2:	3401      	adds	r4, #1
 8007cd4:	e006      	b.n	8007ce4 <floor+0xdc>
 8007cd6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007cda:	2301      	movs	r3, #1
 8007cdc:	40b3      	lsls	r3, r6
 8007cde:	441d      	add	r5, r3
 8007ce0:	45a8      	cmp	r8, r5
 8007ce2:	d8f6      	bhi.n	8007cd2 <floor+0xca>
 8007ce4:	ea25 0507 	bic.w	r5, r5, r7
 8007ce8:	e7b1      	b.n	8007c4e <floor+0x46>
 8007cea:	2500      	movs	r5, #0
 8007cec:	462c      	mov	r4, r5
 8007cee:	e7ae      	b.n	8007c4e <floor+0x46>
 8007cf0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007cf4:	e7ab      	b.n	8007c4e <floor+0x46>
 8007cf6:	bf00      	nop
 8007cf8:	8800759c 	.word	0x8800759c
 8007cfc:	7e37e43c 	.word	0x7e37e43c
 8007d00:	bff00000 	.word	0xbff00000
 8007d04:	000fffff 	.word	0x000fffff

08007d08 <_init>:
 8007d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0a:	bf00      	nop
 8007d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d0e:	bc08      	pop	{r3}
 8007d10:	469e      	mov	lr, r3
 8007d12:	4770      	bx	lr

08007d14 <_fini>:
 8007d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d16:	bf00      	nop
 8007d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d1a:	bc08      	pop	{r3}
 8007d1c:	469e      	mov	lr, r3
 8007d1e:	4770      	bx	lr
